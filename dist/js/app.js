!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="../",r(r.s=0)}([function(e,t,r){r(1),r(2),r(3),r(5),e.exports=r(4)},function(e,t){LZWEncoder=function(){var e,t,r,n,i,a,s,o,c,l,d,u,m={},f=-1,h=12,w=5003,v=h,y=1<<h,F=[],g=[],p=w,I=0,S=!1,L=0,_=0,b=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],C=[],E=m.LZWEncoder=function(i,a,s,o){e=i,t=a,r=s,n=Math.max(2,o)},N=function(e,t){C[u++]=e,u>=254&&D(t)},x=function(e){B(p),I=l+2,S=!0,O(l,e)},B=function(e){for(var t=0;t<e;++t)F[t]=-1},k=m.compress=function(e,t){var r,n,i,a,m,h,w;for(S=!1,o=M(s=c=e),d=1+(l=1<<e-1),I=l+2,u=0,a=P(),w=0,r=p;r<65536;r*=2)++w;w=8-w,B(h=p),O(l,t);e:for(;(i=P())!=f;)if(r=(i<<v)+a,F[n=i<<w^a]!=r){if(F[n]>=0){m=h-n,0===n&&(m=1);do{if((n-=m)<0&&(n+=h),F[n]==r){a=g[n];continue e}}while(F[n]>=0)}O(a,t),a=i,I<y?(g[n]=I++,F[n]=r):x(t)}else a=g[n];O(a,t),O(d,t)},D=(m.encode=function(r){r.writeByte(n),i=e*t,a=0,k(n+1,r),r.writeByte(0)},function(e){u>0&&(e.writeByte(u),e.writeBytes(C,0,u),u=0)}),M=function(e){return(1<<e)-1},P=function(){return 0===i?f:(--i,255&r[a++])},O=function(e,t){for(L&=b[_],_>0?L|=e<<_:L=e,_+=s;_>=8;)N(255&L,t),L>>=8,_-=8;if((I>o||S)&&(S?(o=M(s=c),S=!1):(++s,o=s==v?y:M(s))),e==d){for(;_>0;)N(255&L,t),L>>=8,_-=8;D(t)}};return E.apply(this,arguments),m}},function(e,t){NeuQuant=function(){var e,t,r,n,i,a={},s=256,o=499,c=491,l=487,d=503,u=3*d,m=s-1,f=4,h=100,w=16,v=1<<w,y=10,F=10,g=v>>F,p=v<<y-F,I=s>>3,S=6,L=1<<S,_=I*L,b=30,C=10,E=1<<C,N=8,x=1<<N,B=C+N,k=1<<B,D=[],M=[],P=[],O=[],T=a.NeuQuant=function(e,a,o){var c,l;for(t=e,r=a,n=o,i=new Array(s),c=0;c<s;c++)i[c]=new Array(4),(l=i[c])[0]=l[1]=l[2]=(c<<f+8)/s,P[c]=v/s,M[c]=0},q=function(){for(var e=[],t=new Array(s),r=0;r<s;r++)t[i[r][3]]=r;for(var n=0,a=0;a<s;a++){var o=t[a];e[n++]=i[o][0],e[n++]=i[o][1],e[n++]=i[o][2]}return e},R=function(){var e,t,r,n,a,o,c,l;for(c=0,l=0,e=0;e<s;e++){for(r=e,n=(a=i[e])[1],t=e+1;t<s;t++)(o=i[t])[1]<n&&(r=t,n=o[1]);if(o=i[r],e!=r&&(t=o[0],o[0]=a[0],a[0]=t,t=o[1],o[1]=a[1],a[1]=t,t=o[2],o[2]=a[2],a[2]=t,t=o[3],o[3]=a[3],a[3]=t),n!=c){for(D[c]=l+e>>1,t=c+1;t<n;t++)D[t]=e;c=n,l=e}}for(D[c]=l+m>>1,t=c+1;t<256;t++)D[t]=m},A=function(){var i,a,s,m,w,v,y,F,g,p,I,L,C,N;for(r<u&&(n=1),e=30+(n-1)/3,L=t,C=0,N=r,p=(I=r/(3*n))/h|0,F=E,(y=(v=_)>>S)<=1&&(y=0),i=0;i<y;i++)O[i]=F*((y*y-i*i)*x/(y*y));for(g=r<u?3:r%o!=0?3*o:r%c!=0?3*c:r%l!=0?3*l:3*d,i=0;i<I;)if(s=(255&L[C+0])<<f,m=(255&L[C+1])<<f,w=(255&L[C+2])<<f,a=$(s,m,w),J(F,a,s,m,w),0!==y&&j(y,a,s,m,w),(C+=g)>=N&&(C-=r),0===p&&(p=1),++i%p==0)for(F-=F/e,(y=(v-=v/b)>>S)<=1&&(y=0),a=0;a<y;a++)O[a]=F*((y*y-a*a)*x/(y*y))},U=(a.map=function(e,t,r){var n,a,o,c,l,d,u;for(l=1e3,u=-1,a=(n=D[t])-1;n<s||a>=0;)n<s&&((o=(d=i[n])[1]-t)>=l?n=s:(n++,o<0&&(o=-o),(c=d[0]-e)<0&&(c=-c),(o+=c)<l&&((c=d[2]-r)<0&&(c=-c),(o+=c)<l&&(l=o,u=d[3])))),a>=0&&((o=t-(d=i[a])[1])>=l?a=-1:(a--,o<0&&(o=-o),(c=d[0]-e)<0&&(c=-c),(o+=c)<l&&((c=d[2]-r)<0&&(c=-c),(o+=c)<l&&(l=o,u=d[3]))));return u},a.process=function(){return A(),U(),R(),q()},function(){var e;for(e=0;e<s;e++)i[e][0]>>=f,i[e][1]>>=f,i[e][2]>>=f,i[e][3]=e}),j=function(e,t,r,n,a){var o,c,l,d,u,m,f;for((l=t-e)<-1&&(l=-1),(d=t+e)>s&&(d=s),o=t+1,c=t-1,m=1;o<d||c>l;){if(u=O[m++],o<d){f=i[o++];try{f[0]-=u*(f[0]-r)/k,f[1]-=u*(f[1]-n)/k,f[2]-=u*(f[2]-a)/k}catch(e){}}if(c>l){f=i[c--];try{f[0]-=u*(f[0]-r)/k,f[1]-=u*(f[1]-n)/k,f[2]-=u*(f[2]-a)/k}catch(e){}}}},J=function(e,t,r,n,a){var s=i[t];s[0]-=e*(s[0]-r)/E,s[1]-=e*(s[1]-n)/E,s[2]-=e*(s[2]-a)/E},$=function(e,t,r){var n,a,o,c,l,d,u,m,h,v;for(h=m=~(1<<31),u=d=-1,n=0;n<s;n++)(a=(v=i[n])[0]-e)<0&&(a=-a),(o=v[1]-t)<0&&(o=-o),a+=o,(o=v[2]-r)<0&&(o=-o),(a+=o)<m&&(m=a,d=n),(c=a-(M[n]>>w-f))<h&&(h=c,u=n),l=P[n]>>F,P[n]-=l,M[n]+=l<<y;return P[d]+=g,M[d]-=p,u};return T.apply(this,arguments),a}},function(e,t){GIFEncoder=function(){for(var e=0,t={};e<256;e++)t[e]=String.fromCharCode(e);function r(){this.bin=[]}r.prototype.getData=function(){for(var e="",r=this.bin.length,n=0;n<r;n++)e+=t[this.bin[n]];return e},r.prototype.writeByte=function(e){this.bin.push(e)},r.prototype.writeUTFBytes=function(e){for(var t=e.length,r=0;r<t;r++)this.writeByte(e.charCodeAt(r))},r.prototype.writeBytes=function(e,t,r){for(var n=r||e.length,i=t||0;i<n;i++)this.writeByte(e[i])};var n,i,a,s,o,c,l,d,u,m={},f=null,h=-1,w=0,v=!1,y=[],F=7,g=-1,p=!1,I=!0,S=!1,L=10,_="Generated by jsgif (https://github.com/antimatter15/jsgif/)",b=(m.setDelay=function(e){w=Math.round(e/10)},m.setDispose=function(e){e>=0&&(g=e)},m.setRepeat=function(e){e>=0&&(h=e)},m.setTransparent=function(e){f=e},m.setComment=function(e){_=e},m.addFrame=function(e,t){if(null===e||!v||null===s)throw new Error("Please call start method before calling addFrame");var r=!0;try{t?e instanceof ImageData?(o=e.data,sizeset&&n==e.width&&i==e.height||C(e.width,e.height)):e instanceof Uint8ClampedArray?e.length==n*i*4?o=e:(console.log("Please set the correct size: ImageData length mismatch"),r=!1):(console.log("Please provide correct input"),r=!1):(o=e.getImageData(0,0,e.canvas.width,e.canvas.height).data,S||C(e.canvas.width,e.canvas.height)),x(),E(),I&&(M(),O(),h>=0&&P()),B(),""!==_&&k(),D(),I||O(),q(),I=!1}catch(e){r=!1}return r},m.download=function(e){if(null===s||0==p)console.log("Please call start method and add frames and call finish method before calling download");else{e=void 0!==e?e.endsWith(".gif")?e:e+".gif":"download.gif";var t=document.createElement("a");t.download=e,t.href=URL.createObjectURL(new Blob([new Uint8Array(s.bin)],{type:"image/gif"})),t.click()}},m.finish=function(){if(!v)return!1;var e=!0;v=!1;try{s.writeByte(59),p=!0}catch(t){e=!1}return e},function(){a=0,o=null,c=null,l=null,u=null,p=!1,I=!0}),C=(m.setFrameRate=function(e){15!=e&&(w=Math.round(100/e))},m.setQuality=function(e){e<1&&(e=1),L=e},m.setSize=function(e,t){v&&!I||((n=e)<1&&(n=320),(i=t)<1&&(i=240),S=!0)}),E=(m.start=function(){b();var e=!0;p=!1,s=new r;try{s.writeUTFBytes("GIF89a")}catch(t){e=!1}return v=e},m.cont=function(){return b(),p=!1,s=new r,v=!0},function(){var e=c.length,t=e/3;l=[];var r=new NeuQuant(c,e,L);u=r.process();for(var n=0,i=0;i<t;i++){var s=r.map(255&c[n++],255&c[n++],255&c[n++]);y[s]=!0,l[i]=s}c=null,d=8,F=7,null!==f&&(a=N(f))}),N=function(e){if(null===u)return-1;for(var t=(16711680&e)>>16,r=(65280&e)>>8,n=255&e,i=0,a=16777216,s=u.length,o=0;o<s;){var c=t-(255&u[o++]),l=r-(255&u[o++]),d=n-(255&u[o]),m=c*c+l*l+d*d,f=o/3;y[f]&&m<a&&(a=m,i=f),o++}return i},x=function(){var e=n,t=i;c=[];for(var r=o,a=0,s=0;s<t;s++)for(var l=0;l<e;l++){var d=s*e*4+4*l;c[a++]=r[d],c[a++]=r[d+1],c[a++]=r[d+2]}},B=function(){var e,t;s.writeByte(33),s.writeByte(249),s.writeByte(4),null===f?(e=0,t=0):(e=1,t=2),g>=0&&(t=7&g),t<<=2,s.writeByte(0|t|e),T(w),s.writeByte(a),s.writeByte(0)},k=function(){s.writeByte(33),s.writeByte(254),s.writeByte(_.length),s.writeUTFBytes(_),s.writeByte(0)},D=function(){s.writeByte(44),T(0),T(0),T(n),T(i),I?s.writeByte(0):s.writeByte(128|F)},M=function(){T(n),T(i),s.writeByte(240|F),s.writeByte(0),s.writeByte(0)},P=function(){s.writeByte(33),s.writeByte(255),s.writeByte(11),s.writeUTFBytes("NETSCAPE2.0"),s.writeByte(3),s.writeByte(1),T(h),s.writeByte(0)},O=function(){s.writeBytes(u);for(var e=768-u.length,t=0;t<e;t++)s.writeByte(0)},T=function(e){s.writeByte(255&e),s.writeByte(e>>8&255)},q=function(){new LZWEncoder(n,i,l,d).encode(s)};return m.stream=function(){return s},m.setProperties=function(e,t){v=e,I=t},m}},function(e,t,r){},function(e,t,r){"use strict";r.r(t);const n=["e","E"],i=["b","B"],a=["r","R"],s=["y","Y"],o=["g","G"],c=["+"],l=["-"],d=["d","D"],u="window__item_selected",m=document.getElementById("canvas"),f=document.querySelectorAll("#tools .window__item:not(.disabled)"),h=(document.querySelectorAll("#dimension_switcher .window__item:not(.disabled)"),document.querySelector("#curr-color")),w=document.querySelector(".frames"),v=document.querySelector("#animation-preview .window__content"),y=document.querySelector("#animation-preview .animation-speed__range"),F=document.querySelector("#animation-preview .animation-speed__fps"),g=document.getElementById("export-btn"),p=m.getContext("2d");let I=null;const S={curSessionFrames:[],curFrameIndex:0,addCssClassCurrentToFrame(e){w.children[e].classList.add("current-frame")},removeCssClassCurrentFromFrame(e){w.children[e].classList.remove("current-frame")},drawCurFrameInFrameList(){this.curSessionFrames[this.curFrameIndex]=m.toDataURL("image/png"),w.children[this.curFrameIndex].style=`background-image: url("${this.curSessionFrames[this.curFrameIndex]}")`},drawFramesSerialNumbersInFrameList(){for(let e=0;e<w.children.length;e+=1)w.children[e].querySelector(".frames__item-num").innerText=e+1},initFrameList(){for(let e=0;e<this.curSessionFrames.length;e+=1)w.insertAdjacentHTML("beforeend",'<li class="frames__item" draggable="true"><div class="frames__item-num">1</div><div class="frames__btn-del">-</div><div class="frames__btn-add">+</div><div class="frames__btn-copy">D</div></li>'),w.lastChild.style=`background-image: url("${this.curSessionFrames[e]}")`;this.drawFramesSerialNumbersInFrameList(),this.addCssClassCurrentToFrame(0)},addFrameToFrameList(e){w.children[e].insertAdjacentHTML("afterend",'<li class="frames__item" draggable="true"><div class="frames__item-num">1</div><div class="frames__btn-del">-</div><div class="frames__btn-add">+</div><div class="frames__btn-copy">D</div></li>')},removeFrameFromFrameList(e){w.children[e].remove()},getChildIndexInFrameList(e){for(let t=0;t<w.children.length;t+=1)if(w.children[t]===e)return t;return-1},drawNewFrameInCanvas(e){return new Promise(t=>{const r=new Image;r.crossOrigin="Anonymous",r.src=this.curSessionFrames[e],r.onload=()=>{p.fillStyle="gray",p.fillRect(0,0,512,512),p.drawImage(r,0,0,512,512),t()}})},drawClearFrameInCanvas(){p.fillStyle="gray",p.fillRect(0,0,512,512)},openFrame(e){const t=this.getChildIndexInFrameList(e);t!==this.curFrameIndex&&(this.curFrameIndex=t,this.drawNewFrameInCanvas(this.curFrameIndex))},deleteFrame(e){if(1!==w.children.length){const t=this.getChildIndexInFrameList(e.parentElement);this.curSessionFrames.splice(t,1),this.removeFrameFromFrameList(t),this.curFrameIndex===t?t===this.curSessionFrames.length?(this.drawNewFrameInCanvas(t-1),this.curFrameIndex-=1):this.drawNewFrameInCanvas(t):this.curFrameIndex>t&&(this.curFrameIndex-=1),this.drawFramesSerialNumbersInFrameList()}},addFrame(e){const t=this.getChildIndexInFrameList(e.parentElement);this.drawCurFrameInFrameList(),this.drawClearFrameInCanvas(),this.curSessionFrames.splice(t+1,0,m.toDataURL("image/png")),this.addFrameToFrameList(t),this.curFrameIndex=t+1,this.drawCurFrameInFrameList(),this.drawFramesSerialNumbersInFrameList()},duplicateFrame(e){const t=this.getChildIndexInFrameList(e.parentElement);this.addFrameToFrameList(t),this.curSessionFrames.splice(t+1,0,this.curSessionFrames[t]),this.curFrameIndex=t+1,this.drawFramesSerialNumbersInFrameList(),this.drawNewFrameInCanvas(t).then(()=>{this.drawCurFrameInFrameList()})}};setInterval(()=>{S.drawCurFrameInFrameList()},1e3),w.addEventListener("click",e=>{const{target:t}=e;S.removeCssClassCurrentFromFrame(S.curFrameIndex),t.classList.contains("frames__item")?S.openFrame(t):t.classList.contains("frames__btn-del")?S.deleteFrame(t):t.classList.contains("frames__btn-add")?S.addFrame(t):t.classList.contains("frames__btn-copy")&&S.duplicateFrame(t),S.addCssClassCurrentToFrame(S.curFrameIndex)}),w.addEventListener("dragstart",e=>{I=S.getChildIndexInFrameList(e.target)}),w.addEventListener("dragenter",e=>{e.target.classList.add("dragover")}),w.addEventListener("dragover",e=>(e.preventDefault(),e.dataTransfer.dropEffect="move",!1)),w.addEventListener("dragleave",e=>{e.target.classList.remove("dragover")}),w.addEventListener("drop",e=>{e.stopPropagation();const t=S.getChildIndexInFrameList(e.target);if(I!==t){const e=w.children;I<t?w.insertBefore(e[I],e[t].nextSibling):w.insertBefore(e[I],e[t]),S.curFrameIndex=S.getChildIndexInFrameList(w.querySelector(".current-frame"));const r=S.curSessionFrames.splice(I,1)[0];S.curSessionFrames.splice(t,0,r),S.drawFramesSerialNumbersInFrameList()}return!1}),w.addEventListener("dragend",()=>{for(let e=0;e<w.children.length;e+=1)w.children[e].classList.remove("dragover")});var L=S;const _={curPreviewFrameIndex:-1,previewRefreshPeriod:1e3,isPreviewRunning:!1,previewDrawInterval:null,drawNextFrameInPreview(){this.curPreviewFrameIndex+=1,L.curSessionFrames.length<=this.curPreviewFrameIndex&&(this.curPreviewFrameIndex=0),v.style=`background-image: url("${L.curSessionFrames[this.curPreviewFrameIndex]}")`}};y.addEventListener("input",()=>{F.innerText=y.value}),y.addEventListener("change",()=>{const e=parseInt(y.value,10);0===e?(_.isPreviewRunning=!1,_.previewRefreshPeriod=1e3):(_.isPreviewRunning=!0,_.previewRefreshPeriod=1e3/e),clearInterval(_.previewDrawInterval),_.previewDrawInterval=setInterval(()=>{_.isPreviewRunning&&_.drawNextFrameInPreview()},_.previewRefreshPeriod)}),v.addEventListener("click",()=>{v.requestFullscreen()}),v.onfullscreenchange=function(){v.classList.toggle("fullscreen")};var b=_,C={loadCurrentColor(){const e=localStorage.getItem("current-color");let t;return e&&"null"!==e?(t=JSON.parse(e),document.querySelector('.window__item[color="curr-color"] .window__color').value=t,t):"#e58719"},loadDimensionLen(){const e=localStorage.getItem("dimensionLen");let t;if(e&&"null"!==e){switch(t=JSON.parse(e),t){case"DIMENSION_SMALL":t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(u);break;case"DIMENSION_MEDIUM":t=64,document.querySelector('.window__item[dimension="DIMENSION_MEDIUM"]').classList.add(u);break;case"DIMENSION_LARGE":t=128,document.querySelector('.window__item[dimension="DIMENSION_LARGE"]').classList.add(u);break;default:t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(u)}p.fillStyle="gray",p.fillRect(0,0,512,512)}else t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(u),p.fillStyle="gray",p.fillRect(0,0,512,512);return t},loadCurSessionFrames(){const e=localStorage.getItem("curSessionFrames");e&&"null"!==e?(L.curSessionFrames=JSON.parse(e),L.drawNewFrameInCanvas(0)):L.curSessionFrames.push(m.toDataURL("image/png"))},saveAll(e,t){switch(e){case 32:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_SMALL"));break;case 64:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_MEDIUM"));break;case 128:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_LARGE"));break;default:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_SMALL"))}L.drawCurFrameInFrameList(),localStorage.setItem("curSessionFrames",JSON.stringify(L.curSessionFrames)),localStorage.setItem("current-color",JSON.stringify(t))}};function E(e,t,r,n){let i,a;for(i=0;i<r&&!(i>t);i+=n);for(a=0;a<r&&!(a>e);a+=n);return{rightX:a,bottomY:i}}g.addEventListener("click",()=>{const e=new GIFEncoder;e.setRepeat(0),e.setDelay(b.previewRefreshPeriod),e.start();const t=[];for(let r=L.curFrameIndex;r<L.curSessionFrames.length;r+=1)t.push(L.drawNewFrameInCanvas(r).then(()=>{e.addFrame(p)}));for(let r=0;r<L.curFrameIndex;r+=1)t.push(L.drawNewFrameInCanvas(r).then(()=>{e.addFrame(p)}));Promise.all(t).then(()=>{L.drawNewFrameInCanvas(L.curFrameIndex),e.finish(),e.download("download.gif")})});let N,x,B=!1;function k(e,t){return function(e){let t=e[0].toString(16),r=e[1].toString(16),n=e[2].toString(16);return 1===t.length&&(t=`0${t}`),1===r.length&&(r=`0${r}`),1===n.length&&(n=`0${n}`),`#${t}${r}${n}`}(p.getImageData(e,t,1,1).data)}m.width=512,m.height=512;const D={currentColor:"#e58719",dimensionLen:32,selectedTool:"pencil",pencilUnit:1,eraserUnit:2,init(){this.dimensionLen=C.loadDimensionLen(),this.currentColor=C.loadCurrentColor()},pencilFunc(e,t,r,n){const i=512/this.dimensionLen;let{rightX:a,bottomY:s}=E(e,t,m.width,i);n>2&&(a+=i,s+=i),p.fillStyle=r,p.fillRect(a-n*i,s-n*i,n*i+1,n*i+1)},fillBucketFunc(e,t){const r=512/this.dimensionLen,{rightX:n,bottomY:i}=E(e,t,m.width,r),a=k(n-r/2,i-r/2);p.fillStyle=this.currentColor,function(e,t,r,n,i){const a=[];for(a.push({x:e,y:t});0!==a.length;){const{x:e,y:t}=a.pop();n(e,t),i(e+r,t)&&a.push({x:e+r,y:t}),i(e-r,t)&&a.push({x:e-r,y:t}),i(e,t+r)&&a.push({x:e,y:t+r}),i(e,t-r)&&a.push({x:e,y:t-r})}}(n-r/2,i-r/2,r,(e,t)=>{p.fillRect(e-r/2,t-r/2,r+1,r+1)},(e,t)=>e>0&&e<512&&t>0&&t<512&&a!==this.currentColor&&a===k(e,t))},eyeDropperFunc(e,t){document.querySelector(".window__item_selected").classList.remove(u),document.querySelector('.window__item[tool="pencil"]').classList.add(u),this.selectedTool="pencil",h.value=k(e,t),this.currentColor=h.value}};m.addEventListener("mousedown",e=>{switch(B=!0,N=e.clientX-m.offsetLeft,x=e.clientY-m.offsetTop,D.selectedTool){case"pencil":D.pencilFunc(N,x,D.currentColor,D.pencilUnit);break;case"fill-drip":D.fillBucketFunc(N,x,N,x);break;case"eye-dropper":D.eyeDropperFunc(N,x);break;case"eraser":D.pencilFunc(N,x,"gray",D.eraserUnit)}}),m.addEventListener("mousemove",e=>{if(B){switch(D.selectedTool){case"pencil":D.pencilFunc(e.clientX-m.offsetLeft,e.clientY-m.offsetTop,D.currentColor,D.pencilUnit);break;case"eraser":D.pencilFunc(e.clientX-m.offsetLeft,e.clientY-m.offsetTop,"gray",D.eraserUnit)}N=e.clientX-m.offsetLeft,x=e.clientY-m.offsetTop}}),document.addEventListener("mouseup",()=>{B=!1,N=void 0,x=void 0});var M=D;f.forEach(e=>{e.addEventListener("click",()=>{e.hasAttribute("tool")&&(e.classList.contains(u)||(e.parentElement.querySelector(".window__item_selected").classList.remove(u),e.classList.add(u),M.selectedTool=e.getAttribute("tool")))})}),M.init(),C.loadCurSessionFrames(),L.initFrameList(),b.drawNextFrameInPreview(),document.addEventListener("keydown",e=>{var t;(t=e).key===n[0]||t.key===n[1]?document.querySelector('.window__item[tool="pencil"]').dispatchEvent(new Event("click")):t.key===s[0]||t.key===s[1]?document.querySelector('.window__item[tool="eye-dropper"]').dispatchEvent(new Event("click")):t.key===i[0]||t.key===i[1]?document.querySelector('.window__item[tool="fill-drip"]').dispatchEvent(new Event("click")):t.key===a[0]||t.key===a[1]?document.querySelector('.window__item[tool="eraser"]').dispatchEvent(new Event("click")):t.key===o[0]||t.key===o[1]?document.querySelector("#export-btn").dispatchEvent(new Event("click")):t.key===c[0]?document.querySelector(".frames .current-frame .frames__btn-add").click():t.key===l[0]?document.querySelector(".frames .current-frame .frames__btn-del").click():t.key!==d[0]&&t.key!==d[1]||document.querySelector(".frames .current-frame .frames__btn-copy").click()}),h.addEventListener("change",()=>{M.currentColor=h.value}),window.addEventListener("beforeunload",()=>{C.saveAll(M.dimensionLen,M.currentColor)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,