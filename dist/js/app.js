/*! For license information please see app.js.LICENSE */
!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="../",n(n.s=9)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,o=n(2),a=n(3),s=n(5),u=n(6),c=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r),h=new a.ErrorFactory("app","Firebase",c),l="@firebase/app",f=((i={})[l]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),d=new u.Logger("@firebase/app"),p=function(){function e(e,t,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(e),this.container=new s.ComponentContainer(t.name),this._addComponent(new s.Component("app",(function(){return u}),"PUBLIC"));try{for(var c=o.__values(this.firebase_.INTERNAL.components.values()),h=c.next();!h.done;h=c.next()){var l=h.value;this._addComponent(l)}}catch(e){r={error:e}}finally{try{h&&!h.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){return void 0===t&&(t="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(e).getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t="[DEFAULT]"),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){d.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw h.create("app-deleted",{appName:this.name_})},e}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var v=function e(){var t=function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw h.create("bad-app-name",{appName:String(s)});if(a.contains(t,s))throw h.create("duplicate-app",{appName:s});var u=new e(n,o,r);return t[s]=u,u},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=f[e])&&void 0!==r?r:e;n&&(i+="-"+n);var o=i.match(/\s|\//),a=t.match(/\s|\//);if(o||a){var c=['Unable to register library "'+i+'" with version "'+t+'":'];return o&&c.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&c.push("and"),a&&c.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void d.warn(c.join(" "))}u(new s.Component(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},apps:null,SDK_VERSION:"7.7.0",INTERNAL:{registerComponent:u,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){return"serverAuth"===t?null:t}}};function i(e){if(e=e||"[DEFAULT]",!a.contains(t,e))throw h.create("no-app",{appName:e});return t[e]}function u(s){var u,c,l=s.name;if(n.has(l))return d.debug("There were multiple attempts to register component "+l+"."),"PUBLIC"===s.type?r[l]:null;if(n.set(l,s),"PUBLIC"===s.type){var f=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[l])throw h.create("invalid-app-argument",{appName:l});return e[l]()};void 0!==s.serviceProps&&a.deepExtend(f,s.serviceProps),r[l]=f,e.prototype[l]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._getService.bind(this,l);return n.apply(this,s.multipleInstances?e:[])}}try{for(var p=o.__values(Object.keys(t)),v=p.next();!v.done;v=p.next()){var m=v.value;t[m]._addComponent(s)}}catch(e){u={error:e}}finally{try{v&&!v.done&&(c=p.return)&&c.call(p)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?r[l]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r}(p);return t.INTERNAL=o.__assign(o.__assign({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){a.deepExtend(t,e)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),t}(),m=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t;return"VERSION"===(null===(t=e.getComponent())||void 0===t?void 0:t.type)}(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();if(a.isBrowser()&&void 0!==self.firebase){d.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var g=self.firebase.SDK_VERSION;g&&g.indexOf("LITE")>=0&&d.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var b=v.initializeApp;v.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.isNode()&&d.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),b.apply(void 0,e)};var y=v;!function(e,t){e.INTERNAL.registerComponent(new s.Component("platform-logger",(function(e){return new m(e)}),"PRIVATE")),e.registerVersion(l,"0.5.2",void 0),e.registerVersion("fire-js","")}(y),t.default=y,t.firebase=y},function(e,t,n){"use strict";var r,i=(r=n(0))&&"object"==typeof r&&"default"in r?r.default:r;i.registerVersion("firebase","7.7.0","app"),e.exports=i},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return c})),n.d(t,"__awaiter",(function(){return h})),n.d(t,"__generator",(function(){return l})),n.d(t,"__exportStar",(function(){return f})),n.d(t,"__values",(function(){return d})),n.d(t,"__read",(function(){return p})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return m})),n.d(t,"__await",(function(){return g})),n.d(t,"__asyncGenerator",(function(){return b})),n.d(t,"__asyncDelegator",(function(){return y})),n.d(t,"__asyncValues",(function(){return w})),n.d(t,"__makeTemplateObject",(function(){return I})),n.d(t,"__importStar",(function(){return S})),n.d(t,"__importDefault",(function(){return E}));var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function l(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function d(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function p(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e}function m(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(e){h(o[0][3],e)}var n}function u(e){s("next",e)}function c(e){s("throw",e)}function h(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function y(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:g(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function w(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=d(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}function I(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(e,t){if(!e)throw a(t)},a=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<e.length;i+=3){var o=e[i],a=i+1<e.length,s=a?e[i+1]:0,u=i+2<e.length,c=u?e[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,d=63&c;u||(d=64,a||(f=64)),r.push(n[h],n[l],n[f],n[d])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{o=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<e.length;){var o=n[e.charAt(i++)],a=i<e.length?n[e.charAt(i)]:0,s=++i<e.length?n[e.charAt(i)]:64,u=++i<e.length?n[e.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!==s){var h=a<<4&240|s>>2;if(r.push(h),64!==u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},c=function(e){try{return u.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function h(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=h(e[n],t[n]));return e}var l=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();function f(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}var d=function(e){function t(n,r){var i=e.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,p.prototype.create),i}return r.__extends(t,e),t}(Error),p=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],a=o?v(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new d(i,s),c=0,h=Object.keys(r);c<h.length;c++){var l=h[c];"_"!==l.slice(-1)&&(l in u&&console.warn('Overwriting FirebaseError base field "'+l+'" can cause unexpected behavior.'),u[l]=r[l])}return u},e}();function v(e,t){return e.replace(m,(function(e,n){var r=t[n];return null!=r?r.toString():"<"+n+"?>"}))}var m=/\{\$([^}]+)}/g;function g(e){return JSON.parse(e)}var b=function(e){var t={},n={},r={},i="";try{var o=e.split(".");t=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}},y=function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}return e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782),i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295,l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e},e}(),w=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e)?e:{next:e,error:t,complete:n}).next&&(r.next=I),void 0===r.error&&(r.error=I),void 0===r.complete&&(r.complete=I);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function I(){}function S(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return e+" failed: "+(r+" argument ")}t.CONSTANTS=i,t.Deferred=l,t.ErrorFactory=p,t.FirebaseError=d,t.Sha1=y,t.assert=o,t.assertionError=a,t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){e.apply(void 0,n)})).catch((function(e){t&&t(e)}))}},t.base64=u,t.base64Decode=c,t.base64Encode=function(e){var t=s(e);return u.encodeByteArray(t,!0)},t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createSubscribe=function(e,t){var n=new w(e,t);return n.subscribe.bind(n)},t.decode=b,t.deepCopy=function(e){return h(void 0,e)},t.deepExtend=h,t.errorPrefix=S,t.getUA=f,t.isAdmin=function(e){var t=b(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"object"==typeof self&&self.self===self},t.isBrowserExtension=function(){var e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id},t.isElectron=function(){return f().indexOf("Electron/")>=0},t.isEmpty=function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){var e=f();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},t.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(e.process)}catch(e){return!1}},t.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isUWP=function(){return f().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){var t=b(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){var t=b(e).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?r=t.nbf:t.hasOwnProperty("iat")&&(r=t.iat),i=t.hasOwnProperty("exp")?t.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},t.issuedAtTime=function(e){var t=b(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=g,t.map=function(e,t,n){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r},t.querystring=function(e){for(var t=[],n=function(e,n){Array.isArray(n)?n.forEach((function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))})):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))},r=0,i=Object.entries(e);r<i.length;r++){var o=i[r];n(o[0],o[1])}return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach((function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;r++,o(r<e.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(e.charCodeAt(r)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.validateArgCount=function(e,t,n,r){var i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(S(e,t,r)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(S(e,t,r)+"must be a valid context object.")},t.validateNamespace=function(e,t,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(S(e,t,r)+"must be a valid firebase namespace.")}}).call(this,n(4))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(3),o=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e}(),a=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return e.prototype.get=function(e){void 0===e&&(e="[DEFAULT]");var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i.Deferred;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=r.__assign({identifier:"[DEFAULT]",optional:!1},e),n=t.identifier,i=t.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(e){if(i)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService("[DEFAULT]")}catch(e){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=r.__read(o.value,2),s=a[0],u=a[1],c=this.normalizeInstanceIdentifier(s);try{var h=this.getOrInitializeService(c);u.resolve(h)}catch(e){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}},e.prototype.clearInstance=function(e){void 0===e&&(e="[DEFAULT]"),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var e;return r.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.getOrInitializeService=function(e){var t=this.instances.get(e);return!t&&this.component&&(t=this.component.instanceFactory(this.container,function(e){return"[DEFAULT]"===e?void 0:e}(e)),this.instances.set(e,t)),t||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:"[DEFAULT]":e},e}(),s=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new a(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=o,t.ComponentContainer=s,t.Provider=a},function(e,t,n){"use strict";function r(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}n.r(t),n.d(t,"LogLevel",(function(){return i})),n.d(t,"Logger",(function(){return u})),n.d(t,"setLogLevel",(function(){return c}));var i,o=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));var a=i.INFO,s=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(t<e.logLevel)){var a=(new Date).toISOString();switch(t){case i.DEBUG:case i.VERBOSE:console.log.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.INFO:console.info.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.WARN:console.warn.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.ERROR:console.error.apply(console,r(["["+a+"]  "+e.name+":"],n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+t+")")}}},u=function(){function e(e){this.name=e,this._logLevel=a,this._logHandler=s,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in i))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.ERROR],e))},e}();function c(e){o.forEach((function(t){t.logLevel=e}))}},function(e,t,n){"use strict";(function(e){var t=n(0),r=n.n(t);(function(){var t,n="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)},i="undefined"!=typeof window&&window===this?this:void 0!==e&&null!=e?e:this;function o(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function a(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:o(e)}}!function(e,t){if(t){var r=i;e=e.split(".");for(var o=0;o<e.length-1;o++){var a=e[o];a in r||(r[a]={}),r=r[a]}(t=t(o=r[e=e[e.length-1]]))!=o&&null!=t&&n(r,e,{configurable:!0,writable:!0,value:t})}}("Promise",(function(e){function t(e){this.b=0,this.c=void 0,this.a=[];var t=this.f();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function n(){this.a=null}function r(e){return e instanceof t?e:new t((function(t){t(e)}))}if(e)return e;n.prototype.b=function(e){if(null==this.a){this.a=[];var t=this;this.c((function(){t.g()}))}this.a.push(e)};var o=i.setTimeout;n.prototype.c=function(e){o(e,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var t=0;t<e.length;++t){var n=e[t];e[t]=null;try{n()}catch(e){this.f(e)}}}this.a=null},n.prototype.f=function(e){this.c((function(){throw e}))},t.prototype.f=function(){function e(e){return function(r){n||(n=!0,e.call(t,r))}}var t=this,n=!1;return{resolve:e(this.m),reject:e(this.g)}},t.prototype.m=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.o(e);else{e:switch(typeof e){case"object":var n=null!=e;break e;case"function":n=!0;break e;default:n=!1}n?this.u(e):this.h(e)}},t.prototype.u=function(e){var t=void 0;try{t=e.then}catch(e){return void this.g(e)}"function"==typeof t?this.v(t,e):this.h(e)},t.prototype.g=function(e){this.i(2,e)},t.prototype.h=function(e){this.i(1,e)},t.prototype.i=function(e,t){if(0!=this.b)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.b);this.b=e,this.c=t,this.l()},t.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)s.b(this.a[e]);this.a=null}};var s=new n;return t.prototype.o=function(e){var t=this.f();e.La(t.resolve,t.reject)},t.prototype.v=function(e,t){var n=this.f();try{e.call(t,n.resolve,n.reject)}catch(e){n.reject(e)}},t.prototype.then=function(e,n){function r(e,t){return"function"==typeof e?function(t){try{i(e(t))}catch(e){o(e)}}:t}var i,o,a=new t((function(e,t){i=e,o=t}));return this.La(r(e,i),r(n,o)),a},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.La=function(e,t){function n(){switch(r.b){case 1:e(r.c);break;case 2:t(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},t.resolve=r,t.reject=function(e){return new t((function(t,n){n(e)}))},t.race=function(e){return new t((function(t,n){for(var i=a(e),o=i.next();!o.done;o=i.next())r(o.value).La(t,n)}))},t.all=function(e){var n=a(e),i=n.next();return i.done?r([]):new t((function(e,t){function o(t){return function(n){a[t]=n,0==--s&&e(a)}}var a=[],s=0;do{a.push(void 0),s++,r(i.value).La(o(a.length-1),t),i=n.next()}while(!i.done)}))},t}));var s=s||{},u=this||self;function c(e){return"string"==typeof e}function h(e){return"boolean"==typeof e}var l=/^[\w+/_-]+[=]{0,2}$/,f=null;function d(){}function p(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t}function v(e){return null===e}function m(e){return"array"==p(e)}function g(e){var t=p(e);return"array"==t||"object"==t&&"number"==typeof e.length}function b(e){return"function"==p(e)}function y(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var w="closure_uid_"+(1e9*Math.random()>>>0),I=0;function S(e,t,n){return e.call.apply(e.bind,arguments)}function E(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function _(e,t,n){return(_=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?S:E).apply(null,arguments)}function T(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var A=Date.now||function(){return+new Date};function k(e,t){function n(){}n.prototype=t.prototype,e.qb=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.gd=function(e,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return t.prototype[n].apply(e,i)}}function N(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function O(e){if(Error.captureStackTrace)Error.captureStackTrace(this,O);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function C(e,t){for(var n="",r=(e=e.split("%s")).length-1,i=0;i<r;i++)n+=e[i]+(i<t.length?t[i]:"%s");O.call(this,n+e[r])}function L(e,t){throw new C("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function P(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function D(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function R(){this.b=this.a=null}k(O,Error),O.prototype.name="CustomError",k(C,O),C.prototype.name="AssertionError",P.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var x=new P((function(){return new M}),(function(e){e.reset()}));function F(){var e=He,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function M(){this.next=this.b=this.a=null}function j(e,t){e:{try{var n=e&&e.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break e}}catch(e){}i=null}if(i&&void 0!==i[t]&&(!e||!(e instanceof i[t])&&(e instanceof i.Location||e instanceof i.Element))){if(y(e))try{var o=e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){o="<object could not be stringified>"}else o=void 0===e?"undefined":null===e?"null":typeof e;L("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,o)}}R.prototype.add=function(e,t){var n=x.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},M.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},M.prototype.reset=function(){this.next=this.b=this.a=null};var U=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if(c(e))return c(t)&&1==t.length?e.indexOf(t,0):-1;for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},V=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,i=c(e)?e.split(""):e,o=0;o<r;o++)o in i&&t.call(n,i[o],o,e)},B=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),i=c(e)?e.split(""):e,o=0;o<n;o++)o in i&&(r[o]=t.call(void 0,i[o],o,e));return r},q=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=c(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e))return!0;return!1};function H(e,t){return 0<=U(e,t)}function J(e,t){var n;return(n=0<=(t=U(e,t)))&&Array.prototype.splice.call(e,t,1),n}function W(e,t){!function(e,t){for(var n=c(e)?e.split(""):e,r=e.length-1;0<=r;--r)r in n&&t.call(void 0,n[r],r,e)}(e,(function(n,r){t.call(void 0,n,r,e)&&Array.prototype.splice.call(e,r,1).length}))}function K(e){return Array.prototype.concat.apply([],arguments)}function G(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}function X(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function z(e){for(var t in e)return!1;return!0}function Y(e){var t,n={};for(t in e)n[t]=e[t];return n}var $="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Z(e,t){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])e[n]=r[n];for(var o=0;o<$.length;o++)n=$[o],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function Q(e,t){this.a=e===ne&&t||"",this.b=te}function ee(e){return e instanceof Q&&e.constructor===Q&&e.b===te?e.a:(L("expected object of type Const, got '"+e+"'"),"type_error:Const")}Q.prototype.qa=!0,Q.prototype.pa=function(){return this.a},Q.prototype.toString=function(){return"Const{"+this.a+"}"};var te={},ne={},re=new Q(ne,"");function ie(){this.a="",this.b=ce}function oe(e){return e instanceof ie&&e.constructor===ie&&e.b===ce?e.a:(L("expected object of type TrustedResourceUrl, got '"+e+"' of type "+p(e)),"type_error:TrustedResourceUrl")}function ae(e,t){var n=ee(e);if(!ue.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return he(e=n.replace(se,(function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof Q?ee(e):encodeURIComponent(String(e))})))}ie.prototype.qa=!0,ie.prototype.pa=function(){return this.a.toString()},ie.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var se=/%{(\w+)}/g,ue=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,ce={};function he(e){var t=new ie;return t.a=e,t}var le=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},fe=/&/g,de=/</g,pe=/>/g,ve=/"/g,me=/'/g,ge=/\x00/g,be=/[\x00&<>"']/;function ye(e,t){return-1!=e.indexOf(t)}function we(e,t){return e<t?-1:e>t?1:0}function Ie(){this.a="",this.b=Ae}function Se(e){return e instanceof Ie&&e.constructor===Ie&&e.b===Ae?e.a:(L("expected object of type SafeUrl, got '"+e+"' of type "+p(e)),"type_error:SafeUrl")}Ie.prototype.qa=!0,Ie.prototype.pa=function(){return this.a.toString()},Ie.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Ee=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function _e(e){return e instanceof Ie?e:(e="object"==typeof e&&e.qa?e.pa():String(e),Ee.test(e)||(e="about:invalid#zClosurez"),ke(e))}var Te,Ae={};function ke(e){var t=new Ie;return t.a=e,t}ke("about:blank");e:{var Ne=u.navigator;if(Ne){var Oe=Ne.userAgent;if(Oe){Te=Oe;break e}}Te=""}function Ce(e){return ye(Te,e)}function Le(){this.a="",this.b=De}function Pe(e){return e instanceof Le&&e.constructor===Le&&e.b===De?e.a:(L("expected object of type SafeHtml, got '"+e+"' of type "+p(e)),"type_error:SafeHtml")}Le.prototype.qa=!0,Le.prototype.pa=function(){return this.a.toString()},Le.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var De={};function Re(e){var t=new Le;return t.a=e,t}Re("<!DOCTYPE html>");var xe,Fe,Me=Re("");function je(e,t){for(var n=e.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Ue(e){return be.test(e)&&(-1!=e.indexOf("&")&&(e=e.replace(fe,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(de,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(pe,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(ve,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(me,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(ge,"&#0;"))),e}function Ve(e){u.setTimeout((function(){throw e}),0)}function Be(e,t){Fe||function(){if(u.Promise&&u.Promise.resolve){var e=u.Promise.resolve(void 0);Fe=function(){e.then(Je)}}else Fe=function(){var e=Je;!b(u.setImmediate)||u.Window&&u.Window.prototype&&!Ce("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(xe||(xe=function(){var e=u.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!Ce("Presto")&&(e=function(){var e=document.createElement("IFRAME");e.style.display="none",function(e){var t=he(ee(re));j(e,"HTMLIFrameElement"),e.src=oe(t).toString()}(e),document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.write(Pe(Me)),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=_((function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()}),this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!Ce("Trident")&&!Ce("MSIE")){var t=new e,n={},r=n;return t.port1.onmessage=function(){if(void 0!==n.next){var e=(n=n.next).yb;n.yb=null,e()}},function(e){r.next={yb:e},r=r.next,t.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(e){var t=document.createElement("SCRIPT");t.onreadystatechange=function(){t.onreadystatechange=null,t.parentNode.removeChild(t),t=null,e(),e=null},document.documentElement.appendChild(t)}:function(e){u.setTimeout(e,0)}}()),xe(e)):u.setImmediate(e)}}(),qe||(Fe(),qe=!0),He.add(e,t)}Re("<br>");var qe=!1,He=new R;function Je(){for(var e;e=F();){try{e.a.call(e.b)}catch(e){Ve(e)}D(x,e)}qe=!1}function We(e,t){if(this.a=Ke,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=d)try{var n=this;e.call(t,(function(e){it(n,Ge,e)}),(function(e){if(!(e instanceof lt))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}it(n,Xe,e)}))}catch(e){it(this,Xe,e)}}var Ke=0,Ge=2,Xe=3;function ze(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}ze.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ye=new P((function(){return new ze}),(function(e){e.reset()}));function $e(e,t,n){var r=Ye.get();return r.g=e,r.b=t,r.f=n,r}function Ze(e){if(e instanceof We)return e;var t=new We(d);return it(t,Ge,e),t}function Qe(e){return new We((function(t,n){n(e)}))}function et(e,t,n){ot(e,t,n,null)||Be(T(t,e))}function tt(e){return new We((function(t){var n=e.length,r=[];if(n)for(var i=function(e,i,o){n--,r[e]=i?{Gb:!0,value:o}:{Gb:!1,reason:o},0==n&&t(r)},o=0;o<e.length;o++)et(e[o],T(i,o,!0),T(i,o,!1));else t(r)}))}function nt(e,t){e.b||e.a!=Ge&&e.a!=Xe||at(e),e.f?e.f.next=t:e.b=t,e.f=t}function rt(e,t,n,r){var i=$e(null,null,null);return i.a=new We((function(e,o){i.g=t?function(n){try{var i=t.call(r,n);e(i)}catch(e){o(e)}}:e,i.b=n?function(t){try{var i=n.call(r,t);void 0===i&&t instanceof lt?o(t):e(i)}catch(e){o(e)}}:o})),i.a.c=e,nt(e,i),i.a}function it(e,t,n){e.a==Ke&&(e===n&&(t=Xe,n=new TypeError("Promise cannot resolve to itself")),e.a=1,ot(n,e.Oc,e.Pc,e)||(e.i=n,e.a=t,e.c=null,at(e),t!=Xe||n instanceof lt||function(e,t){e.g=!0,Be((function(){e.g&&ht.call(null,t)}))}(e,n)))}function ot(e,t,n,r){if(e instanceof We)return nt(e,$e(t||d,n||null,r)),!0;if(N(e))return e.then(t,n,r),!0;if(y(e))try{var i=e.then;if(b(i))return function(e,t,n,r,i){function o(e){a||(a=!0,r.call(i,e))}var a=!1;try{t.call(e,(function(e){a||(a=!0,n.call(i,e))}),o)}catch(e){o(e)}}(e,i,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function at(e){e.h||(e.h=!0,Be(e.Zb,e))}function st(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function ut(e,t,n,r){if(n==Xe&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,ct(t,n,r);else try{t.c?t.g.call(t.f):ct(t,n,r)}catch(e){ht.call(null,e)}D(Ye,t)}function ct(e,t,n){t==Ge?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}We.prototype.then=function(e,t,n){return rt(this,b(e)?e:null,b(t)?t:null,n)},We.prototype.$goog_Thenable=!0,(t=We.prototype).ka=function(e,t){return(e=$e(e,e,t)).c=!0,nt(this,e),this},t.s=function(e,t){return rt(this,null,e,t)},t.cancel=function(e){this.a==Ke&&Be((function(){!function e(t,n){if(t.a==Ke)if(t.c){var r=t.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==t&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==Ke&&1==i?e(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):st(r),ut(r,o,Xe,n)))}t.c=null}else it(t,Xe,n)}(this,new lt(e))}),this)},t.Oc=function(e){this.a=Ke,it(this,Ge,e)},t.Pc=function(e){this.a=Ke,it(this,Xe,e)},t.Zb=function(){for(var e;e=st(this);)ut(this,e,this.a,this.i);this.h=!1};var ht=Ve;function lt(e){O.call(this,e)}function ft(){0!=dt&&(pt[this[w]||(this[w]=++I)]=this),this.va=this.va,this.la=this.la}k(lt,O),lt.prototype.name="cancel";var dt=0,pt={};function vt(e){if(!e.va&&(e.va=!0,e.za(),0!=dt)){var t=e[w]||(e[w]=++I);if(0!=dt&&e.la&&0<e.la.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete pt[t]}}function mt(e){return mt[" "](e),e}ft.prototype.va=!1,ft.prototype.za=function(){if(this.la)for(;this.la.length;)this.la.shift()()},mt[" "]=d;var gt,bt,yt=Ce("Opera"),wt=Ce("Trident")||Ce("MSIE"),It=Ce("Edge"),St=It||wt,Et=Ce("Gecko")&&!(ye(Te.toLowerCase(),"webkit")&&!Ce("Edge"))&&!(Ce("Trident")||Ce("MSIE"))&&!Ce("Edge"),_t=ye(Te.toLowerCase(),"webkit")&&!Ce("Edge");function Tt(){var e=u.document;return e?e.documentMode:void 0}e:{var At="",kt=(bt=Te,Et?/rv:([^\);]+)(\)|;)/.exec(bt):It?/Edge\/([\d\.]+)/.exec(bt):wt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(bt):_t?/WebKit\/(\S+)/.exec(bt):yt?/(?:Version)[ \/]?(\S+)/.exec(bt):void 0);if(kt&&(At=kt?kt[1]:""),wt){var Nt=Tt();if(null!=Nt&&Nt>parseFloat(At)){gt=String(Nt);break e}}gt=At}var Ot,Ct={};function Lt(e){return function(e,t){var n=Ct;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t()}(e,(function(){for(var t=0,n=le(String(gt)).split("."),r=le(String(e)).split("."),i=Math.max(n.length,r.length),o=0;0==t&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=we(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||we(0==a[2].length,0==s[2].length)||we(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t}))}Ot=u.document&&wt?Tt():void 0;var Pt=Object.freeze||function(e){return e},Dt=!wt||9<=Number(Ot),Rt=wt&&!Lt("9"),xt=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{u.addEventListener("test",d,t),u.removeEventListener("test",d,t)}catch(e){}return e}();function Ft(e,t){this.type=e,this.b=this.target=t,this.Mb=!0}function Mt(e,t){if(Ft.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if(Et){e:{try{mt(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType=c(e.pointerType)?e.pointerType:jt[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.preventDefault()}}Ft.prototype.preventDefault=function(){this.Mb=!1},k(Mt,Ft);var jt=Pt({2:"touch",3:"pen",4:"mouse"});Mt.prototype.preventDefault=function(){Mt.qb.preventDefault.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,Rt)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},Mt.prototype.f=function(){return this.a};var Ut="closure_listenable_"+(1e6*Math.random()|0),Vt=0;function Bt(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.Pa=i,this.key=++Vt,this.ta=this.Ka=!1}function qt(e){e.ta=!0,e.listener=null,e.proxy=null,e.src=null,e.Pa=null}function Ht(e){this.src=e,this.a={},this.b=0}function Jt(e,t){var n=t.type;n in e.a&&J(e.a[n],t)&&(qt(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function Wt(e,t,n,r){for(var i=0;i<e.length;++i){var o=e[i];if(!o.ta&&o.listener==t&&o.capture==!!n&&o.Pa==r)return i}return-1}Ht.prototype.add=function(e,t,n,r,i){var o=e.toString();(e=this.a[o])||(e=this.a[o]=[],this.b++);var a=Wt(e,t,r,i);return-1<a?(t=e[a],n||(t.Ka=!1)):((t=new Bt(t,this.src,o,!!r,i)).Ka=n,e.push(t)),t};var Kt="closure_lm_"+(1e6*Math.random()|0),Gt={};function Xt(e,t,n,r,i){if(r&&r.once)Yt(e,t,n,r,i);else if(m(t))for(var o=0;o<t.length;o++)Xt(e,t[o],n,r,i);else n=an(n),e&&e[Ut]?un(e,t,n,y(r)?!!r.capture:!!r,i):zt(e,t,n,!1,r,i)}function zt(e,t,n,r,i,o){if(!t)throw Error("Invalid event type");var a=y(i)?!!i.capture:!!i,s=rn(e);if(s||(e[Kt]=s=new Ht(e)),!(n=s.add(t,n,r,a,o)).proxy)if(r=function(){var e=nn,t=Dt?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)xt||(i=a),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(Qt(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}}function Yt(e,t,n,r,i){if(m(t))for(var o=0;o<t.length;o++)Yt(e,t[o],n,r,i);else n=an(n),e&&e[Ut]?cn(e,t,n,y(r)?!!r.capture:!!r,i):zt(e,t,n,!0,r,i)}function $t(e,t,n,r,i){if(m(t))for(var o=0;o<t.length;o++)$t(e,t[o],n,r,i);else r=y(r)?!!r.capture:!!r,n=an(n),e&&e[Ut]?(e=e.u,(t=String(t).toString())in e.a&&-1<(n=Wt(o=e.a[t],n,r,i))&&(qt(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete e.a[t],e.b--))):e&&(e=rn(e))&&(t=e.a[t.toString()],e=-1,t&&(e=Wt(t,n,r,i)),(n=-1<e?t[e]:null)&&Zt(n))}function Zt(e){if("number"!=typeof e&&e&&!e.ta){var t=e.src;if(t&&t[Ut])Jt(t.u,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(Qt(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=rn(t))?(Jt(n,e),0==n.b&&(n.src=null,t[Kt]=null)):qt(e)}}}function Qt(e){return e in Gt?Gt[e]:Gt[e]="on"+e}function en(e,t,n,r){var i=!0;if((e=rn(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var o=t[e];o&&o.capture==n&&!o.ta&&(o=tn(o,r),i=i&&!1!==o)}return i}function tn(e,t){var n=e.listener,r=e.Pa||e.src;return e.Ka&&Zt(e),n.call(r,t)}function nn(e,t){if(e.ta)return!0;if(!Dt){if(!t)e:{t=["window","event"];for(var n=u,r=0;r<t.length;r++)if(null==(n=n[t[r]])){t=null;break e}t=n}if(t=new Mt(r=t,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){e:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break e}catch(e){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=t.b;i;i=i.parentNode)r.push(i);for(e=e.type,i=r.length-1;0<=i;i--){t.b=r[i];var o=en(r[i],e,!0,t);n=n&&o}for(i=0;i<r.length;i++)t.b=r[i],o=en(r[i],e,!1,t),n=n&&o}return n}return tn(e,new Mt(t,this))}function rn(e){return(e=e[Kt])instanceof Ht?e:null}var on="__closure_events_fn_"+(1e9*Math.random()>>>0);function an(e){return b(e)?e:(e[on]||(e[on]=function(t){return e.handleEvent(t)}),e[on])}function sn(){ft.call(this),this.u=new Ht(this),this.Sb=this,this.Xa=null}function un(e,t,n,r,i){e.u.add(String(t),n,!1,r,i)}function cn(e,t,n,r,i){e.u.add(String(t),n,!0,r,i)}function hn(e,t,n,r){if(!(t=e.u.a[String(t)]))return!0;t=t.concat();for(var i=!0,o=0;o<t.length;++o){var a=t[o];if(a&&!a.ta&&a.capture==n){var s=a.listener,u=a.Pa||a.src;a.Ka&&Jt(e.u,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.Mb}function ln(e,t,n){if(b(e))n&&(e=_(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=_(e.handleEvent,e)}return 2147483647<Number(t)?-1:u.setTimeout(e,t||0)}function fn(e){var t=null;return new We((function(n,r){-1==(t=ln((function(){n(void 0)}),e))&&r(Error("Failed to schedule timer."))})).s((function(e){throw u.clearTimeout(t),e}))}function dn(e){if(e.U&&"function"==typeof e.U)return e.U();if(c(e))return e.split("");if(g(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function pn(e){if(e.X&&"function"==typeof e.X)return e.X();if(!e.U||"function"!=typeof e.U){if(g(e)||c(e)){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function vn(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof vn)for(n=e.X(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function mn(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];gn(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var i={};for(n=t=0;t<e.a.length;)gn(i,r=e.a[t])||(e.a[n++]=r,i[r]=1),t++;e.a.length=n}}function gn(e,t){return Object.prototype.hasOwnProperty.call(e,t)}k(sn,ft),sn.prototype[Ut]=!0,sn.prototype.addEventListener=function(e,t,n,r){Xt(this,e,t,n,r)},sn.prototype.removeEventListener=function(e,t,n,r){$t(this,e,t,n,r)},sn.prototype.dispatchEvent=function(e){var t,n=this.Xa;if(n)for(t=[];n;n=n.Xa)t.push(n);n=this.Sb;var r=e.type||e;if(c(e))e=new Ft(e,n);else if(e instanceof Ft)e.target=e.target||n;else{var i=e;Z(e=new Ft(r,n),i)}if(i=!0,t)for(var o=t.length-1;0<=o;o--){var a=e.b=t[o];i=hn(a,r,!0,e)&&i}if(i=hn(a=e.b=n,r,!0,e)&&i,i=hn(a,r,!1,e)&&i,t)for(o=0;o<t.length;o++)i=hn(a=e.b=t[o],r,!1,e)&&i;return i},sn.prototype.za=function(){if(sn.qb.za.call(this),this.u){var e,t=this.u;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)qt(n[r]);delete t.a[e],t.b--}}this.Xa=null},(t=vn.prototype).U=function(){mn(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},t.X=function(){return mn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(e,t){return gn(this.b,e)?this.b[e]:t},t.set=function(e,t){gn(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},t.forEach=function(e,t){for(var n=this.X(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);e.call(t,o,i,this)}};var bn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function yn(e,t){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,e instanceof yn?(this.h=void 0!==t?t:e.h,wn(this,e.f),this.i=e.i,this.b=e.b,In(this,e.l),this.c=e.c,Sn(this,Bn(e.a)),this.g=e.g):e&&(n=String(e).match(bn))?(this.h=!!t,wn(this,n[1]||"",!0),this.i=kn(n[2]||""),this.b=kn(n[3]||"",!0),In(this,n[4]),this.c=kn(n[5]||"",!0),Sn(this,n[6]||"",!0),this.g=kn(n[7]||"")):(this.h=!!t,this.a=new xn(null,this.h))}function wn(e,t,n){e.f=n?kn(t,!0):t,e.f&&(e.f=e.f.replace(/:$/,""))}function In(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.l=t}else e.l=null}function Sn(e,t,n){t instanceof xn?(e.a=t,function(e,t){t&&!e.f&&(Fn(e),e.c=null,e.a.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(jn(this,t),Vn(this,n,e))}),e)),e.f=t}(e.a,e.h)):(n||(t=Nn(t,Dn)),e.a=new xn(t,e.h))}function En(e,t,n){e.a.set(t,n)}function _n(e,t){return e.a.get(t)}function Tn(e){return e instanceof yn?new yn(e):new yn(e,void 0)}function An(e,t){var n=new yn(null,void 0);return wn(n,"https"),e&&(n.b=e),t&&(n.c=t),n}function kn(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Nn(e,t,n){return c(e)?(e=encodeURI(e).replace(t,On),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function On(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}yn.prototype.toString=function(){var e=[],t=this.f;t&&e.push(Nn(t,Cn,!0),":");var n=this.b;return(n||"file"==t)&&(e.push("//"),(t=this.i)&&e.push(Nn(t,Cn,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&e.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&e.push("/"),e.push(Nn(n,"/"==n.charAt(0)?Pn:Ln,!0))),(n=this.a.toString())&&e.push("?",n),(n=this.g)&&e.push("#",Nn(n,Rn)),e.join("")},yn.prototype.resolve=function(e){var t=new yn(this),n=!!e.f;n?wn(t,e.f):n=!!e.i,n?t.i=e.i:n=!!e.b,n?t.b=e.b:n=null!=e.l;var r=e.c;if(n)In(t,e.l);else if(n=!!e.c){if("/"!=r.charAt(0))if(this.b&&!this.c)r="/"+r;else{var i=t.c.lastIndexOf("/");-1!=i&&(r=t.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ye(i,"./")||ye(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?t.c=r:n=""!==e.a.toString(),n?Sn(t,Bn(e.a)):n=!!e.g,n&&(t.g=e.g),t};var Cn=/[#\/\?@]/g,Ln=/[#\?:]/g,Pn=/[#\?]/g,Dn=/[#\?@]/g,Rn=/#/g;function xn(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function Fn(e){e.a||(e.a=new vn,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var o=e[n].substring(0,r);i=e[n].substring(r+1)}else o=e[n];t(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.c,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function Mn(e){var t=pn(e);if(void 0===t)throw Error("Keys are undefined");var n=new xn(null,void 0);e=dn(e);for(var r=0;r<t.length;r++){var i=t[r],o=e[r];m(o)?Vn(n,i,o):n.add(i,o)}return n}function jn(e,t){Fn(e),t=qn(e,t),gn(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,gn((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&mn(e)))}function Un(e,t){return Fn(e),t=qn(e,t),gn(e.a.b,t)}function Vn(e,t,n){jn(e,t),0<n.length&&(e.c=null,e.a.set(qn(e,t),G(n)),e.b+=n.length)}function Bn(e){var t=new xn;return t.c=e.c,e.a&&(t.a=new vn(e.a),t.b=e.b),t}function qn(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}(t=xn.prototype).add=function(e,t){Fn(this),this.c=null,e=qn(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(e,t){Fn(this),this.a.forEach((function(n,r){V(n,(function(n){e.call(t,n,r,this)}),this)}),this)},t.X=function(){Fn(this);for(var e=this.a.U(),t=this.a.X(),n=[],r=0;r<t.length;r++)for(var i=e[r],o=0;o<i.length;o++)n.push(t[r]);return n},t.U=function(e){Fn(this);var t=[];if(c(e))Un(this,e)&&(t=K(t,this.a.get(qn(this,e))));else{e=this.a.U();for(var n=0;n<e.length;n++)t=K(t,e[n])}return t},t.set=function(e,t){return Fn(this),this.c=null,Un(this,e=qn(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},t.get=function(e,t){return e&&0<(e=this.U(e)).length?String(e[0]):t},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.X(),n=0;n<t.length;n++){var r=t[n],i=encodeURIComponent(String(r));r=this.U(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),e.push(a)}}return this.c=e.join("&")};var Hn=!wt||9<=Number(Ot);function Jn(e){var t=document;return c(e)?t.getElementById(e):e}function Wn(e,t){X(t,(function(t,n){t&&"object"==typeof t&&t.qa&&(t=t.pa()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:Kn.hasOwnProperty(n)?e.setAttribute(Kn[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t}))}var Kn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Gn(e,t,n){function r(n){n&&t.appendChild(c(n)?e.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];!g(o)||y(o)&&0<o.nodeType?r(o):V(Xn(o)?G(o):o,r)}}function Xn(e){if(e&&"number"==typeof e.length){if(y(e))return"function"==typeof e.item||"string"==typeof e.item;if(b(e))return"function"==typeof e.item}return!1}function zn(e){var t=[];return function e(t,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(m(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),e(t,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&"function"!=typeof(a=n[i])&&(r.push(o),Qn(i,r),r.push(":"),e(t,a,r),o=",");return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Qn(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new Yn,e,t),t.join("")}function Yn(){}var $n={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Zn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Qn(e,t){t.push('"',e.replace(Zn,(function(e){var t=$n[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),$n[e]=t),t})),'"')}function er(){var e=br();return wt&&!!Ot&&11==Ot||/Edge\/\d+/.test(e)}function tr(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function nr(e,t){t=t||u.window;var n="about:blank";e&&(n=Se(_e(e)).toString()),t.location.href=n}function rr(e){return!!((e=(e||br()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function ir(e){e=e||u.window;try{e.close()}catch(e){}}function or(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=br().toLowerCase(),r&&(t.target=r,ye(n,"crios/")&&(t.target="_blank")),vr(br())==pr&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof Ie?n:_e(void 0!==n.href?n.href:String(n)),n=e.target||n.target,i=[],e)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(e[a]?1:0))}var a=i.join(",");if((Ce("iPhone")&&!Ce("iPod")&&!Ce("iPad")||Ce("iPad")||Ce("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(j(a=r.document.createElement("A"),"HTMLAnchorElement"),t instanceof Ie||t instanceof Ie||(t="object"==typeof t&&t.qa?t.pa():String(t),Ee.test(t)||(t="about:invalid#zClosurez"),t=ke(t)),a.href=Se(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=r.open("",n,a),e=Se(t).toString(),a&&(St&&ye(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,e=Re('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ue(e)+'">'),a.document.write(Pe(e)),a.document.close())):(a=r.open(Se(t).toString(),n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var ar=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,sr=/^[^@]+@[^@]+$/;function ur(){var e=null;return new We((function(t){"complete"==u.document.readyState?t():(e=function(){t()},Yt(window,"load",e))})).s((function(t){throw $t(window,"load",e),t}))}function cr(e){return e=e||br(),!("file:"!==Er()&&"ionic:"!==Er()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function hr(){var e=u.window;try{return!(!e||e==e.top)}catch(e){return!1}}function lr(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function fr(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":lr()?"Worker":"Browser"}function dr(){var e=fr();return"ReactNative"===e||"Node"===e}var pr="Firefox";function vr(e){var t=e.toLowerCase();return ye(t,"opera/")||ye(t,"opr/")||ye(t,"opios/")?"Opera":ye(t,"iemobile")?"IEMobile":ye(t,"msie")||ye(t,"trident/")?"IE":ye(t,"edge/")?"Edge":ye(t,"firefox/")?pr:ye(t,"silk/")?"Silk":ye(t,"blackberry")?"Blackberry":ye(t,"webos")?"Webos":!ye(t,"safari/")||ye(t,"chrome/")||ye(t,"crios/")||ye(t,"android")?!ye(t,"chrome/")&&!ye(t,"crios/")||ye(t,"edge/")?ye(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":"Chrome":"Safari"}var mr={Wc:"FirebaseCore-web",Yc:"FirebaseUI-web"};function gr(e,t){t=t||[];var n,r=[],i={};for(n in mr)i[mr[n]]=!0;for(n=0;n<t.length;n++)void 0!==i[t[n]]&&(delete i[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=fr())?r=vr(i=br()):"Worker"===r&&(r=vr(i=br())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function br(){return u.navigator&&u.navigator.userAgent||""}function yr(e,t){e=e.split("."),t=t||u;for(var n=0;n<e.length&&"object"==typeof t&&null!=t;n++)t=t[e[n]];return n!=e.length&&(t=void 0),t}function wr(){try{var e=u.localStorage,t=Nr();if(e)return e.setItem(t,"1"),e.removeItem(t),!er()||!!u.indexedDB}catch(e){return lr()&&!!u.indexedDB}return!1}function Ir(){return(Sr()||"chrome-extension:"===Er()||cr())&&!dr()&&wr()&&!lr()}function Sr(){return"http:"===Er()||"https:"===Er()}function Er(){return u.location&&u.location.protocol||null}function _r(e){return!rr(e=e||br())&&vr(e)!=pr}function Tr(e){return void 0===e?null:zn(e)}function Ar(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function kr(e){if(null!==e)return JSON.parse(e)}function Nr(e){return e||Math.floor(1e9*Math.random()).toString()}function Or(e){return"Safari"!=vr(e=e||br())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function Cr(){var e=u.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var n=0;n<e.CP.length;n++)e.CP[n]=null}function Lr(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.a=e,this.c=t,e=br(),t=fr(),this.b=rr(e)||"ReactNative"===t}function Pr(){var e=u.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function Dr(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Rr(){return!(!yr("fireauth.oauthhelper",u)&&!yr("fireauth.iframe",u))}Lr.prototype.get=function(){var e=u.navigator;return!e||"boolean"!=typeof e.onLine||!Sr()&&"chrome-extension:"!==Er()&&void 0===e.connection||e.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var xr,Fr={};function Mr(e){Fr[e]||(Fr[e]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e))}try{var jr={};Object.defineProperty(jr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(jr,"abcd",{configurable:!0,enumerable:!0,value:2}),xr=2==jr.abcd}catch(bt){xr=!1}function Ur(e,t,n){xr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function Vr(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&Ur(e,n,t[n])}function Br(e){var t={};return Vr(t,e),t}function qr(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)Ur(t,n,qr(e[n]));return t}function Hr(e){var t={},n=e[Wr],r=e[Kr];if(!(e=e[Gr])||e!=Jr&&!n)throw Error("Invalid provider user info!");t[zr]=r||null,t[Xr]=n||null,Ur(this,$r,e),Ur(this,Yr,qr(t))}var Jr="EMAIL_SIGNIN",Wr="email",Kr="newEmail",Gr="requestType",Xr="email",zr="fromEmail",Yr="data",$r="operation";function Zr(e,t){this.code=ei+e,this.message=t||ti[e]||""}function Qr(e){var t=e&&e.code;return t?new Zr(t.substring(ei.length),e.message):null}k(Zr,Error),Zr.prototype.A=function(){return{code:this.code,message:this.message}},Zr.prototype.toJSON=function(){return this.A()};var ei="auth/",ti={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function ni(e){var t=_n(e=Tn(e),ri)||null,n=_n(e,ii)||null,r=_n(e,si)||null;if(r=r&&ci[r]||null,!t||!n||!r)throw new Zr("argument-error",ri+", "+ii+"and "+si+" are required in a valid action code URL.");Vr(this,{apiKey:t,operation:r,code:n,continueUrl:_n(e,oi)||null,languageCode:_n(e,ai)||null,tenantId:_n(e,ui)||null})}var ri="apiKey",ii="oobCode",oi="continueUrl",ai="languageCode",si="mode",ui="tenantId",ci={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",signIn:Jr,verifyEmail:"VERIFY_EMAIL"};function hi(e){try{return new ni(e)}catch(e){return null}}function li(e){var t=e[mi];if(void 0===t)throw new Zr("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new Zr("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[fi];if(n&&"object"==typeof n){t=n[yi];var r=n[gi];if(n=n[bi],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new Zr("argument-error",gi+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Zr("argument-error",bi+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new Zr("argument-error",yi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new Zr("missing-android-pkg-name")}}else if(void 0!==n)throw new Zr("argument-error",fi+" property must be a non null object when specified.");if(this.f=null,(t=e[vi])&&"object"==typeof t){if("string"==typeof(t=t[wi])&&t.length)this.f=t;else if(void 0!==t)throw new Zr("argument-error",wi+" property must be a non empty string when specified.")}else if(void 0!==t)throw new Zr("argument-error",vi+" property must be a non null object when specified.");if(void 0!==(t=e[pi])&&"boolean"!=typeof t)throw new Zr("argument-error",pi+" property must be a boolean when specified.");if(this.c=!!t,void 0!==(e=e[di])&&("string"!=typeof e||"string"==typeof e&&!e.length))throw new Zr("argument-error",di+" property must be a non empty string when specified.");this.i=e||null}var fi="android",di="dynamicLinkDomain",pi="handleCodeInApp",vi="iOS",mi="url",gi="installApp",bi="minimumVersion",yi="packageName",wi="bundleId";function Ii(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t.dynamicLinkDomain=e.i,t)null===t[n]&&delete t[n];return t}var Si=null,Ei=null;function _i(e){this.f=e.sub,A(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.c=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Ti(e){return(e=Ai(e))&&e.sub&&e.iss&&e.aud&&e.exp?new _i(e):null}function Ai(e){if(!e)return null;if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{return JSON.parse(function(e){var t="";return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),i=Ei[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!Si){Si={},Ei={};for(var e=0;65>e;e++)Si[e]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e),Ei[Si[e]]=e,62<=e&&(Ei["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(e)]=e)}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;t(i<<2|o>>4),64!=a&&(t(o<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,(function(e){t+=String.fromCharCode(e)})),t}(e))}catch(e){}return null}_i.prototype.R=function(){return this.c},_i.prototype.g=function(){return this.b};var ki,Ni={bd:{cb:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://securetoken.googleapis.com/v1/token",id:"p"},dd:{cb:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},ed:{cb:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ib:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Oi(e){for(var t in Ni)if(Ni[t].id===e)return{firebaseEndpoint:(e=Ni[t]).cb,secureTokenEndpoint:e.ib};return null}ki=Oi("__EID__")?"__EID__":void 0;var Ci="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Li=["client_id","response_type","scope","redirect_uri","state"],Pi={Xc:{Ea:"locale",sa:700,ra:600,Fa:"facebook.com",Qa:Li},Zc:{Ea:null,sa:500,ra:750,Fa:"github.com",Qa:Li},$c:{Ea:"hl",sa:515,ra:680,Fa:"google.com",Qa:Li},fd:{Ea:"lang",sa:485,ra:705,Fa:"twitter.com",Qa:Ci},Vc:{Ea:"locale",sa:600,ra:600,Fa:"apple.com",Qa:[]}};function Di(e){for(var t in Pi)if(Pi[t].Fa==e)return Pi[t];return null}function Ri(e){var t={};t["facebook.com"]=Ui,t["google.com"]=Bi,t["github.com"]=Vi,t["twitter.com"]=qi;var n=e&&e[Fi];try{if(n)return t[n]?new t[n](e):new ji(e);if(void 0!==e[xi])return new Mi(e)}catch(e){}return null}var xi="idToken",Fi="providerId";function Mi(e){var t=e[Fi];if(!t&&e[xi]){var n=Ti(e[xi]);n&&n.a&&(t=n.a)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),Ur(this,"providerId",t),Ur(this,"isNewUser",n)}function ji(e){Mi.call(this,e),Ur(this,"profile",qr((e=kr(e.rawUserInfo||"{}"))||{}))}function Ui(e){if(ji.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Vi(e){if(ji.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Ur(this,"username",this.profile&&this.profile.login||null)}function Bi(e){if(ji.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function qi(e){if(ji.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Ur(this,"username",e.screenName||null)}function Hi(e){var t=Tn(e),n=_n(t,"link"),r=_n(Tn(n),"link");return t=_n(t,"deep_link_id"),_n(Tn(t),"link")||t||r||n||e}function Ji(){}function Wi(e,t){return e.then((function(e){if(e[Pa]){var n=Ti(e[Pa]);if(!n||t!=n.f)throw new Zr("user-mismatch");return e}throw new Zr("user-mismatch")})).s((function(e){throw e&&e.code&&e.code==ei+"user-not-found"?new Zr("user-mismatch"):e}))}function Ki(e,t){if(!t)throw new Zr("internal-error","failed to construct a credential");this.a=t,Ur(this,"providerId",e),Ur(this,"signInMethod",e)}function Gi(e){return{pendingToken:e.a,requestUri:"http://localhost"}}function Xi(e){if(e&&e.providerId&&e.signInMethod&&0==e.providerId.indexOf("saml.")&&e.pendingToken)try{return new Ki(e.providerId,e.pendingToken)}catch(e){}return null}function zi(e,t,n){if(this.a=null,t.idToken||t.accessToken)t.idToken&&Ur(this,"idToken",t.idToken),t.accessToken&&Ur(this,"accessToken",t.accessToken),t.nonce&&!t.pendingToken&&Ur(this,"nonce",t.nonce),t.pendingToken&&(this.a=t.pendingToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new Zr("internal-error","failed to construct a credential");Ur(this,"accessToken",t.oauthToken),Ur(this,"secret",t.oauthTokenSecret)}Ur(this,"providerId",e),Ur(this,"signInMethod",n)}function Yi(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,e.nonce&&!e.a&&(t.nonce=e.nonce),t={postBody:Mn(t).toString(),requestUri:"http://localhost"},e.a&&(delete t.postBody,t.pendingToken=e.a),t}function $i(e){if(e&&e.providerId&&e.signInMethod){var t={idToken:e.oauthIdToken,accessToken:e.oauthTokenSecret?null:e.oauthAccessToken,oauthTokenSecret:e.oauthTokenSecret,oauthToken:e.oauthTokenSecret&&e.oauthAccessToken,nonce:e.nonce,pendingToken:e.pendingToken};try{return new zi(e.providerId,t,e.signInMethod)}catch(e){}}return null}function Zi(e,t){this.Fc=t||[],Vr(this,{providerId:e,isOAuthProvider:!0}),this.zb={},this.eb=(Di(e)||{}).Ea||null,this.bb=null}function Qi(e){if("string"!=typeof e||0!=e.indexOf("saml."))throw new Zr("argument-error",'SAML provider IDs must be prefixed with "saml."');Zi.call(this,e,[])}function eo(e){Zi.call(this,e,Li),this.a=[]}function to(){eo.call(this,"facebook.com")}function no(e){if(!e)throw new Zr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return y(e)&&(t=e.accessToken),(new to).credential({accessToken:t})}function ro(){eo.call(this,"github.com")}function io(e){if(!e)throw new Zr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return y(e)&&(t=e.accessToken),(new ro).credential({accessToken:t})}function oo(){eo.call(this,"google.com"),this.ya("profile")}function ao(e,t){var n=e;return y(e)&&(n=e.idToken,t=e.accessToken),(new oo).credential({idToken:n,accessToken:t})}function so(){Zi.call(this,"twitter.com",Ci)}function uo(e,t){var n=e;if(y(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new Zr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new zi("twitter.com",n,"twitter.com")}function co(e,t,n){this.a=e,this.c=t,Ur(this,"providerId","password"),Ur(this,"signInMethod",n===lo.EMAIL_LINK_SIGN_IN_METHOD?lo.EMAIL_LINK_SIGN_IN_METHOD:lo.EMAIL_PASSWORD_SIGN_IN_METHOD)}function ho(e){return e&&e.email&&e.password?new co(e.email,e.password,e.signInMethod):null}function lo(){Vr(this,{providerId:"password",isOAuthProvider:!1})}function fo(e,t){if(!(t=po(t)))throw new Zr("argument-error","Invalid email link!");return new co(e,t.code,lo.EMAIL_LINK_SIGN_IN_METHOD)}function po(e){return(e=hi(e=Hi(e)))&&e.operation===Jr?e:null}function vo(e){if(!(e.Va&&e.Ua||e.Ha&&e.ba))throw new Zr("internal-error");this.a=e,Ur(this,"providerId","phone"),Ur(this,"signInMethod","phone")}function mo(e){if(e&&"phone"===e.providerId&&(e.verificationId&&e.verificationCode||e.temporaryProof&&e.phoneNumber)){var t={};return V(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){e[n]&&(t[n]=e[n])})),new vo(t)}return null}function go(e){return e.a.Ha&&e.a.ba?{temporaryProof:e.a.Ha,phoneNumber:e.a.ba}:{sessionInfo:e.a.Va,code:e.a.Ua}}function bo(e){try{this.a=e||r.a.auth()}catch(e){throw new Zr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Vr(this,{providerId:"phone",isOAuthProvider:!1})}function yo(e,t){if(!e)throw new Zr("missing-verification-id");if(!t)throw new Zr("missing-verification-code");return new vo({Va:e,Ua:t})}function wo(e){if(e.temporaryProof&&e.phoneNumber)return new vo({Ha:e.temporaryProof,ba:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret,i=e&&e.nonce,o=e&&e.oauthIdToken,a=e&&e.pendingToken;try{switch(t){case"google.com":return ao(o,n);case"facebook.com":return no(n);case"github.com":return io(n);case"twitter.com":return uo(n,r);default:return n||r||o||a?a?0==t.indexOf("saml.")?new Ki(t,a):new zi(t,{pendingToken:a,idToken:e.oauthIdToken,accessToken:e.oauthAccessToken},t):new eo(t).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(e){return null}}function Io(e){if(!e.isOAuthProvider)throw new Zr("invalid-oauth-provider")}function So(e,t,n,r,i,o,a){if(this.c=e,this.b=t||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new Zr("invalid-auth-event");if(this.g&&this.a)throw new Zr("invalid-auth-event");if(this.g&&!this.f)throw new Zr("invalid-auth-event")}function Eo(e){return(e=e||{}).type?new So(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&Qr(e.error),e.postBody,e.tenantId):null}function _o(){this.b=null,this.a=[]}k(ji,Mi),k(Ui,ji),k(Vi,ji),k(Bi,ji),k(qi,ji),Ki.prototype.na=function(e){return Ya(e,Gi(this))},Ki.prototype.b=function(e,t){var n=Gi(this);return n.idToken=t,$a(e,n)},Ki.prototype.f=function(e,t){return Wi(Za(e,Gi(this)),t)},Ki.prototype.A=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},zi.prototype.na=function(e){return Ya(e,Yi(this))},zi.prototype.b=function(e,t){var n=Yi(this);return n.idToken=t,$a(e,n)},zi.prototype.f=function(e,t){return Wi(Za(e,Yi(this)),t)},zi.prototype.A=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),this.nonce&&(e.nonce=this.nonce),this.a&&(e.pendingToken=this.a),e},Zi.prototype.Ga=function(e){return this.zb=Y(e),this},k(Qi,Zi),k(eo,Zi),eo.prototype.ya=function(e){return H(this.a,e)||this.a.push(e),this},eo.prototype.Hb=function(){return G(this.a)},eo.prototype.credential=function(e,t){var n;if(!(n=y(e)?{idToken:e.idToken||null,accessToken:e.accessToken||null,nonce:e.rawNonce||null}:{idToken:e||null,accessToken:t||null}).idToken&&!n.accessToken)throw new Zr("argument-error","credential failed: must provide the ID token and/or the access token.");return new zi(this.providerId,n,this.providerId)},k(to,eo),Ur(to,"PROVIDER_ID","facebook.com"),Ur(to,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),k(ro,eo),Ur(ro,"PROVIDER_ID","github.com"),Ur(ro,"GITHUB_SIGN_IN_METHOD","github.com"),k(oo,eo),Ur(oo,"PROVIDER_ID","google.com"),Ur(oo,"GOOGLE_SIGN_IN_METHOD","google.com"),k(so,Zi),Ur(so,"PROVIDER_ID","twitter.com"),Ur(so,"TWITTER_SIGN_IN_METHOD","twitter.com"),co.prototype.na=function(e){return this.signInMethod==lo.EMAIL_LINK_SIGN_IN_METHOD?ks(e,as,{email:this.a,oobCode:this.c}):ks(e,Es,{email:this.a,password:this.c})},co.prototype.b=function(e,t){return this.signInMethod==lo.EMAIL_LINK_SIGN_IN_METHOD?ks(e,ss,{idToken:t,email:this.a,oobCode:this.c}):ks(e,gs,{idToken:t,email:this.a,password:this.c})},co.prototype.f=function(e,t){return Wi(this.na(e),t)},co.prototype.A=function(){return{email:this.a,password:this.c,signInMethod:this.signInMethod}},Vr(lo,{PROVIDER_ID:"password"}),Vr(lo,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Vr(lo,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),vo.prototype.na=function(e){return e.Wa(go(this))},vo.prototype.b=function(e,t){var n=go(this);return n.idToken=t,ks(e,Ts,n)},vo.prototype.f=function(e,t){var n=go(this);return n.operation="REAUTH",Wi(e=ks(e,As,n),t)},vo.prototype.A=function(){var e={providerId:"phone"};return this.a.Va&&(e.verificationId=this.a.Va),this.a.Ua&&(e.verificationCode=this.a.Ua),this.a.Ha&&(e.temporaryProof=this.a.Ha),this.a.ba&&(e.phoneNumber=this.a.ba),e},bo.prototype.Wa=function(e,t){var n=this.a.b;return Ze(t.verify()).then((function(r){if(!c(r))throw new Zr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":return function(e,t){return ks(e,vs,t)}(n,{phoneNumber:e,recaptchaToken:r}).then((function(e){return"function"==typeof t.reset&&t.reset(),e}),(function(e){throw"function"==typeof t.reset&&t.reset(),e}));default:throw new Zr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Vr(bo,{PROVIDER_ID:"phone"}),Vr(bo,{PHONE_SIGN_IN_METHOD:"phone"}),So.prototype.getUid=function(){var e=[];return e.push(this.c),this.b&&e.push(this.b),this.f&&e.push(this.f),this.h&&e.push(this.h),e.join("-")},So.prototype.R=function(){return this.h},So.prototype.A=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.A()}};var To,Ao=null;function ko(e){var t="unauthorized-domain",n=void 0,r=Tn(e);e=r.b,"chrome-extension"==(r=r.f)?n=je("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=je("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",Zr.call(this,t,n)}function No(e,t,n){Zr.call(this,e,n),(e=t||{}).Ab&&Ur(this,"email",e.Ab),e.ba&&Ur(this,"phoneNumber",e.ba),e.credential&&Ur(this,"credential",e.credential),e.Qb&&Ur(this,"tenantId",e.Qb)}function Oo(e){if(e.code){var t=e.code||"";0==t.indexOf(ei)&&(t=t.substring(ei.length));var n={credential:wo(e),Qb:e.tenantId};if(e.email)n.Ab=e.email;else if(e.phoneNumber)n.ba=e.phoneNumber;else if(!n.credential)return new Zr(t,e.message||void 0);return new No(t,n,e.message)}return null}function Co(){}function Lo(e){return e.c||(e.c=e.b())}function Po(){}function Do(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function Ro(){}function xo(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=_(this.fc,this),this.a.onerror=_(this.Ib,this),this.a.onprogress=_(this.gc,this),this.a.ontimeout=_(this.kc,this)}function Fo(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function Mo(e,t,n){this.reset(e,t,n,void 0,void 0)}function jo(e){this.f=e,this.b=this.c=this.a=null}function Uo(e,t){this.name=e,this.value=t}k(ko,Zr),k(No,Zr),No.prototype.A=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber),this.tenantId&&(e.tenantId=this.tenantId);var t=this.credential&&this.credential.A();return t&&Z(e,t),e},No.prototype.toJSON=function(){return this.A()},Co.prototype.c=null,k(Po,Co),Po.prototype.a=function(){var e=Do(this);return e?new ActiveXObject(e):new XMLHttpRequest},Po.prototype.b=function(){var e={};return Do(this)&&(e[0]=!0,e[1]=!0),e},To=new Po,k(Ro,Co),Ro.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new xo;throw Error("Unsupported browser")},Ro.prototype.b=function(){return{}},(t=xo.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},t.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},t.fc=function(){this.status=200,this.response=this.responseText=this.a.responseText,Fo(this,4)},t.Ib=function(){this.status=500,this.response=this.responseText="",Fo(this,4)},t.kc=function(){this.Ib()},t.gc=function(){this.status=200,Fo(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Mo.prototype.a=null,Mo.prototype.reset=function(e,t,n,r,i){r||A(),delete this.a},Uo.prototype.toString=function(){return this.name};var Vo=new Uo("SEVERE",1e3),Bo=new Uo("WARNING",900),qo=new Uo("CONFIG",700),Ho=new Uo("FINE",500);jo.prototype.log=function(e,t,n){if(e.value>=function e(t){return t.c?t.c:t.a?e(t.a):(L("Root logger has no level set."),null)}(this).value)for(b(t)&&(t=t()),e=new Mo(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var Jo={},Wo=null;function Ko(e){var t;if(Wo||(Wo=new jo(""),Jo[""]=Wo,Wo.c=qo),!(t=Jo[e])){t=new jo(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=Ko(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,Jo[e]=t}return t}function Go(e,t){e&&e.log(Ho,t,void 0)}function Xo(e){this.f=e}function zo(e){sn.call(this),this.o=e,this.readyState=Yo,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=Ko("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}k(Xo,Co),Xo.prototype.a=function(){return new zo(this.f)},Xo.prototype.b=function(e){return function(){return e}}({}),k(zo,sn);var Yo=0;function $o(e){e.c.read().then(e.ec.bind(e)).catch(e.Oa.bind(e))}function Zo(e,t){t&&e.f&&(e.status=e.f.status,e.statusText=e.f.statusText),e.readyState=4,e.f=null,e.c=null,e.l=null,Qo(e)}function Qo(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function ea(e){sn.call(this),this.headers=new vn,this.B=e||null,this.c=!1,this.w=this.a=null,this.h=this.O=this.l="",this.f=this.J=this.i=this.I=!1,this.g=0,this.o=null,this.m=ta,this.v=this.P=!1}(t=zo.prototype).open=function(e,t){if(this.readyState!=Yo)throw this.abort(),Error("Error reopening a connection");this.m=e,this.g=t,this.readyState=1,Qo(this)},t.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.i,method:this.m,credentials:void 0,cache:void 0};e&&(t.body=e),this.o.fetch(new Request(this.g,t)).then(this.jc.bind(this),this.Oa.bind(this))},t.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Zo(this,!1)),this.readyState=Yo},t.jc=function(e){this.a&&(this.f=e,this.b||(this.b=e.headers,this.readyState=2,Qo(this)),this.a&&(this.readyState=3,Qo(this),this.a&&("arraybuffer"===this.responseType?e.arrayBuffer().then(this.hc.bind(this),this.Oa.bind(this)):void 0!==u.ReadableStream&&"body"in e?(this.response=this.responseText="",this.c=e.body.getReader(),this.l=new TextDecoder,$o(this)):e.text().then(this.ic.bind(this),this.Oa.bind(this)))))},t.ec=function(e){if(this.a){var t=this.l.decode(e.value?e.value:new Uint8Array(0),{stream:!e.done});t&&(this.response=this.responseText+=t),e.done?Zo(this,!0):Qo(this),3==this.readyState&&$o(this)}},t.ic=function(e){this.a&&(this.response=this.responseText=e,Zo(this,!0))},t.hc=function(e){this.a&&(this.response=e,Zo(this,!0))},t.Oa=function(e){var t=this.h;t&&t.log(Bo,"Failed to fetch url "+this.g,e instanceof Error?e:Error(e)),this.a&&Zo(this,!0)},t.setRequestHeader=function(e,t){this.i.append(e,t)},t.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.h)&&e.log(Bo,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var e=this.h;return e&&e.log(Bo,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},k(ea,sn);var ta="";ea.prototype.b=Ko("goog.net.XhrIo");var na=/^https?$/i,ra=["POST","PUT"];function ia(e){return"content-type"==e.toLowerCase()}function oa(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,aa(e),ua(e)}function aa(e){e.I||(e.I=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function sa(e){if(e.c&&void 0!==s)if(e.w[1]&&4==ha(e)&&2==la(e))Go(e.b,fa(e,"Local request error detected and ignored"));else if(e.i&&4==ha(e))ln(e.Lb,0,e);else if(e.dispatchEvent("readystatechange"),4==ha(e)){Go(e.b,fa(e,"Request complete")),e.c=!1;try{var t,n=la(e);e:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break e;default:r=!1}if(!(t=r)){var i;if(i=0===n){var o=String(e.l).match(bn)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}i=!na.test(o?o.toLowerCase():"")}t=i}if(t)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var c=2<ha(e)?e.a.statusText:""}catch(t){Go(e.b,"Can not get status: "+t.message),c=""}e.h=c+" ["+la(e)+"]",aa(e)}}finally{ua(e)}}}function ua(e,t){if(e.a){ca(e);var n=e.a,r=e.w[0]?d:null;e.a=null,e.w=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(Vo,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function ca(e){e.a&&e.v&&(e.a.ontimeout=null),e.o&&(u.clearTimeout(e.o),e.o=null)}function ha(e){return e.a?e.a.readyState:0}function la(e){try{return 2<ha(e)?e.a.status:-1}catch(e){return-1}}function fa(e,t){return t+" ["+e.O+" "+e.l+" "+la(e)+"]"}function da(e){var t=_a;this.g=[],this.v=t,this.o=e||null,this.f=this.a=!1,this.c=void 0,this.u=this.w=this.i=!1,this.h=0,this.b=null,this.l=0}function pa(e,t,n){e.a=!0,e.c=n,e.f=!t,ba(e)}function va(e){if(e.a){if(!e.u)throw new ya(e);e.u=!1}}function ma(e,t,n,r){e.g.push([t,n,r]),e.a&&ba(e)}function ga(e){return q(e.g,(function(e){return b(e[1])}))}function ba(e){if(e.h&&e.a&&ga(e)){var t=e.h,n=Sa[t];n&&(u.clearTimeout(n.a),delete Sa[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var r=n=!1;e.g.length&&!e.i;){var i=e.g.shift(),o=i[0],a=i[1];if(i=i[2],o=e.f?a:o)try{var s=o.call(i||e.o,t);void 0!==s&&(e.f=e.f&&(s==t||s instanceof Error),e.c=t=s),(N(t)||"function"==typeof u.Promise&&t instanceof u.Promise)&&(r=!0,e.i=!0)}catch(r){t=r,e.f=!0,ga(e)||(n=!0)}}e.c=t,r&&(s=_(e.m,e,!0),r=_(e.m,e,!1),t instanceof da?(ma(t,s,r),t.w=!0):t.then(s,r)),n&&(t=new Ia(t),Sa[t.a]=t,e.h=t.a)}function ya(){O.call(this)}function wa(){O.call(this)}function Ia(e){this.a=u.setTimeout(_(this.c,this),0),this.b=e}(t=ea.prototype).Ia=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Go(this.b,fa(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(Go(this.b,fa(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ua(this))},t.za=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ua(this,!0)),ea.qb.za.call(this)},t.Lb=function(){this.va||(this.J||this.i||this.f?sa(this):this.yc())},t.yc=function(){sa(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ta:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(Vo,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(e){return Go(this.b,"Can not get response: "+e.message),null}},da.prototype.cancel=function(e){if(this.a)this.c instanceof da&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.v?this.v.call(this.o,this):this.u=!0,this.a||(e=new wa(this),va(this),pa(this,!1,e))}},da.prototype.m=function(e,t){this.i=!1,pa(this,e,t)},da.prototype.then=function(e,t,n){var r,i,o=new We((function(e,t){r=e,i=t}));return ma(this,r,(function(e){e instanceof wa?o.cancel():i(e)})),o.then(e,t,n)},da.prototype.$goog_Thenable=!0,k(ya,O),ya.prototype.message="Deferred has already fired",ya.prototype.name="AlreadyCalledError",k(wa,O),wa.prototype.message="Deferred was canceled",wa.prototype.name="CanceledError",Ia.prototype.c=function(){throw delete Sa[this.a],this.b};var Sa={};function Ea(e){var t={},n=t.document||document,r=oe(e).toString(),i=document.createElement("SCRIPT"),o={Nb:i,Ia:void 0},a=new da(o),s=null,c=null!=t.timeout?t.timeout:5e3;return 0<c&&(s=window.setTimeout((function(){Ta(i,!0);var e=new Na(ka,"Timeout reached for loading script "+r);va(a),pa(a,!1,e)}),c),o.Ia=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ta(i,t.hd||!1,s),va(a),pa(a,!0,null))},i.onerror=function(){Ta(i,!0,s);var e=new Na(Aa,"Error while loading script "+r);va(a),pa(a,!1,e)},Z(o=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Wn(i,o),function(e,t){j(e,"HTMLScriptElement"),e.src=oe(t),null===f&&(f=(t=(t=u.document).querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&l.test(t)?t:""),(t=f)&&e.setAttribute("nonce",t)}(i,e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(i),a}function _a(){if(this&&this.Nb){var e=this.Nb;e&&"SCRIPT"==e.tagName&&Ta(e,!0,this.Ia)}}function Ta(e,t,n){null!=n&&u.clearTimeout(n),e.onload=d,e.onerror=d,e.onreadystatechange=d,t&&window.setTimeout((function(){e&&e.parentNode&&e.parentNode.removeChild(e)}),0)}var Aa=0,ka=1;function Na(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),O.call(this,n),this.code=e}function Oa(e){this.f=e}function Ca(e,t,n){if(this.c=e,e=t||{},this.l=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.u=e.secureTokenTimeout||Da,this.g=Y(e.secureTokenHeaders||Ra),this.h=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=e.firebaseTimeout||xa,this.a=Y(e.firebaseHeaders||Fa),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==fr(),!(n=u.XMLHttpRequest||n&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!lr())throw new Zr("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,lr()?this.f=new Xo(self):dr()?this.f=new Oa(n):this.f=new Ro,this.b=null}k(Na,O),k(Oa,Co),Oa.prototype.a=function(){return new this.f},Oa.prototype.b=function(){return{}};var La,Pa="idToken",Da=new Lr(3e4,6e4),Ra={"Content-Type":"application/x-www-form-urlencoded"},xa=new Lr(3e4,6e4),Fa={"Content-Type":"application/json"};function Ma(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function ja(e,t){t?(e.a["X-Client-Version"]=t,e.g["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.g["X-Client-Version"])}function Ua(e,t,n,r,i,o,a){(function(){var e=br();return!((e="Chrome"!=vr(e)?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e||wt&&Ot&&!(9<Ot))})()||lr()?e=_(e.o,e):(La||(La=new We((function(e,t){!function(e,t){((window.gapi||{}).client||{}).request?e():(u[Ba]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))},function(e,t){ma(e,null,t,void 0)}(Ea(ae(Va,{onload:Ba})),(function(){t(Error("CORS_UNSUPPORTED"))})))}(e,t)}))),e=_(e.m,e)),e(t,n,r,i,o,a)}Ca.prototype.R=function(){return this.b},Ca.prototype.o=function(e,t,n,r,i,o){if(lr()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new Zr("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new ea(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}un(a,"complete",(function(){s&&clearTimeout(s);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return Go(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)})),cn(a,"ready",(function(){s&&clearTimeout(s),vt(this)})),cn(a,"timeout",(function(){s&&clearTimeout(s),vt(this),t&&t(null)})),function(e,t,n,r,i){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.l+"; newUri="+t);n=n?n.toUpperCase():"GET",e.l=t,e.h="",e.O=n,e.I=!1,e.c=!0,e.a=e.B?e.B.a():To.a(),e.w=e.B?Lo(e.B):Lo(To),e.a.onreadystatechange=_(e.Lb,e);try{Go(e.b,fa(e,"Opening Xhr")),e.J=!0,e.a.open(n,String(t),!0),e.J=!1}catch(t){return Go(e.b,fa(e,"Error opening Xhr: "+t.message)),void oa(e,t)}t=r||"";var o=new vn(e.headers);i&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(g(e)||c(e))V(e,t,void 0);else for(var n=pn(e),r=dn(e),i=r.length,o=0;o<i;o++)t.call(void 0,r[o],n&&n[o],e)}(i,(function(e,t){o.set(t,e)})),i=function(e){e:{for(var t=ia,n=e.length,r=c(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:c(e)?e.charAt(t):e[t]}(o.X()),r=u.FormData&&t instanceof u.FormData,!H(ra,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(e,t){this.a.setRequestHeader(t,e)}),e),e.m&&(e.a.responseType=e.m),"withCredentials"in e.a&&e.a.withCredentials!==e.P&&(e.a.withCredentials=e.P);try{ca(e),0<e.g&&(e.v=function(e){return wt&&Lt(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),Go(e.b,fa(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.v)),e.v?(e.a.timeout=e.g,e.a.ontimeout=_(e.Ia,e)):e.o=ln(e.Ia,e.g,e)),Go(e.b,fa(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){Go(e.b,fa(e,"Send error: "+t.message)),oa(e,t)}}(a,e,n,r,i)};var Va=new Q(ne,"https://apis.google.com/js/client.js?onload=%{onload}"),Ba="__fcb"+Math.floor(1e6*Math.random()).toString();function qa(e){if(!c(e=e.email)||!sr.test(e))throw new Zr("invalid-email")}function Ha(e){"email"in e&&qa(e)}function Ja(e){if(!e[Pa])throw new Zr("internal-error")}function Wa(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new Zr("internal-error")}else{if(!e.sessionInfo)throw new Zr("missing-verification-id");if(!e.code)throw new Zr("missing-verification-code")}}Ca.prototype.m=function(e,t,n,r,i){var o=this;La.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:i,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})})).s((function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})}))},Ca.prototype.ob=function(){return ks(this,bs,{})},Ca.prototype.rb=function(e,t){return ks(this,ms,{idToken:e,email:t})},Ca.prototype.sb=function(e,t){return ks(this,gs,{idToken:e,password:t})};var Ka={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function Ga(e){if(!e.requestUri||!e.sessionId&&!e.postBody&&!e.pendingToken)throw new Zr("internal-error")}function Xa(e,t){return t.oauthIdToken&&t.providerId&&0==t.providerId.indexOf("oidc.")&&!t.pendingToken&&(e.sessionId?t.nonce=e.sessionId:e.postBody&&Un(e=new xn(e.postBody),"nonce")&&(t.nonce=e.get("nonce"))),t}function za(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=Oo(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=Oo(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=Oo(e)):e.errorMessage&&(t=Ns(e.errorMessage)),t)throw t;if(!e[Pa])throw new Zr("internal-error")}function Ya(e,t){return t.returnIdpCredential=!0,ks(e,ys,t)}function $a(e,t){return t.returnIdpCredential=!0,ks(e,Is,t)}function Za(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,ks(e,ws,t)}function Qa(e){if(!e.oobCode)throw new Zr("invalid-action-code")}(t=Ca.prototype).tb=function(e,t){var n={idToken:e},r=[];return X(Ka,(function(e,i){var o=t[i];null===o?r.push(e):i in t&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),ks(this,ms,n)},t.kb=function(e,t){return Z(e={requestType:"PASSWORD_RESET",email:e},t),ks(this,ls,e)},t.lb=function(e,t){return Z(e={requestType:"EMAIL_SIGNIN",email:e},t),ks(this,cs,e)},t.jb=function(e,t){return Z(e={requestType:"VERIFY_EMAIL",idToken:e},t),ks(this,hs,e)},t.Wa=function(e){return ks(this,_s,e)},t.ab=function(e,t){return ks(this,ps,{oobCode:e,newPassword:t})},t.Ma=function(e){return ks(this,ts,{oobCode:e})},t.Ya=function(e){return ks(this,es,{oobCode:e})};var es={endpoint:"setAccountInfo",D:Qa,fa:"email",F:!0},ts={endpoint:"resetPassword",D:Qa,K:function(e){var t=e.requestType;if(!t||!e.email&&"EMAIL_SIGNIN"!=t)throw new Zr("internal-error")},F:!0},ns={endpoint:"signupNewUser",D:function(e){if(qa(e),!e.password)throw new Zr("weak-password")},K:Ja,T:!0,F:!0},rs={endpoint:"createAuthUri",F:!0},is={endpoint:"deleteAccount",V:["idToken"]},os={endpoint:"setAccountInfo",V:["idToken","deleteProvider"],D:function(e){if(!m(e.deleteProvider))throw new Zr("internal-error")}},as={endpoint:"emailLinkSignin",V:["email","oobCode"],D:qa,K:Ja,T:!0,F:!0},ss={endpoint:"emailLinkSignin",V:["idToken","email","oobCode"],D:qa,K:Ja,T:!0},us={endpoint:"getAccountInfo"},cs={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new Zr("internal-error");qa(e)},fa:"email",F:!0},hs={endpoint:"getOobConfirmationCode",V:["idToken","requestType"],D:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new Zr("internal-error")},fa:"email",F:!0},ls={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(e){if("PASSWORD_RESET"!=e.requestType)throw new Zr("internal-error");qa(e)},fa:"email",F:!0},fs={wb:!0,endpoint:"getProjectConfig",Kb:"GET"},ds={wb:!0,endpoint:"getRecaptchaParam",Kb:"GET",K:function(e){if(!e.recaptchaSiteKey)throw new Zr("internal-error")}},ps={endpoint:"resetPassword",D:Qa,fa:"email",F:!0},vs={endpoint:"sendVerificationCode",V:["phoneNumber","recaptchaToken"],fa:"sessionInfo",F:!0},ms={endpoint:"setAccountInfo",V:["idToken"],D:Ha,T:!0},gs={endpoint:"setAccountInfo",V:["idToken"],D:function(e){if(Ha(e),!e.password)throw new Zr("weak-password")},K:Ja,T:!0},bs={endpoint:"signupNewUser",K:Ja,T:!0,F:!0},ys={endpoint:"verifyAssertion",D:Ga,Ra:Xa,K:za,T:!0,F:!0},ws={endpoint:"verifyAssertion",D:Ga,Ra:Xa,K:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new Zr("user-not-found");if(e.errorMessage)throw Ns(e.errorMessage);if(!e[Pa])throw new Zr("internal-error")},T:!0,F:!0},Is={endpoint:"verifyAssertion",D:function(e){if(Ga(e),!e.idToken)throw new Zr("internal-error")},Ra:Xa,K:za,T:!0},Ss={endpoint:"verifyCustomToken",D:function(e){if(!e.token)throw new Zr("invalid-custom-token")},K:Ja,T:!0,F:!0},Es={endpoint:"verifyPassword",D:function(e){if(qa(e),!e.password)throw new Zr("wrong-password")},K:Ja,T:!0,F:!0},_s={endpoint:"verifyPhoneNumber",D:Wa,K:Ja,F:!0},Ts={endpoint:"verifyPhoneNumber",D:function(e){if(!e.idToken)throw new Zr("internal-error");Wa(e)},K:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",Oo(e);Ja(e)}},As={Yb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",D:Wa,K:Ja,F:!0};function ks(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(null==r||""===r)return!1}return!0}(n,t.V))return Qe(new Zr("internal-error"));var r,i=t.Kb||"POST";return Ze(n).then(t.D).then((function(){return t.T&&(n.returnSecureToken=!0),t.F&&e.b&&void 0===n.tenantId&&(n.tenantId=e.b),function(e,t,n,r,i,o){var a=Tn(e.h+t);En(a,"key",e.c),o&&En(a,"cb",A().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&En(a,u,r[u]);return new We((function(t,o){Ua(e,a.toString(),(function(e){e?e.error?o(Os(e,i||{})):t(e):o(new Zr("network-request-failed"))}),n,s?void 0:zn(Ar(r)),e.a,e.i.get())}))}(e,t.endpoint,i,n,t.Yb,t.wb||!1)})).then((function(e){return r=e,t.Ra?t.Ra(n,r):r})).then(t.K).then((function(){if(!t.fa)return r;if(!(t.fa in r))throw new Zr("internal-error");return r[t.fa]}))}function Ns(e){return Os({error:{errors:[{message:e}],code:400,message:e}})}function Os(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new Zr(r[n]):null)return n;for(var i in n=e.error&&e.error.message||"",Z(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(i))return new Zr(r[i],t);return!t&&e&&(t=Tr(e)),new Zr("internal-error",t)}function Cs(e){this.b=e,this.a=null,this.gb=function(e){return(Rs||(Rs=new We((function(e,t){function n(){Cr(),yr("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){Cr(),t(Error("Network Error"))},timeout:Ps.get()})}if(yr("gapi.iframes.Iframe"))e();else if(yr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){yr("gapi.load")?n():t(Error("Network Error"))},Ze(Ea(r=ae(Ls,{onload:r}))).s((function(){t(Error("Network Error"))}))}})).s((function(e){throw Rs=null,e})))).then((function(){return new We((function(t,n){yr("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:yr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),Ds.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var Ls=new Q(ne,"https://apis.google.com/js/api.js?onload=%{onload}"),Ps=new Lr(3e4,6e4),Ds=new Lr(5e3,15e3),Rs=null;function xs(e,t,n){this.i=e,this.g=t,this.h=n,this.f=null,this.a=An(this.i,"/__/auth/iframe"),En(this.a,"apiKey",this.g),En(this.a,"appName",this.h),this.b=null,this.c=[]}function Fs(e,t,n,r,i){this.o=e,this.m=t,this.c=n,this.u=r,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function Ms(e){try{return r.a.app(e).auth().Ca()}catch(e){return[]}}function js(e,t,n,r,i){this.u=e,this.f=t,this.b=n,this.c=r||null,this.h=i||null,this.m=this.o=this.v=null,this.g=[],this.l=this.a=null}function Us(e){var t=tr();return function(e){return ks(e,fs,{}).then((function(e){return e.authorizedDomains||[]}))}(e).then((function(e){e:{var n=Tn(t),r=n.f;n=n.b;for(var i=0;i<e.length;i++){var o=e[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Tn(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:ar.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new ko(tr())}))}function Vs(e){return e.l?e.l:(e.l=ur().then((function(){if(!e.o){var t=e.c,n=e.h,r=Ms(e.b),i=new xs(e.u,e.f,e.b);i.f=t,i.b=n,i.c=G(r||[]),e.o=i.toString()}e.i=new Cs(e.o),function(e){if(!e.i)throw Error("IfcHandler must be initialized!");!function(e,t){e.gb.then((function(){e.a.register("authEvent",t,yr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(e.i,(function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=Eo(t.authEvent),n=0;n<e.g.length;n++)r=e.g[n](t)||r;return(n={}).status=r?"ACK":"ERROR",Ze(n)}return n.status="ERROR",Ze(n)}))}(e)})),e.l)}function Bs(e){return e.m||(e.v=e.c?gr(e.c,Ms(e.b)):null,e.m=new Ca(e.f,Oi(e.h),e.v)),e.m}function qs(e,t,n,r,i,o,a,s,u,c,h){return(e=new Fs(e,t,n,r,i)).l=o,e.g=a,e.i=s,e.b=Y(u||null),e.f=c,e.nb(h).toString()}function Hs(e){if(this.a=e||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Zr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Js(e){this.b=e,this.a={},this.f=_(this.c,this)}xs.prototype.toString=function(){return this.f?En(this.a,"v",this.f):jn(this.a.a,"v"),this.b?En(this.a,"eid",this.b):jn(this.a.a,"eid"),this.c.length?En(this.a,"fw",this.c.join(",")):jn(this.a.a,"fw"),this.a.toString()},Fs.prototype.nb=function(e){return this.h=e,this},Fs.prototype.toString=function(){var e=An(this.o,"/__/auth/handler");if(En(e,"apiKey",this.m),En(e,"appName",this.c),En(e,"authType",this.u),this.a.isOAuthProvider){var t=this.a;try{var n=r.a.app(this.c).auth().ha()}catch(e){n=null}for(var i in t.bb=n,En(e,"providerId",this.a.providerId),n=Ar((t=this.a).zb))n[i]=n[i].toString();i=t.Fc,n=Y(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}t.eb&&t.bb&&!n[t.eb]&&(n[t.eb]=t.bb),z(n)||En(e,"customParameters",Tr(n))}if("function"==typeof this.a.Hb&&(t=this.a.Hb()).length&&En(e,"scopes",t.join(",")),this.l?En(e,"redirectUrl",this.l):jn(e.a,"redirectUrl"),this.g?En(e,"eventId",this.g):jn(e.a,"eventId"),this.i?En(e,"v",this.i):jn(e.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!_n(e,s)&&En(e,s,this.b[s]);return this.h?En(e,"tid",this.h):jn(e.a,"tid"),this.f?En(e,"eid",this.f):jn(e.a,"eid"),(s=Ms(this.c)).length&&En(e,"fw",s.join(",")),e.toString()},(t=js.prototype).Fb=function(e,t,n){var r=new Zr("popup-closed-by-user"),i=new Zr("web-storage-unsupported"),o=this,a=!1;return this.ia().then((function(){(function(e){var t={type:"webStorageSupport"};return Vs(e).then((function(){return function(e,t){return e.gb.then((function(){return new We((function(n){e.a.send(t.type,t,n,yr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(e.i,t)})).then((function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(e&&ir(e),t(i),a=!0)}))})).s((function(){})).then((function(){if(!a)return function(e){return new We((function(t){return function n(){fn(2e3).then((function(){if(e&&!e.closed)return n();t()}))}()}))}(e)})).then((function(){if(!a)return fn(n).then((function(){t(r)}))}))},t.Ob=function(){var e=br();return!_r(e)&&!Or(e)},t.Jb=function(){return!1},t.Db=function(e,t,n,r,i,o,a,s){if(!e)return Qe(new Zr("popup-blocked"));if(a&&!_r())return this.ia().s((function(t){ir(e),i(t)})),r(),Ze();this.a||(this.a=Us(Bs(this)));var u=this;return this.a.then((function(){var t=u.ia().s((function(t){throw ir(e),i(t),t}));return r(),t})).then((function(){Io(n),a||nr(qs(u.u,u.f,u.b,t,n,null,o,u.c,void 0,u.h,s),e)})).s((function(e){throw"auth/network-request-failed"==e.code&&(u.a=null),e}))},t.Eb=function(e,t,n,r){this.a||(this.a=Us(Bs(this)));var i=this;return this.a.then((function(){Io(t),nr(qs(i.u,i.f,i.b,e,t,tr(),n,i.c,void 0,i.h,r))})).s((function(e){throw"auth/network-request-failed"==e.code&&(i.a=null),e}))},t.ia=function(){var e=this;return Vs(this).then((function(){return e.i.gb})).s((function(){throw e.a=null,new Zr("network-request-failed")}))},t.Rb=function(){return!0},t.Aa=function(e){this.g.push(e)},t.Na=function(e){W(this.g,(function(t){return t==e}))},(t=Hs.prototype).get=function(e){return Ze(this.a.getItem(e)).then((function(e){return e&&kr(e)}))},t.set=function(e,t){return Ze(this.a.setItem(e,Tr(t)))},t.S=function(e){return Ze(this.a.removeItem(e))},t.$=function(){},t.ea=function(){};var Ws,Ks=[];function Gs(e,t,n){z(e.a)&&e.b.addEventListener("message",e.f),void 0===e.a[t]&&(e.a[t]=[]),e.a[t].push(n)}function Xs(e){this.a=e}function zs(e){this.c=e,this.b=!1,this.a=[]}function Ys(e,t,n,r){var i,o,a,s,u=n||{},c=null;if(e.b)return Qe(Error("connection_unavailable"));var h=r?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new We((function(n,r){l?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),h),c={messageChannel:l,onMessage:o=function(e){e.data.eventId===i&&("ack"===e.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===e.data.status?(clearTimeout(s),void 0!==e.data.response?n(e.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},e.a.push(c),l.port1.addEventListener("message",o),e.c.postMessage({eventType:t,eventId:i,data:u},[l.port2])):r(Error("connection_unavailable"))})).then((function(t){return $s(e,c),t})).s((function(t){throw $s(e,c),t}))}function $s(e,t){if(t){var n=t.messageChannel,r=t.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),W(e.a,(function(e){return e==t}))}}function Zs(){if(!eu())throw new Zr("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.o=!1,this.h=null;var e=this;lr()&&self?(this.l=function(){var e=lr()?self:null;if(V(Ks,(function(n){n.b==e&&(t=n)})),!t){var t=new Js(e);Ks.push(t)}return t}(),Gs(this.l,"keyChanged",(function(t,n){return ou(e).then((function(t){return 0<t.length&&V(e.a,(function(e){e(t)})),{keyProcessed:H(t,n.key)}}))})),Gs(this.l,"ping",(function(){return Ze(["keyChanged"])}))):function(){var e=u.navigator;return e&&e.serviceWorker?Ze().then((function(){return e.serviceWorker.ready})).then((function(e){return e.active||null})).s((function(){return null})):Ze(null)}().then((function(t){(e.h=t)&&(e.g=new zs(new Xs(t)),Ys(e.g,"ping",null,!0).then((function(t){t[0].fulfilled&&H(t[0].value,"keyChanged")&&(e.o=!0)})).s((function(){})))}))}function Qs(e){return e.m||(e.m=function e(t){return new We((function(n,r){var i=t.u.open("firebaseLocalStorageDb",1);i.onerror=function(e){try{e.preventDefault()}catch(e){}r(Error(e.target.error))},i.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){r(e)}},i.onsuccess=function(i){(i=i.target.result).objectStoreNames.contains("firebaseLocalStorage")?n(i):function(e){return new We((function(t,n){var r=e.u.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){t()},r.onerror=function(e){n(Error(e.target.error))}}))}(t).then((function(){return e(t)})).then((function(e){n(e)})).s((function(e){r(e)}))}}))}(e)),e.m}function eu(){try{return!!u.indexedDB}catch(e){return!1}}function tu(e){return e.objectStore("firebaseLocalStorage")}function nu(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function ru(e){return new We((function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(e.target.error)}}))}function iu(e,t){return e.g&&e.h&&function(){var e=u.navigator;return e&&e.serviceWorker&&e.serviceWorker.controller||null}()===e.h?Ys(e.g,"keyChanged",{key:t},e.o).then((function(){})).s((function(){})):Ze()}function ou(e){return Qs(e).then((function(e){var t=tu(nu(e,!1));return t.getAll?ru(t.getAll()):new We((function(e,n){var r=[],i=t.openCursor();i.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},i.onerror=function(e){n(e.target.error)}}))})).then((function(t){var n={},r=[];if(0==e.b){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=function e(t,n){var r,i=[];for(r in t)r in n?typeof t[r]!=typeof n[r]?i.push(r):"object"==typeof t[r]&&null!=t[r]&&null!=n[r]?0<e(t[r],n[r]).length&&i.push(r):t[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in t||i.push(r);return i}(e.c,n),e.c=n}return r}))}function au(e){e.i&&e.i.cancel("STOP_EVENT"),e.f&&(clearTimeout(e.f),e.f=null)}function su(e){var t=this,n=null;this.a=[],this.type="indexedDB",this.c=e,this.b=Ze().then((function(){if(eu()){var e=Nr(),r="__sak"+e;return Ws||(Ws=new Zs),(n=Ws).set(r,e).then((function(){return n.get(r)})).then((function(t){if(t!==e)throw Error("indexedDB not supported!");return n.S(r)})).then((function(){return n})).s((function(){return t.c}))}return t.c})).then((function(e){return t.type=e.type,e.$((function(e){V(t.a,(function(t){t(e)}))})),e}))}function uu(){this.a={},this.type="inMemory"}function cu(){if(!function(){var e="Node"==fr();if(!(e=hu()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==fr())throw new Zr("internal-error","The LocalStorage compatibility library was not found.");throw new Zr("web-storage-unsupported")}this.a=hu()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function hu(){try{var e=u.localStorage,t=Nr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function lu(){this.type="nullStorage"}function fu(){if(!function(){var e="Node"==fr();if(!(e=du()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==fr())throw new Zr("internal-error","The SessionStorage compatibility library was not found.");throw new Zr("web-storage-unsupported")}this.a=du()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function du(){try{var e=u.sessionStorage,t=Nr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function pu(){var e={};e.Browser=gu,e.Node=bu,e.ReactNative=yu,e.Worker=wu,this.a=e[fr()]}Js.prototype.c=function(e){var t=e.data.eventType,n=e.data.eventId,r=this.a[t];if(r&&0<r.length){e.ports[0].postMessage({status:"ack",eventId:n,eventType:t,response:null});var i=[];V(r,(function(t){i.push(Ze().then((function(){return t(e.origin,e.data.data)})))})),tt(i).then((function(r){var i=[];V(r,(function(e){i.push({fulfilled:e.Gb,value:e.value,reason:e.reason?e.reason.message:void 0})})),V(i,(function(e){for(var t in e)void 0===e[t]&&delete e[t]})),e.ports[0].postMessage({status:"done",eventId:n,eventType:t,response:i})}))}},Xs.prototype.postMessage=function(e,t){this.a.postMessage(e,t)},zs.prototype.close=function(){for(;0<this.a.length;)$s(this,this.a[0]);this.b=!0},(t=Zs.prototype).set=function(e,t){var n,r=!1,i=this;return Qs(this).then((function(t){return ru((t=tu(nu(n=t,!0))).get(e))})).then((function(o){var a=tu(nu(n,!0));return o?(o.value=t,ru(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=e,o.value=t,ru(a.add(o)))})).then((function(){return i.c[e]=t,iu(i,e)})).ka((function(){r&&i.b--}))},t.get=function(e){return Qs(this).then((function(t){return ru(tu(nu(t,!1)).get(e))})).then((function(e){return e&&e.value}))},t.S=function(e){var t=!1,n=this;return Qs(this).then((function(r){return t=!0,n.b++,ru(tu(nu(r,!0)).delete(e))})).then((function(){return delete n.c[e],iu(n,e)})).ka((function(){t&&n.b--}))},t.$=function(e){0==this.a.length&&function(e){au(e),function t(){e.f=setTimeout((function(){e.i=ou(e).then((function(t){0<t.length&&V(e.a,(function(e){e(t)}))})).then((function(){t()})).s((function(e){"STOP_EVENT"!=e.message&&t()}))}),800)}()}(this),this.a.push(e)},t.ea=function(e){W(this.a,(function(t){return t==e})),0==this.a.length&&au(this)},(t=su.prototype).get=function(e){return this.b.then((function(t){return t.get(e)}))},t.set=function(e,t){return this.b.then((function(n){return n.set(e,t)}))},t.S=function(e){return this.b.then((function(t){return t.S(e)}))},t.$=function(e){this.a.push(e)},t.ea=function(e){W(this.a,(function(t){return t==e}))},(t=uu.prototype).get=function(e){return Ze(this.a[e])},t.set=function(e,t){return this.a[e]=t,Ze()},t.S=function(e){return delete this.a[e],Ze()},t.$=function(){},t.ea=function(){},(t=cu.prototype).get=function(e){var t=this;return Ze().then((function(){return kr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ze().then((function(){var r=Tr(t);null===r?n.S(e):n.a.setItem(e,r)}))},t.S=function(e){var t=this;return Ze().then((function(){t.a.removeItem(e)}))},t.$=function(e){u.window&&Xt(u.window,"storage",e)},t.ea=function(e){u.window&&$t(u.window,"storage",e)},(t=lu.prototype).get=function(){return Ze(null)},t.set=function(){return Ze()},t.S=function(){return Ze()},t.$=function(){},t.ea=function(){},(t=fu.prototype).get=function(e){var t=this;return Ze().then((function(){return kr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ze().then((function(){var r=Tr(t);null===r?n.S(e):n.a.setItem(e,r)}))},t.S=function(e){var t=this;return Ze().then((function(){t.a.removeItem(e)}))},t.$=function(){},t.ea=function(){};var vu,mu,gu={C:cu,Ta:fu},bu={C:cu,Ta:fu},yu={C:Hs,Ta:lu},wu={C:cu,Ta:lu},Iu={ad:"local",NONE:"none",cd:"session"};function Su(){var e=!(Or(br())||!hr()),t=_r(),n=wr();this.m=e,this.h=t,this.l=n,this.a={},vu||(vu=new pu),e=vu;try{this.g=!er()&&Rr()||!u.indexedDB?new e.a.C:new su(lr()?new uu:new e.a.C)}catch(e){this.g=new uu,this.h=!0}try{this.i=new e.a.Ta}catch(e){this.i=new uu}this.u=new uu,this.f=_(this.Pb,this),this.b={}}function Eu(){return mu||(mu=new Su),mu}function _u(e,t){switch(t){case"session":return e.i;case"none":return e.u;default:return e.g}}function Tu(e,t){return"firebase:"+e.name+(t?":"+t:"")}function Au(e,t,n){return n=Tu(t,n),"local"==t.C&&(e.b[n]=null),_u(e,t.C).S(n)}function ku(e){e.c&&(clearInterval(e.c),e.c=null)}function Nu(e){this.a=e,this.b=Eu()}(t=Su.prototype).get=function(e,t){return _u(this,e.C).get(Tu(e,t))},t.set=function(e,t,n){var r=Tu(e,n),i=this,o=_u(this,e.C);return o.set(r,t).then((function(){return o.get(r)})).then((function(t){"local"==e.C&&(i.b[r]=t)}))},t.addListener=function(e,t,n){e=Tu(e,t),this.l&&(this.b[e]=u.localStorage.getItem(e)),z(this.a)&&(_u(this,"local").$(this.f),this.h||(er()||!Rr())&&u.indexedDB||!this.l||function(e){ku(e),e.c=setInterval((function(){for(var t in e.a){var n=u.localStorage.getItem(t),r=e.b[t];n!=r&&(e.b[t]=n,n=new Mt({type:"storage",key:t,target:window,oldValue:r,newValue:n,a:!0}),e.Pb(n))}}),1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(n)},t.removeListener=function(e,t,n){e=Tu(e,t),this.a[e]&&(W(this.a[e],(function(e){return e==n})),0==this.a[e].length&&delete this.a[e]),z(this.a)&&(_u(this,"local").ea(this.f),ku(this))},t.Pb=function(e){if(e&&e.f){var t=e.a.key;if(null==t)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.$a(n))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?_u(this,"local").ea(this.f):ku(this),this.m)if(n=u.localStorage.getItem(t),(r=e.a.newValue)!==n)null!==r?u.localStorage.setItem(t,r):u.localStorage.removeItem(t);else if(this.b[t]===r&&void 0===e.a.a)return;var o=this;n=function(){void 0===e.a.a&&o.b[t]===u.localStorage.getItem(t)||(o.b[t]=u.localStorage.getItem(t),o.$a(t))},wt&&Ot&&10==Ot&&u.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(n,10):n()}}else V(e,_(this.$a,this))},t.$a=function(e){this.a[e]&&V(this.a[e],(function(e){e()}))};var Ou,Cu={name:"authEvent",C:"local"};function Lu(){this.a=Eu()}function Pu(e,t){this.b=Du,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0!==Ou||(Ou=u.Int32Array?new Int32Array(Vu):Vu),this.reset()}k(Pu,(function(){this.b=-1}));for(var Du=64,Ru=Du-1,xu=[],Fu=0;Fu<Ru;Fu++)xu[Fu]=0;var Mu=K(128,xu);function ju(e){for(var t=e.f,n=e.l,r=0,i=0;i<t.length;)n[r++]=t[i]<<24|t[i+1]<<16|t[i+2]<<8|t[i+3],i=4*r;for(t=16;64>t;t++){i=0|n[t-15],r=0|n[t-2];var o=(0|n[t-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=o+a|0}r=0|e.a[0],i=0|e.a[1];var s=0|e.a[2],u=0|e.a[3],c=0|e.a[4],h=0|e.a[5],l=0|e.a[6];for(o=0|e.a[7],t=0;64>t;t++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|Ou[t])|0)+(0|n[t])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+f|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+i|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+u|0,e.a[4]=e.a[4]+c|0,e.a[5]=e.a[5]+h|0,e.a[6]=e.a[6]+l|0,e.a[7]=e.a[7]+o|0}function Uu(e,t,n){void 0===n&&(n=t.length);var r=0,i=e.c;if(c(t))for(;r<n;)e.f[i++]=t.charCodeAt(r++),i==e.b&&(ju(e),i=0);else{if(!g(t))throw Error("message must be string or array");for(;r<n;){var o=t[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");e.f[i++]=o,i==e.b&&(ju(e),i=0)}}e.c=i,e.g+=n}Pu.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):G(this.h)};var Vu=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Bu(){Pu.call(this,8,qu)}k(Bu,Pu);var qu=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Hu(e,t,n,r,i){this.u=e,this.i=t,this.l=n,this.m=r||null,this.o=i||null,this.h=t+":"+n,this.v=new Lu,this.g=new Nu(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ju(e){return new Zr("invalid-cordova-configuration",e)}function Wu(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function Ku(e){return e.f||(e.f=e.ia().then((function(){return new We((function(t){e.Aa((function n(r){return t(r),e.Na(n),!1})),function(e){function t(t){r=!0,i&&i.cancel(),Gu(e).then((function(r){var i=n;if(r&&t&&t.url){var o=null;-1!=(i=Hi(t.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=kr(_n(o=Tn(i),"firebaseError")||null))?Qr(o):null)?new So(r.c,r.b,null,null,o,null,r.R()):new So(r.c,r.b,i,r.f,null,null,r.R())),i=o||n}Wu(e,i)}))}var n=new So("unknown",null,null,null,new Zr("no-auth-event")),r=!1,i=fn(500).then((function(){return Gu(e).then((function(){r||Wu(e,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(yr("BuildInfo.packageName",u).toLowerCase()+"://")&&t({url:e}),"function"==typeof o)try{o(e)}catch(e){console.error(e)}},Ao||(Ao=new _o),function(e){var t=Ao;t.a.push(e),t.b||(t.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=yr("universalLinks.subscribe",u))&&e(null,t.b))}(t)}(e)}))}))),e.f}function Gu(e){var t=null;return function(e){return e.b.get(Cu,e.a).then((function(e){return Eo(e)}))}(e.g).then((function(n){return t=n,Au((n=e.g).b,Cu,n.a)})).then((function(){return t}))}function Xu(e){this.a=e,this.b=Eu()}(t=Hu.prototype).ia=function(){return this.Da?this.Da:this.Da=(cr(void 0)?ur().then((function(){return new We((function(e,t){var n=u.document,r=setTimeout((function(){t(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),e()}),!1)}))})):Qe(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof yr("universalLinks.subscribe",u))throw Ju("cordova-universal-links-plugin-fix is not installed");if(void 0===yr("BuildInfo.packageName",u))throw Ju("cordova-plugin-buildinfo is not installed");if("function"!=typeof yr("cordova.plugins.browsertab.openUrl",u))throw Ju("cordova-plugin-browsertab is not installed");if("function"!=typeof yr("cordova.InAppBrowser.open",u))throw Ju("cordova-plugin-inappbrowser is not installed")}),(function(){throw new Zr("cordova-not-ready")}))},t.Fb=function(e,t){return t(new Zr("operation-not-supported-in-this-environment")),Ze()},t.Db=function(){return Qe(new Zr("operation-not-supported-in-this-environment"))},t.Rb=function(){return!1},t.Ob=function(){return!0},t.Jb=function(){return!0},t.Eb=function(e,t,n,r){if(this.c)return Qe(new Zr("redirect-operation-pending"));var i=this,o=u.document,a=null,s=null,c=null,h=null;return this.c=Ze().then((function(){return Io(t),Ku(i)})).then((function(){return function(e,t,n,r,i){var o=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new So(t,r,null,o,new Zr("no-auth-event"),null,i),s=yr("BuildInfo.packageName",u);if("string"!=typeof s)throw new Zr("invalid-cordova-configuration");var c=yr("BuildInfo.displayName",u),h={};if(br().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=s;else{if(!br().toLowerCase().match(/android/))return Qe(new Zr("operation-not-supported-in-this-environment"));h.apn=s}c&&(h.appDisplayName=c),o=function(e){var t=new Bu;Uu(t,e),e=[];var n=8*t.g;56>t.c?Uu(t,Mu,56-t.c):Uu(t,Mu,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(ju(t),r=n=0;r<t.i;r++)for(var i=24;0<=i;i-=8)e[n++]=t.a[r]>>i&255;return function(e){return B(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join("")}(e)}(o),h.sessionId=o;var l=qs(e.u,e.i,e.l,t,n,null,r,e.m,h,e.o,i);return e.ia().then((function(){var t=e.h;return e.v.a.set(Cu,a.A(),t)})).then((function(){var t=yr("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof t)throw new Zr("invalid-cordova-configuration");var n=null;t((function(t){if(t){if("function"!=typeof(n=yr("cordova.plugins.browsertab.openUrl",u)))throw new Zr("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=yr("cordova.InAppBrowser.open",u)))throw new Zr("invalid-cordova-configuration");t=br(),e.a=n(l,t.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,e,t,n,r)})).then((function(){return new We((function(e,t){s=function(){var t=yr("cordova.plugins.browsertab.close",u);return e(),"function"==typeof t&&t(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Aa(s),c=function(){a||(a=fn(2e3).then((function(){t(new Zr("redirect-cancelled-by-user"))})))},h=function(){Pr()&&c()},o.addEventListener("resume",c,!1),br().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).s((function(e){return Gu(i).then((function(){throw e}))}))})).ka((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),a&&a.cancel(),s&&i.Na(s),i.c=null}))},t.Aa=function(e){this.b.push(e),Ku(this).s((function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new So("unknown",null,null,null,new Zr("no-auth-event")),e(t))}))},t.Na=function(e){W(this.b,(function(t){return t==e}))};var zu={name:"pendingRedirect",C:"session"};function Yu(e){return Au(e.b,zu,e.a)}function $u(e,t,n){this.i={},this.v=0,this.B=e,this.u=t,this.m=n,this.h=[],this.f=!1,this.l=_(this.o,this),this.b=new lc,this.w=new mc,this.g=new Xu(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.w,this.c.linkViaPopup=this.w,this.c.reauthViaPopup=this.w,this.a=Zu(this.B,this.u,this.m,ki)}function Zu(e,t,n,i){var o=r.a.SDK_VERSION||null;return cr()?new Hu(e,t,n,o,i):new js(e,t,n,o,i)}function Qu(e){e.f||(e.f=!0,e.a.Aa(e.l));var t=e.a;return e.a.ia().s((function(n){throw e.a==t&&e.reset(),n}))}function ec(e){e.a.Ob()&&Qu(e).s((function(t){var n=new So("unknown",null,null,null,new Zr("operation-not-supported-in-this-environment"));ac(t)&&e.o(n)})),e.a.Jb()||fc(e.b)}function tc(e,t){H(e.h,t)||e.h.push(t),e.f||function(e){return e.b.get(zu,e.a).then((function(e){return"pending"==e}))}(e.g).then((function(t){t?Yu(e.g).then((function(){Qu(e).s((function(t){var n=new So("unknown",null,null,null,new Zr("operation-not-supported-in-this-environment"));ac(t)&&e.o(n)}))})):ec(e)})).s((function(){ec(e)}))}function nc(e,t){W(e.h,(function(e){return e==t}))}$u.prototype.reset=function(){this.f=!1,this.a.Na(this.l),this.a=Zu(this.B,this.u,this.m),this.i={}},$u.prototype.o=function(e){if(!e)throw new Zr("invalid-auth-event");if(6e5<=A()-this.v&&(this.i={},this.v=0),e&&e.getUid()&&this.i.hasOwnProperty(e.getUid()))return!1;for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.xb(e.c,e.b)){(t=this.c[e.c])&&(t.h(e,r),e&&(e.f||e.b)&&(this.i[e.getUid()]=!0,this.v=A())),t=!0;break}}return fc(this.b),t};var rc=new Lr(2e3,1e4),ic=new Lr(3e4,6e4);function oc(e,t,n,r,i,o,a){return e.a.Db(t,n,r,(function(){e.f||(e.f=!0,e.a.Aa(e.l))}),(function(){e.reset()}),i,o,a)}function ac(e){return!(!e||"auth/cordova-not-ready"!=e.code)}function sc(e,t,n,r,i){var o;return function(e){return e.b.set(zu,"pending",e.a)}(e.g).then((function(){return e.a.Eb(t,n,r,i).s((function(t){if(ac(t))throw new Zr("operation-not-supported-in-this-environment");return o=t,Yu(e.g).then((function(){throw o}))})).then((function(){return e.a.Rb()?new We((function(){})):Yu(e.g).then((function(){return e.oa()})).then((function(){})).s((function(){}))}))}))}function uc(e,t,n,r,i){return e.a.Fb(r,(function(e){t.ja(n,null,e,i)}),rc.get())}$u.prototype.oa=function(){return this.b.oa()};var cc={};function hc(e,t,n){var r=t+":"+n;return cc[r]||(cc[r]=new $u(e,t,n)),cc[r]}function lc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function fc(e){e.g||(e.g=!0,vc(e,!1,null,null))}function dc(e){e.g&&!e.i&&vc(e,!1,null,null)}function pc(e,t){if(e.b=function(){return Ze(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function vc(e,t,n,r){t?r?function(e,t){if(e.b=function(){return Qe(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):pc(e,n):pc(e,{user:null}),e.f=[],e.c=[]}function mc(){}function gc(){this.vb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.vb},set:function(e){this.vb=e},enumerable:!1})}function bc(e,t){this.a=t,Ur(this,"verificationId",e)}function yc(e,t,n,r){return new bo(e).Wa(t,n).then((function(e){return new bc(e,r)}))}function wc(e){var t=Ai(e);if(!(t&&t.exp&&t.auth_time&&t.iat))throw new Zr("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Vr(this,{token:e,expirationTime:Dr(1e3*t.exp),authTime:Dr(1e3*t.auth_time),issuedAtTime:Dr(1e3*t.iat),signInProvider:t.firebase&&t.firebase.sign_in_provider?t.firebase.sign_in_provider:null,claims:t})}function Ic(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Sc(e){this.f=e,this.b=this.a=null,this.c=0}function Ec(e,t){var n=t[Pa],r=t.refreshToken;t=_c(t.expiresIn),e.b=n,e.c=t,e.a=r}function _c(e){return A()+1e3*parseInt(e,10)}function Tc(e,t){this.a=e||null,this.b=t||null,Vr(this,{lastSignInTime:Dr(t||null),creationTime:Dr(e||null)})}function Ac(e,t,n,r,i,o){Vr(this,{uid:e,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:t})}function kc(e,t){for(var n in Ft.call(this,e),t)this[n]=t[n]}function Nc(e,t,n){this.I=[],this.l=e.apiKey,this.m=e.appName,this.o=e.authDomain||null,e=r.a.SDK_VERSION?gr(r.a.SDK_VERSION):null,this.a=new Ca(this.l,Oi(ki),e),this.b=new Sc(this.a),xc(this,t[Pa]),Ec(this.b,t),Ur(this,"refreshToken",this.b.a),jc(this,n||{}),sn.call(this),this.J=!1,this.o&&Ir()&&(this.i=hc(this.o,this.l,this.m)),this.O=[],this.h=null,this.w=function(e){return new Ic((function(){return e.G(!0)}),(function(e){return!(!e||"auth/network-request-failed"!=e.code)}),(function(){var t=e.b.c-A()-3e5;return 0<t?t:0}))}(this),this.W=_(this.Ja,this);var i=this;this.ga=null,this.xa=function(e){i.ua(e.g)},this.Z=null,this.P=[],this.wa=function(e){Cc(i,e.c)},this.Y=null}function Oc(e,t){e.Z&&$t(e.Z,"languageCodeChanged",e.xa),(e.Z=t)&&Xt(t,"languageCodeChanged",e.xa)}function Cc(e,t){e.P=t,ja(e.a,r.a.SDK_VERSION?gr(r.a.SDK_VERSION,e.P):null)}function Lc(e,t){e.Y&&$t(e.Y,"frameworkChanged",e.wa),(e.Y=t)&&Xt(t,"frameworkChanged",e.wa)}function Pc(e){try{return r.a.app(e.m).auth()}catch(t){throw new Zr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.m+"'!")}}function Dc(e){e.B||e.w.b||(e.w.start(),$t(e,"tokenChanged",e.W),Xt(e,"tokenChanged",e.W))}function Rc(e){$t(e,"tokenChanged",e.W),e.w.stop()}function xc(e,t){e.ma=t,Ur(e,"_lat",t)}function Fc(e){for(var t=[],n=0;n<e.O.length;n++)t.push(e.O[n](e));return tt(t).then((function(){return e}))}function Mc(e){e.i&&!e.J&&(e.J=!0,tc(e.i,e))}function jc(e,t){Vr(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,tenantId:t.tenantId||null,metadata:new Tc(t.createdAt,t.lastLoginAt),providerData:[]}),e.a.b=e.tenantId}function Uc(){}function Vc(e){return Ze().then((function(){if(e.B)throw new Zr("app-deleted")}))}function Bc(e){return B(e.providerData,(function(e){return e.providerId}))}function qc(e,t){t&&(Hc(e,t.providerId),e.providerData.push(t))}function Hc(e,t){W(e.providerData,(function(e){return e.providerId==t}))}function Jc(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&Ur(e,t,n)}function Wc(e,t){e!=t&&(Vr(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,tenantId:t.tenantId,providerData:[]}),t.metadata?Ur(e,"metadata",function(e){return new Tc(e.a,e.b)}(t.metadata)):Ur(e,"metadata",new Tc),V(t.providerData,(function(t){qc(e,t)})),function(e,t){e.b=t.b,e.a=t.a,e.c=t.c}(e.b,t.b),Ur(e,"refreshToken",e.b.a))}function Kc(e){return e.G().then((function(t){var n=e.isAnonymous;return function(e,t){return ks(e.a,us,{idToken:t}).then(_(e.zc,e))}(e,t).then((function(){return n||Jc(e,"isAnonymous",!1),t}))}))}function Gc(e,t){t[Pa]&&e.ma!=t[Pa]&&(Ec(e.b,t),e.dispatchEvent(new kc("tokenChanged")),xc(e,t[Pa]),Jc(e,"refreshToken",e.b.a))}function Xc(e,t){return Kc(e).then((function(){if(H(Bc(e),t))return Fc(e).then((function(){throw new Zr("provider-already-linked")}))}))}function zc(e,t,n){return Br({user:e,credential:wo(t),additionalUserInfo:t=Ri(t),operationType:n})}function Yc(e,t){return Gc(e,t),e.reload().then((function(){return e}))}function $c(e,t,n,i,o){if(!Ir())return Qe(new Zr("operation-not-supported-in-this-environment"));if(e.h&&!o)return Qe(e.h);var a=Di(n.providerId),s=Nr(e.uid+":::"),u=null;(!_r()||hr())&&e.o&&n.isOAuthProvider&&(u=qs(e.o,e.l,e.m,t,n,null,s,r.a.SDK_VERSION||null,null,null,e.tenantId));var c=or(u,a&&a.sa,a&&a.ra);return i=i().then((function(){if(Qc(e),!o)return e.G().then((function(){}))})).then((function(){return oc(e.i,c,t,n,s,!!u,e.tenantId)})).then((function(){return new We((function(n,r){e.ja(t,null,new Zr("cancelled-popup-request"),e.g||null),e.f=n,e.v=r,e.g=s,e.c=uc(e.i,e,t,c,s)}))})).then((function(e){return c&&ir(c),e?Br(e):null})).s((function(e){throw c&&ir(c),e})),eh(e,i,o)}function Zc(e,t,n,r,i){if(!Ir())return Qe(new Zr("operation-not-supported-in-this-environment"));if(e.h&&!i)return Qe(e.h);var o=null,a=Nr(e.uid+":::");return r=r().then((function(){if(Qc(e),!i)return e.G().then((function(){}))})).then((function(){return e.ca=a,Fc(e)})).then((function(t){return e.da&&(t=(t=e.da).b.set(rh,e.A(),t.a)),t})).then((function(){return sc(e.i,t,n,a,e.tenantId)})).s((function(t){if(o=t,e.da)return ih(e.da);throw o})).then((function(){if(o)throw o})),eh(e,r,i)}function Qc(e){if(!e.i||!e.J){if(e.i&&!e.J)throw new Zr("internal-error");throw new Zr("auth-domain-config-required")}}function eh(e,t,n){var r=function(e,t,n){return e.h&&!n?(t.cancel(),Qe(e.h)):t.s((function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.h||e.dispatchEvent(new kc("userInvalidated")),e.h=t),t}))}(e,t,n);return e.I.push(r),r.ka((function(){J(e.I,r)})),r}function th(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName},n={};if(!(e.stsTokenManager&&e.stsTokenManager.accessToken&&e.stsTokenManager.expirationTime))return null;n[Pa]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null,n.expiresIn=(e.stsTokenManager.expirationTime-A())/1e3;var r=new Nc(t,n,e);return e.providerData&&V(e.providerData,(function(e){e&&qc(r,Br(e))})),e.redirectEventId&&(r.ca=e.redirectEventId),r}function nh(e){this.a=e,this.b=Eu()}lc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},lc.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.c,r=e.b,i=e.a&&"auth/web-storage-unsupported"==e.a.code,o=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?e.a?(vc(this,!0,null,e.a),Ze()):t.Ba(n,r)?function(e,t,n){n=n.Ba(t.c,t.b);var r=t.g,i=t.f,o=t.i,a=t.R(),s=!!t.c.match(/Redirect$/);n(r,i,a,o).then((function(t){vc(e,s,t,null)})).s((function(t){vc(e,s,null,t)}))}(this,e,t):Qe(new Zr("invalid-auth-event")):(vc(this,!1,null,null),Ze())}else Qe(new Zr("invalid-auth-event"))},lc.prototype.oa=function(){var e=this;return new We((function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new Zr("timeout");e.a&&e.a.cancel(),e.a=fn(ic.get()).then((function(){e.b||(e.g=!0,vc(e,!0,null,t))}))}(e))}))},mc.prototype.h=function(e,t){if(e){var n=e.c,r=e.b;e.a?(t.ja(e.c,null,e.a,e.b),Ze()):t.Ba(n,r)?function(e,t){var n=e.b,r=e.c;t.Ba(r,n)(e.g,e.f,e.R(),e.i).then((function(e){t.ja(r,e,null,n)})).s((function(e){t.ja(r,null,e,n)}))}(e,t):Qe(new Zr("invalid-auth-event"))}else Qe(new Zr("invalid-auth-event"))},bc.prototype.confirm=function(e){return e=yo(this.verificationId,e),this.a(e)},Ic.prototype.start=function(){this.a=this.c,function e(t,n){t.stop(),t.b=fn(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(t,n)).then((function(){return function(){var e=u.document,t=null;return Pr()||!e?Ze():new We((function(n){t=function(){Pr()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)})).s((function(n){throw e.removeEventListener("visibilitychange",t,!1),n}))}()})).then((function(){return t.h()})).then((function(){e(t,!0)})).s((function(n){t.i(n)&&e(t,!1)}))}(this,!0)},Ic.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Sc.prototype.A=function(){return{apiKey:this.f.c,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Sc.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?Qe(new Zr("user-token-expired")):e||!this.b||A()>this.c-3e4?this.a?function(e,t){return function(e,t){return new We((function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?Ua(e,e.l+"?key="+encodeURIComponent(e.c),(function(e){e?e.error?r(Os(e)):e.access_token&&e.refresh_token?n(e):r(new Zr("internal-error")):r(new Zr("network-request-failed"))}),"POST",Mn(t).toString(),e.g,e.u.get()):r(new Zr("internal-error"))}))}(e.f,t).then((function(t){return e.b=t.access_token,e.c=_c(t.expires_in),e.a=t.refresh_token,{accessToken:e.b,expirationTime:e.c,refreshToken:e.a}})).s((function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Ze(null):Ze({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Tc.prototype.A=function(){return{lastLoginAt:this.b,createdAt:this.a}},k(kc,Ft),k(Nc,sn),Nc.prototype.ua=function(e){this.ga=e,Ma(this.a,e)},Nc.prototype.ha=function(){return this.ga},Nc.prototype.Ca=function(){return G(this.P)},Nc.prototype.Ja=function(){this.w.b&&(this.w.stop(),this.w.start())},Ur(Nc.prototype,"providerId","firebase"),(t=Nc.prototype).reload=function(){var e=this;return eh(this,Vc(this).then((function(){return Kc(e).then((function(){return Fc(e)})).then(Uc)})))},t.dc=function(e){return this.G(e).then((function(e){return new wc(e)}))},t.G=function(e){var t=this;return eh(this,Vc(this).then((function(){return t.b.getToken(e)})).then((function(e){if(!e)throw new Zr("internal-error");return e.accessToken!=t.ma&&(xc(t,e.accessToken),t.dispatchEvent(new kc("tokenChanged"))),Jc(t,"refreshToken",e.refreshToken),e.accessToken})))},t.zc=function(e){if(!(e=e.users)||!e.length)throw new Zr("internal-error");jc(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt,tenantId:e.tenantId});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?B(e,(function(e){return new Ac(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)})):[]}(e),n=0;n<t.length;n++)qc(this,t[n]);Jc(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length))},t.Ac=function(e){return Mr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.hb(e)},t.hb=function(e){var t=this,n=null;return eh(this,e.f(this.a,this.uid).then((function(e){return Gc(t,e),n=zc(t,e,"reauthenticate"),t.h=null,t.reload()})).then((function(){return n})),!0)},t.rc=function(e){return Mr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.fb(e)},t.fb=function(e){var t=this,n=null;return eh(this,Xc(this,e.providerId).then((function(){return t.G()})).then((function(n){return e.b(t.a,n)})).then((function(e){return n=zc(t,e,"link"),Yc(t,e)})).then((function(){return n})))},t.sc=function(e,t){var n=this;return eh(this,Xc(this,"phone").then((function(){return yc(Pc(n),e,t,_(n.fb,n))})))},t.Bc=function(e,t){var n=this;return eh(this,Ze().then((function(){return yc(Pc(n),e,t,_(n.hb,n))})),!0)},t.rb=function(e){var t=this;return eh(this,this.G().then((function(n){return t.a.rb(n,e)})).then((function(e){return Gc(t,e),t.reload()})))},t.Sc=function(e){var t=this;return eh(this,this.G().then((function(n){return e.b(t.a,n)})).then((function(e){return Gc(t,e),t.reload()})))},t.sb=function(e){var t=this;return eh(this,this.G().then((function(n){return t.a.sb(n,e)})).then((function(e){return Gc(t,e),t.reload()})))},t.tb=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return Vc(this);var t=this;return eh(this,this.G().then((function(n){return t.a.tb(n,{displayName:e.displayName,photoUrl:e.photoURL})})).then((function(e){return Gc(t,e),Jc(t,"displayName",e.displayName||null),Jc(t,"photoURL",e.photoUrl||null),V(t.providerData,(function(e){"password"===e.providerId&&(Ur(e,"displayName",t.displayName),Ur(e,"photoURL",t.photoURL))})),Fc(t)})).then(Uc))},t.Qc=function(e){var t=this;return eh(this,Kc(this).then((function(n){return H(Bc(t),e)?function(e,t,n){return ks(e,os,{idToken:t,deleteProvider:n})}(t.a,n,[e]).then((function(e){var n={};return V(e.providerUserInfo||[],(function(e){n[e.providerId]=!0})),V(Bc(t),(function(e){n[e]||Hc(t,e)})),n[bo.PROVIDER_ID]||Ur(t,"phoneNumber",null),Fc(t)})):Fc(t).then((function(){throw new Zr("no-such-provider")}))})))},t.delete=function(){var e=this;return eh(this,this.G().then((function(t){return ks(e.a,is,{idToken:t})})).then((function(){e.dispatchEvent(new kc("userDeleted"))}))).then((function(){for(var t=0;t<e.I.length;t++)e.I[t].cancel("app-deleted");Oc(e,null),Lc(e,null),e.I=[],e.B=!0,Rc(e),Ur(e,"refreshToken",null),e.i&&nc(e.i,e)}))},t.xb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.ca||null)==t||"reauthViaRedirect"==e&&(this.ca||null)==t)},t.ja=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.Ba=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?_(this.Bb,this):"reauthViaPopup"==e&&t==(this.g||null)?_(this.Cb,this):"linkViaRedirect"==e&&(this.ca||null)==t?_(this.Bb,this):"reauthViaRedirect"==e&&(this.ca||null)==t?_(this.Cb,this):null},t.tc=function(e){var t=this;return $c(this,"linkViaPopup",e,(function(){return Xc(t,e.providerId).then((function(){return Fc(t)}))}),!1)},t.Cc=function(e){return $c(this,"reauthViaPopup",e,(function(){return Ze()}),!0)},t.uc=function(e){var t=this;return Zc(this,"linkViaRedirect",e,(function(){return Xc(t,e.providerId)}),!1)},t.Dc=function(e){return Zc(this,"reauthViaRedirect",e,(function(){return Ze()}),!0)},t.Bb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return eh(this,this.G().then((function(n){return $a(i.a,{requestUri:e,postBody:r,sessionId:t,idToken:n})})).then((function(e){return o=zc(i,e,"link"),Yc(i,e)})).then((function(){return o})))},t.Cb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return eh(this,Ze().then((function(){return Wi(Za(i.a,{requestUri:e,sessionId:t,postBody:r,tenantId:n}),i.uid)})).then((function(e){return o=zc(i,e,"reauthenticate"),Gc(i,e),i.h=null,i.reload()})).then((function(){return o})),!0)},t.jb=function(e){var t=this,n=null;return eh(this,this.G().then((function(t){return n=t,void 0===e||z(e)?{}:Ii(new li(e))})).then((function(e){return t.a.jb(n,e)})).then((function(e){if(t.email!=e)return t.reload()})).then((function(){})))},t.toJSON=function(){return this.A()},t.A=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.A(),redirectEventId:this.ca||null};return this.metadata&&Z(e,this.metadata.A()),V(this.providerData,(function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))})),e};var rh={name:"redirectUser",C:"session"};function ih(e){return Au(e.b,rh,e.a)}function oh(e){this.a=e,this.b=Eu(),this.c=null,this.f=function(e){var t=uh("local"),n=uh("session"),r=uh("none");return function(e,t,n){var r=Tu(t,n),i=_u(e,t.C);return e.get(t,n).then((function(o){var a=null;try{a=kr(u.localStorage.getItem(r))}catch(e){}if(a&&!o)return u.localStorage.removeItem(r),e.set(t,a,n);a&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(e.b,t,e.a).then((function(){return e.b.get(n,e.a)})).then((function(i){return i?n:e.b.get(r,e.a).then((function(n){return n?r:e.b.get(t,e.a).then((function(n){return n?t:e.b.get(sh,e.a).then((function(e){return e?uh(e):t}))}))}))})).then((function(t){return e.c=t,ah(e,t.C)})).s((function(){e.c||(e.c=t)}))}(this),this.b.addListener(uh("local"),this.a,_(this.g,this))}function ah(e,t){var n,r=[];for(n in Iu)Iu[n]!==t&&r.push(Au(e.b,uh(Iu[n]),e.a));return r.push(Au(e.b,sh,e.a)),function(e){return new We((function(t,n){var r=e.length,i=[];if(r)for(var o=function(e,n){r--,i[e]=n,0==r&&t(i)},a=function(e){n(e)},s=0;s<e.length;s++)et(e[s],T(o,s),a);else t(i)}))}(r)}oh.prototype.g=function(){var e=this,t=uh("local");fh(this,(function(){return Ze().then((function(){return e.c&&"local"!=e.c.C?e.b.get(t,e.a):null})).then((function(n){if(n)return ah(e,"local").then((function(){e.c=t}))}))}))};var sh={name:"persistence",C:"session"};function uh(e){return{name:"authUser",C:e}}function ch(e,t){return fh(e,(function(){return e.b.set(e.c,t.A(),e.a)}))}function hh(e){return fh(e,(function(){return Au(e.b,e.c,e.a)}))}function lh(e,t){return fh(e,(function(){return e.b.get(e.c,e.a).then((function(e){return e&&t&&(e.authDomain=t),th(e||{})}))}))}function fh(e,t){return e.f=e.f.then(t,t),e.f}function dh(e){if(this.l=!1,Ur(this,"settings",new gc),Ur(this,"app",e),!Ih(this).options||!Ih(this).options.apiKey)throw new Zr("invalid-api-key");e=r.a.SDK_VERSION?gr(r.a.SDK_VERSION):null,this.b=new Ca(Ih(this).options&&Ih(this).options.apiKey,Oi(ki),e),this.O=[],this.m=[],this.J=[],this.Ub=r.a.INTERNAL.createSubscribe(_(this.oc,this)),this.W=void 0,this.Vb=r.a.INTERNAL.createSubscribe(_(this.pc,this)),yh(this,null),this.h=new oh(Ih(this).options.apiKey+":"+Ih(this).name),this.w=new nh(Ih(this).options.apiKey+":"+Ih(this).name),this.Y=Th(this,function(e){var t=Ih(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(rh,e.a).then((function(e){return e&&t&&(e.authDomain=t),th(e||{})}))}(e.w,Ih(e).options.authDomain).then((function(t){return(e.B=t)&&(t.da=e.w),ih(e.w)}));return Th(e,t)}(e).then((function(){return lh(e.h,t)})).then((function(t){return t?(t.da=e.w,e.B&&(e.B.ca||null)==(t.ca||null)?t:t.reload().then((function(){return ch(e.h,t).then((function(){return t}))})).s((function(n){return"auth/network-request-failed"==n.code?t:hh(e.h)}))):null})).then((function(t){yh(e,t||null)}));return Th(e,n)}(this)),this.i=Th(this,function(e){return e.Y.then((function(){return gh(e)})).s((function(){})).then((function(){if(!e.l)return e.ma()})).s((function(){})).then((function(){if(!e.l){e.ga=!0;var t=e.h;t.b.addListener(uh("local"),t.a,e.ma)}}))}(this)),this.ga=!1,this.ma=_(this.Nc,this),this.ub=_(this.aa,this),this.wa=_(this.bc,this),this.xa=_(this.mc,this),this.Ja=_(this.nc,this),this.a=null,function(e){var t=Ih(e).options.authDomain,n=Ih(e).options.apiKey;t&&Ir()&&(e.Tb=e.Y.then((function(){if(!e.l){if(e.a=hc(t,n,Ih(e).name),tc(e.a,e),Sh(e)&&Mc(Sh(e)),e.B){Mc(e.B);var r=e.B;r.ua(e.ha()),Oc(r,e),Cc(r=e.B,e.I),Lc(r,e),e.B=null}return e.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=_(this.delete,this),this.INTERNAL.logFramework=_(this.vc,this),this.o=0,sn.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.ha()},set:function(e){this.ua(e)},enumerable:!1}),e.Z=null,Object.defineProperty(e,"ti",{get:function(){return this.R()},set:function(e){this.nb(e)},enumerable:!1}),e.P=null}(this),this.I=[]}function ph(e){Ft.call(this,"languageCodeChanged"),this.g=e}function vh(e){Ft.call(this,"frameworkChanged"),this.c=e}function mh(e){return e.Tb||Qe(new Zr("auth-domain-config-required"))}function gh(e){if(!Ir())return Qe(new Zr("operation-not-supported-in-this-environment"));var t=mh(e).then((function(){return e.a.oa()})).then((function(e){return e?Br(e):null}));return Th(e,t)}function bh(e,t){var n={};return n.apiKey=Ih(e).options.apiKey,n.authDomain=Ih(e).options.authDomain,n.appName=Ih(e).name,e.Y.then((function(){return function(e,t,n,r){var i=new Nc(e,t);return n&&(i.da=n),r&&Cc(i,r),i.reload().then((function(){return i}))}(n,t,e.w,e.Ca())})).then((function(t){return Sh(e)&&t.uid==Sh(e).uid?(Wc(Sh(e),t),e.aa(t)):(yh(e,t),Mc(t),e.aa(t))})).then((function(){_h(e)}))}function yh(e,t){Sh(e)&&(function(e,t){W(e.O,(function(e){return e==t}))}(Sh(e),e.ub),$t(Sh(e),"tokenChanged",e.wa),$t(Sh(e),"userDeleted",e.xa),$t(Sh(e),"userInvalidated",e.Ja),Rc(Sh(e))),t&&(t.O.push(e.ub),Xt(t,"tokenChanged",e.wa),Xt(t,"userDeleted",e.xa),Xt(t,"userInvalidated",e.Ja),0<e.o&&Dc(t)),Ur(e,"currentUser",t),t&&(t.ua(e.ha()),Oc(t,e),Cc(t,e.I),Lc(t,e))}function wh(e,t){var n=null,r=null;return Th(e,t.then((function(t){return n=wo(t),r=Ri(t),bh(e,t)})).then((function(){return Br({user:Sh(e),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function Ih(e){return e.app}function Sh(e){return e.currentUser}function Eh(e){return Sh(e)&&Sh(e)._lat||null}function _h(e){if(e.ga){for(var t=0;t<e.m.length;t++)e.m[t]&&e.m[t](Eh(e));if(e.W!==e.getUid()&&e.J.length)for(e.W=e.getUid(),t=0;t<e.J.length;t++)e.J[t]&&e.J[t](Eh(e))}}function Th(e,t){return e.O.push(t),t.ka((function(){J(e.O,t)})),t}function Ah(){}function kh(){this.a={},this.b=1e12}oh.prototype.mb=function(e){var t=null,n=this;return function(e){var t=new Zr("invalid-persistence-type"),n=new Zr("unsupported-persistence-type");e:{for(r in Iu)if(Iu[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(fr()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;default:if(!wr()&&"none"!==e)throw n}}(e),fh(this,(function(){return e!=n.c.C?n.b.get(n.c,n.a).then((function(r){return t=r,ah(n,e)})).then((function(){if(n.c=uh(e),t)return n.b.set(n.c,t,n.a)})):Ze()}))},k(dh,sn),k(ph,Ft),k(vh,Ft),(t=dh.prototype).mb=function(e){return Th(this,e=this.h.mb(e))},t.ua=function(e){this.Z===e||this.l||(this.Z=e,Ma(this.b,this.Z),this.dispatchEvent(new ph(this.ha())))},t.ha=function(){return this.Z},t.Tc=function(){var e=u.navigator;this.ua(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},t.vc=function(e){this.I.push(e),ja(this.b,r.a.SDK_VERSION?gr(r.a.SDK_VERSION,this.I):null),this.dispatchEvent(new vh(this.I))},t.Ca=function(){return G(this.I)},t.nb=function(e){this.P===e||this.l||(this.P=e,this.b.b=this.P)},t.R=function(){return this.P},t.toJSON=function(){return{apiKey:Ih(this).options.apiKey,authDomain:Ih(this).options.authDomain,appName:Ih(this).name,currentUser:Sh(this)&&Sh(this).A()}},t.xb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},t.ja=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.Ba=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?_(this.ac,this):null},t.ac=function(e,t,n,r){var i=this;e={requestUri:e,postBody:r,sessionId:t,tenantId:n},this.c&&(this.c.cancel(),this.c=null);var o=null,a=null,s=Ya(i.b,e).then((function(e){return o=wo(e),a=Ri(e),e}));return Th(this,e=i.Y.then((function(){return s})).then((function(e){return bh(i,e)})).then((function(){return Br({user:Sh(i),credential:o,additionalUserInfo:a,operationType:"signIn"})})))},t.Lc=function(e){if(!Ir())return Qe(new Zr("operation-not-supported-in-this-environment"));var t=this,n=Di(e.providerId),i=Nr(),o=null;(!_r()||hr())&&Ih(this).options.authDomain&&e.isOAuthProvider&&(o=qs(Ih(this).options.authDomain,Ih(this).options.apiKey,Ih(this).name,"signInViaPopup",e,null,i,r.a.SDK_VERSION||null,null,null,this.R()));var a=or(o,n&&n.sa,n&&n.ra);return Th(this,n=mh(this).then((function(n){return oc(n,a,"signInViaPopup",e,i,!!o,t.R())})).then((function(){return new We((function(e,n){t.ja("signInViaPopup",null,new Zr("cancelled-popup-request"),t.g),t.f=e,t.v=n,t.g=i,t.c=uc(t.a,t,"signInViaPopup",a,i)}))})).then((function(e){return a&&ir(a),e?Br(e):null})).s((function(e){throw a&&ir(a),e})))},t.Mc=function(e){if(!Ir())return Qe(new Zr("operation-not-supported-in-this-environment"));var t=this;return Th(this,mh(this).then((function(){return function(e){return fh(e,(function(){return e.b.set(sh,e.c.C,e.a)}))}(t.h)})).then((function(){return sc(t.a,"signInViaRedirect",e,void 0,t.R())})))},t.oa=function(){var e=this;return gh(this).then((function(t){return e.a&&dc(e.a.b),t})).s((function(t){throw e.a&&dc(e.a.b),t}))},t.Rc=function(e){if(!e)return Qe(new Zr("null-user"));if(this.P!=e.tenantId)return Qe(new Zr("tenant-id-mismatch"));var t=this,n={};n.apiKey=Ih(this).options.apiKey,n.authDomain=Ih(this).options.authDomain,n.appName=Ih(this).name;var r=function(e,t,n,r){t=t||{apiKey:e.l,authDomain:e.o,appName:e.m};var i=e.b,o={};return o[Pa]=i.b,o.refreshToken=i.a,o.expiresIn=(i.c-A())/1e3,t=new Nc(t,o),n&&(t.da=n),r&&Cc(t,r),Wc(t,e),t}(e,n,t.w,t.Ca());return Th(this,this.i.then((function(){if(Ih(t).options.apiKey!=e.l)return r.reload()})).then((function(){return Sh(t)&&e.uid==Sh(t).uid?(Wc(Sh(t),e),t.aa(e)):(yh(t,r),Mc(r),t.aa(r))})).then((function(){_h(t)})))},t.pb=function(){var e=this;return Th(this,this.i.then((function(){return e.a&&dc(e.a.b),Sh(e)?(yh(e,null),hh(e.h).then((function(){_h(e)}))):Ze()})))},t.Nc=function(){var e=this;return lh(this.h,Ih(this).options.authDomain).then((function(t){if(!e.l){var n;if(n=Sh(e)&&t){n=Sh(e).uid;var r=t.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Wc(Sh(e),t),Sh(e).G();(Sh(e)||t)&&(yh(e,t),t&&(Mc(t),t.da=e.w),e.a&&tc(e.a,e),_h(e))}}))},t.aa=function(e){return ch(this.h,e)},t.bc=function(){_h(this),this.aa(Sh(this))},t.mc=function(){this.pb()},t.nc=function(){this.pb()},t.oc=function(e){var t=this;this.addAuthTokenListener((function(){e.next(Sh(t))}))},t.pc=function(e){var t=this;!function(e,t){e.J.push(t),Th(e,e.i.then((function(){!e.l&&H(e.J,t)&&e.W!==e.getUid()&&(e.W=e.getUid(),t(Eh(e)))})))}(this,(function(){e.next(Sh(t))}))},t.xc=function(e,t,n){var r=this;return this.ga&&Promise.resolve().then((function(){b(e)?e(Sh(r)):b(e.next)&&e.next(Sh(r))})),this.Ub(e,t,n)},t.wc=function(e,t,n){var r=this;return this.ga&&Promise.resolve().then((function(){r.W=r.getUid(),b(e)?e(Sh(r)):b(e.next)&&e.next(Sh(r))})),this.Vb(e,t,n)},t.cc=function(e){var t=this;return Th(this,this.i.then((function(){return Sh(t)?Sh(t).G(e).then((function(e){return{accessToken:e}})):null})))},t.Hc=function(e){var t=this;return this.i.then((function(){return wh(t,ks(t.b,Ss,{token:e}))})).then((function(e){var n=e.user;return Jc(n,"isAnonymous",!1),t.aa(n),e}))},t.Ic=function(e,t){var n=this;return this.i.then((function(){return wh(n,ks(n.b,Es,{email:e,password:t}))}))},t.Xb=function(e,t){var n=this;return this.i.then((function(){return wh(n,ks(n.b,ns,{email:e,password:t}))}))},t.Sa=function(e){var t=this;return this.i.then((function(){return wh(t,e.na(t.b))}))},t.Gc=function(e){return Mr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Sa(e)},t.ob=function(){var e=this;return this.i.then((function(){var t=Sh(e);if(t&&t.isAnonymous){var n=Br({providerId:null,isNewUser:!1});return Br({user:t,credential:null,additionalUserInfo:n,operationType:"signIn"})}return wh(e,e.b.ob()).then((function(t){var n=t.user;return Jc(n,"isAnonymous",!0),e.aa(n),t}))}))},t.getUid=function(){return Sh(this)&&Sh(this).uid||null},t.Wb=function(e){this.addAuthTokenListener(e),this.o++,0<this.o&&Sh(this)&&Dc(Sh(this))},t.Ec=function(e){var t=this;V(this.m,(function(n){n==e&&t.o--})),0>this.o&&(this.o=0),0==this.o&&Sh(this)&&Rc(Sh(this)),this.removeAuthTokenListener(e)},t.addAuthTokenListener=function(e){var t=this;this.m.push(e),Th(this,this.i.then((function(){t.l||H(t.m,e)&&e(Eh(t))})))},t.removeAuthTokenListener=function(e){W(this.m,(function(t){return t==e}))},t.delete=function(){this.l=!0;for(var e=0;e<this.O.length;e++)this.O[e].cancel("app-deleted");return this.O=[],this.h&&(e=this.h).b.removeListener(uh("local"),e.a,this.ma),this.a&&(nc(this.a,this),dc(this.a.b)),Promise.resolve()},t.$b=function(e){return Th(this,function(e,t){return ks(e,rs,{identifier:t,continueUri:Sr()?tr():"http://localhost"}).then((function(e){return e.signinMethods||[]}))}(this.b,e))},t.qc=function(e){return!!po(e)},t.lb=function(e,t){var n=this;return Th(this,Ze().then((function(){var e=new li(t);if(!e.c)throw new Zr("argument-error",pi+" must be true when sending sign in link to email");return Ii(e)})).then((function(t){return n.b.lb(e,t)})).then((function(){})))},t.Uc=function(e){return this.Ma(e).then((function(e){return e.data.email}))},t.ab=function(e,t){return Th(this,this.b.ab(e,t).then((function(){})))},t.Ma=function(e){return Th(this,this.b.Ma(e).then((function(e){return new Hr(e)})))},t.Ya=function(e){return Th(this,this.b.Ya(e).then((function(){})))},t.kb=function(e,t){var n=this;return Th(this,Ze().then((function(){return void 0===t||z(t)?{}:Ii(new li(t))})).then((function(t){return n.b.kb(e,t)})).then((function(){})))},t.Kc=function(e,t){return Th(this,yc(this,e,t,_(this.Sa,this)))},t.Jc=function(e,t){var n=this;return Th(this,Ze().then((function(){var r=t||tr(),i=fo(e,r);if(!(r=po(r)))throw new Zr("argument-error","Invalid email link!");if(r.tenantId!==n.R())throw new Zr("tenant-id-mismatch");return n.Sa(i)})))},Ah.prototype.render=function(){},Ah.prototype.reset=function(){},Ah.prototype.getResponse=function(){},Ah.prototype.execute=function(){};var Nh=null;function Oh(e,t){return(t=Ch(t))&&e.a[t]||null}function Ch(e){return(e=void 0===e?1e12:e)?e.toString():null}function Lh(e,t){this.g=!1,this.c=t,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=Jn(e);var n=this;this.i=function(){n.execute()},this.h?this.execute():Xt(this.f,"click",this.i)}function Ph(e){if(e.g)throw Error("reCAPTCHA mock was already deleted!")}function Dh(){}kh.prototype.render=function(e,t){return this.a[this.b.toString()]=new Lh(e,t),this.b++},kh.prototype.reset=function(e){var t=Oh(this,e);e=Ch(e),t&&e&&(t.delete(),delete this.a[e])},kh.prototype.getResponse=function(e){return(e=Oh(this,e))?e.getResponse():null},kh.prototype.execute=function(e){(e=Oh(this,e))&&e.execute()},Lh.prototype.getResponse=function(){return Ph(this),this.b},Lh.prototype.execute=function(){Ph(this);var e=this;this.a||(this.a=setTimeout((function(){e.b=function(){for(var e=50,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}();var t=e.c.callback,n=e.c["expired-callback"];if(t)try{t(e.b)}catch(e){}e.a=setTimeout((function(){if(e.a=null,e.b=null,n)try{n()}catch(e){}e.h&&e.execute()}),6e4)}),500))},Lh.prototype.delete=function(){Ph(this),this.g=!0,clearTimeout(this.a),this.a=null,$t(this.f,"click",this.i)},Dh.prototype.g=function(){return Nh||(Nh=new kh),Ze(Nh)},Dh.prototype.c=function(){};var Rh=null;function xh(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Fh=new Q(ne,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Mh=new Lr(3e4,6e4);xh.prototype.g=function(e){var t=this;return new We((function(n,r){var i=setTimeout((function(){r(new Zr("network-request-failed"))}),Mh.get());!u.grecaptcha||e!==t.f&&!t.b?(u[t.a]=function(){if(u.grecaptcha){t.f=e;var o=u.grecaptcha.render;u.grecaptcha.render=function(e,n){return e=o(e,n),t.b++,e},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new Zr("internal-error"));delete u[t.a]},Ze(Ea(ae(Fh,{onload:t.a,hl:e||""}))).s((function(){clearTimeout(i),r(new Zr("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},xh.prototype.c=function(){this.b--};var jh=null;function Uh(e,t,n,r,i,o,a){if(Ur(this,"type","recaptcha"),this.c=this.f=null,this.B=!1,this.u=t,this.g=null,a?(Rh||(Rh=new Dh),a=Rh):(jh||(jh=new xh),a=jh),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[qh])throw new Zr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Hh],!u.document)throw new Zr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Jn(t)||!this.i&&Jn(t).hasChildNodes())throw new Zr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Ca(e,o||null,i||null),this.v=r||function(){return null};var s=this;this.l=[];var c=this.a[Vh];this.a[Vh]=function(e){if(Jh(s,e),"function"==typeof c)c(e);else if("string"==typeof c){var t=yr(c,u);"function"==typeof t&&t(e)}};var h=this.a[Bh];this.a[Bh]=function(){if(Jh(s,null),"function"==typeof h)h();else if("string"==typeof h){var e=yr(h,u);"function"==typeof e&&e()}}}var Vh="callback",Bh="expired-callback",qh="sitekey",Hh="size";function Jh(e,t){for(var n=0;n<e.l.length;n++)try{e.l[n](t)}catch(e){}}function Wh(e,t){return e.h.push(t),t.ka((function(){J(e.h,t)})),t}function Kh(e){if(e.B)throw new Zr("internal-error","RecaptchaVerifier instance has been destroyed.")}function Gh(e,t,n){var i=!1;try{this.b=n||r.a.app()}catch(e){throw new Zr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new Zr("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().Ca()}catch(e){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(e){}a=r.a.SDK_VERSION?gr(r.a.SDK_VERSION,a):null,Uh.call(this,n,e,t,(function(){try{var e=o.b.auth().ha()}catch(t){e=null}return e}),a,Oi(ki),i)}function Xh(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<t.length;a++)if(t[a].optional)o=!0;else{if(o)throw new Zr("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=t.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=t[i].optional&&void 0===n[i],!t[i].N(n[i])&&!o){if(t=t[i],0>i||i>=zh.length)throw new Zr("internal-error","Argument validator received an unsupported number of arguments.");n=zh[i],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.M+".";break e}r=null}}if(r)throw new Zr("argument-error",e+" failed: "+r)}(t=Uh.prototype).Da=function(){var e=this;return this.f?this.f:this.f=Wh(this,Ze().then((function(){if(Sr()&&!lr())return ur();throw new Zr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return e.m.g(e.v())})).then((function(t){return e.g=t,ks(e.o,ds,{})})).then((function(t){e.a[qh]=t.recaptchaSiteKey})).s((function(t){throw e.f=null,t})))},t.render=function(){Kh(this);var e=this;return Wh(this,this.Da().then((function(){if(null===e.c){var t=e.u;if(!e.i){var n=Jn(t);t=function(e,t,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!Hn&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Ue(a.name),'"'),a.type){o.push(' type="',Ue(a.type),'"');var s={};Z(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=i.createElement(o),a&&(c(a)?o.className=a:m(a)?o.className=a.join(" "):Wn(o,a)),2<r.length&&Gn(i,o,r),o}("DIV"),n.appendChild(t)}e.c=e.g.render(t,e.a)}return e.c})))},t.verify=function(){Kh(this);var e=this;return Wh(this,this.render().then((function(t){return new We((function(n){var r=e.g.getResponse(t);if(r)n(r);else{var i=function(t){t&&(function(e,t){W(e.l,(function(e){return e==t}))}(e,i),n(t))};e.l.push(i),e.i&&e.g.execute(e.c)}}))})))},t.reset=function(){Kh(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Kh(this),this.B=!0,this.m.c();for(var e=0;e<this.h.length;e++)this.h[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){e=Jn(this.u);for(var t;t=e.firstChild;)e.removeChild(t)}},k(Gh,Uh);var zh="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Yh(e,t){return{name:e||"",M:"a valid string",optional:!!t,N:c}}function $h(e,t){return{name:e||"",M:"a boolean",optional:!!t,N:h}}function Zh(e,t){return{name:e||"",M:"a valid object",optional:!!t,N:y}}function Qh(e,t){return{name:e||"",M:"a function",optional:!!t,N:b}}function el(e,t){return{name:e||"",M:"null",optional:!!t,N:v}}function tl(e){return{name:e?e+"Credential":"credential",M:e?"a valid "+e+" credential":"a valid credential",optional:!1,N:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.na||!n)}}}function nl(){return{name:"applicationVerifier",M:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,N:function(e){return!!(e&&c(e.type)&&b(e.verify))}}}function rl(e,t,n,r){return{name:n||"",M:e.M+" or "+t.M,optional:!!r,N:function(n){return e.N(n)||t.N(n)}}}function il(e,t){for(var n in t){var r=t[n].name;e[r]=sl(r,e[n],t[n].j)}}function ol(e,t){for(var n in t){var r=t[n].name;r!==n&&Object.defineProperty(e,r,{get:T((function(e){return this[e]}),n),set:T((function(e,t,n,r){Xh(e,[n],[r],!0),this[t]=r}),r,n,t[n].Za),enumerable:!0})}}function al(e,t,n,r){e[t]=sl(t,n,r)}function sl(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return Xh(o,n,e),t.apply(this,e)}if(!n)return t;var i,o=function(e){return(e=e.split("."))[e.length-1]}(e);for(i in t)r[i]=t[i];for(i in t.prototype)r.prototype[i]=t.prototype[i];return r}il(dh.prototype,{Ya:{name:"applyActionCode",j:[Yh("code")]},Ma:{name:"checkActionCode",j:[Yh("code")]},ab:{name:"confirmPasswordReset",j:[Yh("code"),Yh("newPassword")]},Xb:{name:"createUserWithEmailAndPassword",j:[Yh("email"),Yh("password")]},$b:{name:"fetchSignInMethodsForEmail",j:[Yh("email")]},oa:{name:"getRedirectResult",j:[]},qc:{name:"isSignInWithEmailLink",j:[Yh("emailLink")]},wc:{name:"onAuthStateChanged",j:[rl(Zh(),Qh(),"nextOrObserver"),Qh("opt_error",!0),Qh("opt_completed",!0)]},xc:{name:"onIdTokenChanged",j:[rl(Zh(),Qh(),"nextOrObserver"),Qh("opt_error",!0),Qh("opt_completed",!0)]},kb:{name:"sendPasswordResetEmail",j:[Yh("email"),rl(Zh("opt_actionCodeSettings",!0),el(null,!0),"opt_actionCodeSettings",!0)]},lb:{name:"sendSignInLinkToEmail",j:[Yh("email"),Zh("actionCodeSettings")]},mb:{name:"setPersistence",j:[Yh("persistence")]},Gc:{name:"signInAndRetrieveDataWithCredential",j:[tl()]},ob:{name:"signInAnonymously",j:[]},Sa:{name:"signInWithCredential",j:[tl()]},Hc:{name:"signInWithCustomToken",j:[Yh("token")]},Ic:{name:"signInWithEmailAndPassword",j:[Yh("email"),Yh("password")]},Jc:{name:"signInWithEmailLink",j:[Yh("email"),Yh("emailLink",!0)]},Kc:{name:"signInWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},Lc:{name:"signInWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"signInWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Rc:{name:"updateCurrentUser",j:[rl({name:"user",M:"an instance of Firebase User",optional:!1,N:function(e){return!!(e&&e instanceof Nc)}},el(),"user")]},pb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Yh(null,!0)]},Tc:{name:"useDeviceLanguage",j:[]},Uc:{name:"verifyPasswordResetCode",j:[Yh("code")]}}),ol(dh.prototype,{lc:{name:"languageCode",Za:rl(Yh(),el(),"languageCode")},ti:{name:"tenantId",Za:rl(Yh(),el(),"tenantId")}}),dh.Persistence=Iu,dh.Persistence.LOCAL="local",dh.Persistence.SESSION="session",dh.Persistence.NONE="none",il(Nc.prototype,{delete:{name:"delete",j:[]},dc:{name:"getIdTokenResult",j:[$h("opt_forceRefresh",!0)]},G:{name:"getIdToken",j:[$h("opt_forceRefresh",!0)]},rc:{name:"linkAndRetrieveDataWithCredential",j:[tl()]},fb:{name:"linkWithCredential",j:[tl()]},sc:{name:"linkWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},tc:{name:"linkWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},uc:{name:"linkWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Ac:{name:"reauthenticateAndRetrieveDataWithCredential",j:[tl()]},hb:{name:"reauthenticateWithCredential",j:[tl()]},Bc:{name:"reauthenticateWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},Cc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},jb:{name:"sendEmailVerification",j:[rl(Zh("opt_actionCodeSettings",!0),el(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Yh(null,!0)]},Qc:{name:"unlink",j:[Yh("provider")]},rb:{name:"updateEmail",j:[Yh("email")]},sb:{name:"updatePassword",j:[Yh("password")]},Sc:{name:"updatePhoneNumber",j:[tl("phone")]},tb:{name:"updateProfile",j:[Zh("profile")]}}),il(kh.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),il(Ah.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),il(We.prototype,{ka:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),ol(gc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",Za:$h("appVerificationDisabledForTesting")}}),il(bc.prototype,{confirm:{name:"confirm",j:[Yh("verificationCode")]}}),al(Ji,"fromJSON",(function(e){e=c(e)?JSON.parse(e):e;for(var t,n=[$i,ho,mo,Xi],r=0;r<n.length;r++)if(t=n[r](e))return t;return null}),[rl(Yh(),Zh(),"json")]),al(lo,"credential",(function(e,t){return new co(e,t)}),[Yh("email"),Yh("password")]),il(co.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),il(to.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(to,"credential",no,[rl(Yh(),Zh(),"token")]),al(lo,"credentialWithLink",fo,[Yh("email"),Yh("emailLink")]),il(ro.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(ro,"credential",io,[rl(Yh(),Zh(),"token")]),il(oo.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(oo,"credential",ao,[rl(Yh(),rl(Zh(),el()),"idToken"),rl(Yh(),el(),"accessToken",!0)]),il(so.prototype,{Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(so,"credential",uo,[rl(Yh(),Zh(),"token"),Yh("secret",!0)]),il(eo.prototype,{ya:{name:"addScope",j:[Yh("scope")]},credential:{name:"credential",j:[rl(Yh(),rl(Zh(),el()),"optionsOrIdToken"),rl(Yh(),el(),"accessToken",!0)]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),il(zi.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),il(Ki.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),al(bo,"credential",yo,[Yh("verificationId"),Yh("verificationCode")]),il(bo.prototype,{Wa:{name:"verifyPhoneNumber",j:[Yh("phoneNumber"),nl()]}}),il(vo.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),il(Zr.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),il(No.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),il(ko.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),il(Gh.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),al(ni,"parseLink",hi,[Yh("link")]),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Jr,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:dh,AuthCredential:Ji,Error:Zr};al(e,"EmailAuthProvider",lo,[]),al(e,"FacebookAuthProvider",to,[]),al(e,"GithubAuthProvider",ro,[]),al(e,"GoogleAuthProvider",oo,[]),al(e,"TwitterAuthProvider",so,[]),al(e,"OAuthProvider",eo,[Yh("providerId")]),al(e,"SAMLAuthProvider",Qi,[Yh("providerId")]),al(e,"PhoneAuthProvider",bo,[{name:"auth",M:"an instance of Firebase Auth",optional:!0,N:function(e){return!!(e&&e instanceof dh)}}]),al(e,"RecaptchaVerifier",Gh,[rl(Yh(),{name:"",M:"an HTML element",optional:!1,N:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),Zh("recaptchaParameters",!0),{name:"app",M:"an instance of Firebase App",optional:!0,N:function(e){return!!(e&&e instanceof r.a.app.App)}}]),al(e,"ActionCodeURL",ni,[]),r.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(e){return new dh(e=e.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:e,instantiationMode:"LAZY",type:"PUBLIC"}),r.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(e){return{getUid:_((e=e.getProvider("auth").getImmediate()).getUid,e),getToken:_(e.cc,e),addAuthTokenListener:_(e.Wb,e),removeAuthTokenListener:_(e.Ec,e)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),r.a.registerVersion("@firebase/auth","0.13.4"),r.a.INTERNAL.extendNamespace({User:Nc})}()}).apply(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(4))},function(e,t,n){"use strict";var r=n(1),i=n.n(r);n(7),i.a.initializeApp({apiKey:"AIzaSyA1Qn9STy07hxJZQ27Q_2-dhz4aLvrUdEo",authDomain:"simple-piskel-clone-2791b.firebaseapp.com",databaseURL:"https://simple-piskel-clone-2791b.firebaseio.com",projectId:"simple-piskel-clone-2791b",storageBucket:"simple-piskel-clone-2791b.appspot.com",messagingSenderId:"749159447621",appId:"1:749159447621:web:1cbe62b3929549ad55f72c"});let o=function(){const e=localStorage.getItem("user");return e&&"null"!==e?JSON.parse(e):null}();const a=document.querySelector(".sign-in-block a");null!==o?(a.insertAdjacentHTML("afterend",`<span>Hello, ${o.displayName}!</span>`),a.remove()):a.addEventListener("click",e=>{e.preventDefault();const t=new i.a.auth.GoogleAuthProvider;t.addScope("https://www.googleapis.com/auth/contacts.readonly"),i.a.auth().languageCode="en",i.a.auth().signInWithPopup(t).then(e=>{o=e,localStorage.setItem("user",JSON.stringify(o)),a.insertAdjacentHTML("afterend",`<span>Hello, ${o.displayName}!</span>`),a.remove()})})},function(e,t,n){n(10),n(11),n(12),n(17),e.exports=n(13)},function(e,t){LZWEncoder=function(){var e,t,n,r,i,o,a,s,u,c,h,l,f={},d=-1,p=12,v=5003,m=p,g=1<<p,b=[],y=[],w=v,I=0,S=!1,E=0,_=0,T=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],A=[],k=f.LZWEncoder=function(i,o,a,s){e=i,t=o,n=a,r=Math.max(2,s)},N=function(e,t){A[l++]=e,l>=254&&P(t)},O=function(e){C(w),I=c+2,S=!0,x(c,e)},C=function(e){for(var t=0;t<e;++t)b[t]=-1},L=f.compress=function(e,t){var n,r,i,o,f,p,v;for(S=!1,s=D(a=u=e),h=1+(c=1<<e-1),I=c+2,l=0,o=R(),v=0,n=w;n<65536;n*=2)++v;v=8-v,C(p=w),x(c,t);e:for(;(i=R())!=d;)if(n=(i<<m)+o,b[r=i<<v^o]!=n){if(b[r]>=0){f=p-r,0===r&&(f=1);do{if((r-=f)<0&&(r+=p),b[r]==n){o=y[r];continue e}}while(b[r]>=0)}x(o,t),o=i,I<g?(y[r]=I++,b[r]=n):O(t)}else o=y[r];x(o,t),x(h,t)},P=(f.encode=function(n){n.writeByte(r),i=e*t,o=0,L(r+1,n),n.writeByte(0)},function(e){l>0&&(e.writeByte(l),e.writeBytes(A,0,l),l=0)}),D=function(e){return(1<<e)-1},R=function(){return 0===i?d:(--i,255&n[o++])},x=function(e,t){for(E&=T[_],_>0?E|=e<<_:E=e,_+=a;_>=8;)N(255&E,t),E>>=8,_-=8;if((I>s||S)&&(S?(s=D(a=u),S=!1):(++a,s=a==m?g:D(a))),e==h){for(;_>0;)N(255&E,t),E>>=8,_-=8;P(t)}};return k.apply(this,arguments),f}},function(e,t){NeuQuant=function(){var e,t,n,r,i,o={},a=256,s=499,u=491,c=487,h=503,l=3*h,f=a-1,d=4,p=100,v=16,m=1<<v,g=10,b=10,y=m>>b,w=m<<g-b,I=a>>3,S=6,E=1<<S,_=I*E,T=30,A=10,k=1<<A,N=8,O=1<<N,C=A+N,L=1<<C,P=[],D=[],R=[],x=[],F=o.NeuQuant=function(e,o,s){var u,c;for(t=e,n=o,r=s,i=new Array(a),u=0;u<a;u++)i[u]=new Array(4),(c=i[u])[0]=c[1]=c[2]=(u<<d+8)/a,R[u]=m/a,D[u]=0},M=function(){for(var e=[],t=new Array(a),n=0;n<a;n++)t[i[n][3]]=n;for(var r=0,o=0;o<a;o++){var s=t[o];e[r++]=i[s][0],e[r++]=i[s][1],e[r++]=i[s][2]}return e},j=function(){var e,t,n,r,o,s,u,c;for(u=0,c=0,e=0;e<a;e++){for(n=e,r=(o=i[e])[1],t=e+1;t<a;t++)(s=i[t])[1]<r&&(n=t,r=s[1]);if(s=i[n],e!=n&&(t=s[0],s[0]=o[0],o[0]=t,t=s[1],s[1]=o[1],o[1]=t,t=s[2],s[2]=o[2],o[2]=t,t=s[3],s[3]=o[3],o[3]=t),r!=u){for(P[u]=c+e>>1,t=u+1;t<r;t++)P[t]=e;u=r,c=e}}for(P[u]=c+f>>1,t=u+1;t<256;t++)P[t]=f},U=function(){var i,o,a,f,v,m,g,b,y,w,I,E,A,N;for(n<l&&(r=1),e=30+(r-1)/3,E=t,A=0,N=n,w=(I=n/(3*r))/p|0,b=k,(g=(m=_)>>S)<=1&&(g=0),i=0;i<g;i++)x[i]=b*((g*g-i*i)*O/(g*g));for(y=n<l?3:n%s!=0?3*s:n%u!=0?3*u:n%c!=0?3*c:3*h,i=0;i<I;)if(a=(255&E[A+0])<<d,f=(255&E[A+1])<<d,v=(255&E[A+2])<<d,o=H(a,f,v),q(b,o,a,f,v),0!==g&&B(g,o,a,f,v),(A+=y)>=N&&(A-=n),0===w&&(w=1),++i%w==0)for(b-=b/e,(g=(m-=m/T)>>S)<=1&&(g=0),o=0;o<g;o++)x[o]=b*((g*g-o*o)*O/(g*g))},V=(o.map=function(e,t,n){var r,o,s,u,c,h,l;for(c=1e3,l=-1,o=(r=P[t])-1;r<a||o>=0;)r<a&&((s=(h=i[r])[1]-t)>=c?r=a:(r++,s<0&&(s=-s),(u=h[0]-e)<0&&(u=-u),(s+=u)<c&&((u=h[2]-n)<0&&(u=-u),(s+=u)<c&&(c=s,l=h[3])))),o>=0&&((s=t-(h=i[o])[1])>=c?o=-1:(o--,s<0&&(s=-s),(u=h[0]-e)<0&&(u=-u),(s+=u)<c&&((u=h[2]-n)<0&&(u=-u),(s+=u)<c&&(c=s,l=h[3]))));return l},o.process=function(){return U(),V(),j(),M()},function(){var e;for(e=0;e<a;e++)i[e][0]>>=d,i[e][1]>>=d,i[e][2]>>=d,i[e][3]=e}),B=function(e,t,n,r,o){var s,u,c,h,l,f,d;for((c=t-e)<-1&&(c=-1),(h=t+e)>a&&(h=a),s=t+1,u=t-1,f=1;s<h||u>c;){if(l=x[f++],s<h){d=i[s++];try{d[0]-=l*(d[0]-n)/L,d[1]-=l*(d[1]-r)/L,d[2]-=l*(d[2]-o)/L}catch(e){}}if(u>c){d=i[u--];try{d[0]-=l*(d[0]-n)/L,d[1]-=l*(d[1]-r)/L,d[2]-=l*(d[2]-o)/L}catch(e){}}}},q=function(e,t,n,r,o){var a=i[t];a[0]-=e*(a[0]-n)/k,a[1]-=e*(a[1]-r)/k,a[2]-=e*(a[2]-o)/k},H=function(e,t,n){var r,o,s,u,c,h,l,f,p,m;for(p=f=~(1<<31),l=h=-1,r=0;r<a;r++)(o=(m=i[r])[0]-e)<0&&(o=-o),(s=m[1]-t)<0&&(s=-s),o+=s,(s=m[2]-n)<0&&(s=-s),(o+=s)<f&&(f=o,h=r),(u=o-(D[r]>>v-d))<p&&(p=u,l=r),c=R[r]>>b,R[r]-=c,D[r]+=c<<g;return R[h]+=y,D[h]-=w,l};return F.apply(this,arguments),o}},function(e,t){GIFEncoder=function(){for(var e=0,t={};e<256;e++)t[e]=String.fromCharCode(e);function n(){this.bin=[]}n.prototype.getData=function(){for(var e="",n=this.bin.length,r=0;r<n;r++)e+=t[this.bin[r]];return e},n.prototype.writeByte=function(e){this.bin.push(e)},n.prototype.writeUTFBytes=function(e){for(var t=e.length,n=0;n<t;n++)this.writeByte(e.charCodeAt(n))},n.prototype.writeBytes=function(e,t,n){for(var r=n||e.length,i=t||0;i<r;i++)this.writeByte(e[i])};var r,i,o,a,s,u,c,h,l,f={},d=null,p=-1,v=0,m=!1,g=[],b=7,y=-1,w=!1,I=!0,S=!1,E=10,_="Generated by jsgif (https://github.com/antimatter15/jsgif/)",T=(f.setDelay=function(e){v=Math.round(e/10)},f.setDispose=function(e){e>=0&&(y=e)},f.setRepeat=function(e){e>=0&&(p=e)},f.setTransparent=function(e){d=e},f.setComment=function(e){_=e},f.addFrame=function(e,t){if(null===e||!m||null===a)throw new Error("Please call start method before calling addFrame");var n=!0;try{t?e instanceof ImageData?(s=e.data,sizeset&&r==e.width&&i==e.height||A(e.width,e.height)):e instanceof Uint8ClampedArray?e.length==r*i*4?s=e:(console.log("Please set the correct size: ImageData length mismatch"),n=!1):(console.log("Please provide correct input"),n=!1):(s=e.getImageData(0,0,e.canvas.width,e.canvas.height).data,S||A(e.canvas.width,e.canvas.height)),O(),k(),I&&(D(),x(),p>=0&&R()),C(),""!==_&&L(),P(),I||x(),M(),I=!1}catch(e){n=!1}return n},f.download=function(e){if(null===a||0==w)console.log("Please call start method and add frames and call finish method before calling download");else{e=void 0!==e?e.endsWith(".gif")?e:e+".gif":"download.gif";var t=document.createElement("a");t.download=e,t.href=URL.createObjectURL(new Blob([new Uint8Array(a.bin)],{type:"image/gif"})),t.click()}},f.finish=function(){if(!m)return!1;var e=!0;m=!1;try{a.writeByte(59),w=!0}catch(t){e=!1}return e},function(){o=0,s=null,u=null,c=null,l=null,w=!1,I=!0}),A=(f.setFrameRate=function(e){15!=e&&(v=Math.round(100/e))},f.setQuality=function(e){e<1&&(e=1),E=e},f.setSize=function(e,t){m&&!I||((r=e)<1&&(r=320),(i=t)<1&&(i=240),S=!0)}),k=(f.start=function(){T();var e=!0;w=!1,a=new n;try{a.writeUTFBytes("GIF89a")}catch(t){e=!1}return m=e},f.cont=function(){return T(),w=!1,a=new n,m=!0},function(){var e=u.length,t=e/3;c=[];var n=new NeuQuant(u,e,E);l=n.process();for(var r=0,i=0;i<t;i++){var a=n.map(255&u[r++],255&u[r++],255&u[r++]);g[a]=!0,c[i]=a}u=null,h=8,b=7,null!==d&&(o=N(d))}),N=function(e){if(null===l)return-1;for(var t=(16711680&e)>>16,n=(65280&e)>>8,r=255&e,i=0,o=16777216,a=l.length,s=0;s<a;){var u=t-(255&l[s++]),c=n-(255&l[s++]),h=r-(255&l[s]),f=u*u+c*c+h*h,d=s/3;g[d]&&f<o&&(o=f,i=d),s++}return i},O=function(){var e=r,t=i;u=[];for(var n=s,o=0,a=0;a<t;a++)for(var c=0;c<e;c++){var h=a*e*4+4*c;u[o++]=n[h],u[o++]=n[h+1],u[o++]=n[h+2]}},C=function(){var e,t;a.writeByte(33),a.writeByte(249),a.writeByte(4),null===d?(e=0,t=0):(e=1,t=2),y>=0&&(t=7&y),t<<=2,a.writeByte(0|t|e),F(v),a.writeByte(o),a.writeByte(0)},L=function(){a.writeByte(33),a.writeByte(254),a.writeByte(_.length),a.writeUTFBytes(_),a.writeByte(0)},P=function(){a.writeByte(44),F(0),F(0),F(r),F(i),I?a.writeByte(0):a.writeByte(128|b)},D=function(){F(r),F(i),a.writeByte(240|b),a.writeByte(0),a.writeByte(0)},R=function(){a.writeByte(33),a.writeByte(255),a.writeByte(11),a.writeUTFBytes("NETSCAPE2.0"),a.writeByte(3),a.writeByte(1),F(p),a.writeByte(0)},x=function(){a.writeBytes(l);for(var e=768-l.length,t=0;t<e;t++)a.writeByte(0)},F=function(e){a.writeByte(255&e),a.writeByte(e>>8&255)},M=function(){new LZWEncoder(r,i,c,h).encode(a)};return f.stream=function(){return a},f.setProperties=function(e,t){m=e,I=t},f}},function(e,t,n){},,,,function(e,t,n){"use strict";n.r(t);const r=["e","E"],i=["b","B"],o=["r","R"],a=["y","Y"],s=["g","G"],u=["+"],c=["-"],h=["d","D"],l="window__item_selected",f=document.getElementById("canvas"),d=document.querySelectorAll("#tools .window__item:not(.disabled)"),p=document.querySelector("#dimension_switcher"),v=document.querySelectorAll(".window__item.toolkit"),m=document.querySelector("#primary-color"),g=document.querySelector("#secondary-color"),b=document.querySelector(".frames"),y=document.querySelector("#animation-preview .window__content"),w=document.querySelector("#animation-preview .animation-speed__range"),I=document.querySelector("#animation-preview .animation-speed__fps"),S=document.querySelector("#pen-unit .pen-width__range"),E=document.querySelector("#pen-unit .pen-width__value"),_=document.getElementById("export-btn"),T=f.getContext("2d");var A={loadPrimaryColor(){const e=localStorage.getItem("primary-color");if(e&&"null"!==e){const t=JSON.parse(e);return m.value=t,t}return m.value="#e58719","#e58719"},loadSecondaryColor(){const e=localStorage.getItem("secondary-color");if(e&&"null"!==e){const t=JSON.parse(e);return g.value=t,t}return g.value="#808080","#808080"},loadDimensionLen(){const e=localStorage.getItem("dimensionLen");let t;if(e&&"null"!==e)switch(t=JSON.parse(e),t){case"DIMENSION_SMALL":t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(l);break;case"DIMENSION_MEDIUM":t=64,document.querySelector('.window__item[dimension="DIMENSION_MEDIUM"]').classList.add(l);break;case"DIMENSION_LARGE":t=128,document.querySelector('.window__item[dimension="DIMENSION_LARGE"]').classList.add(l);break;default:t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(l)}else t=32,document.querySelector('.window__item[dimension="DIMENSION_SMALL"]').classList.add(l);return t},loadCurSessionFrames(){const e=localStorage.getItem("curSessionFrames");return!(!e||"null"===e)&&JSON.parse(e)},loadCurSessionFramesJson(){const e=localStorage.getItem("curSessionFramesJson");return!(!e||"null"===e)&&JSON.parse(e)},async loadExampleFrames(e){try{const t=await fetch(`./dist/assets/${e}`);return await t.json()}catch(e){return[].push(f.toDataURL("image/png"))}},loadExampleName(){const e=sessionStorage.getItem("exampleName");return e&&"null"!==e?(sessionStorage.clear(),JSON.parse(e)):null},saveAll(e,t,n,r){switch(e){case 32:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_SMALL"));break;case 64:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_MEDIUM"));break;case 128:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_LARGE"));break;default:localStorage.setItem("dimensionLen",JSON.stringify("DIMENSION_SMALL"))}localStorage.setItem("curSessionFrames",JSON.stringify(r.curSessionFramesImage)),localStorage.setItem("curSessionFramesJson",JSON.stringify(r.curSessionFramesJson)),localStorage.setItem("primary-color",JSON.stringify(t)),localStorage.setItem("secondary-color",JSON.stringify(n))}},k={curSessionFramesImage:[],curSessionFramesJson:[],curFrameIndex:0,async initialLoad(e){const t=A.loadExampleName();if(t)this.curSessionFramesJson=await A.loadExampleFrames(t),e.executeForAllFramesJson(t=>{e.drawFrameOnCanvasJson(t),this.curSessionFramesImage.push(f.toDataURL("image/png"))}),e.drawFrameOnCanvasJson();else{const t=A.loadCurSessionFrames();t?this.curSessionFramesImage=t:this.curSessionFramesImage.push(f.toDataURL("image/png"));const n=A.loadCurSessionFramesJson();n?this.curSessionFramesJson=n:this.curSessionFramesJson.push(e.convertCanvasToJson())}}};function N(e,t,n,r){let i,o;for(i=0;i<n&&!(i>t);i+=r);for(o=0;o<n&&!(o>e);o+=r);return{rightX:o,bottomY:i}}function O(e,t,n){return function(e){let t=e[0].toString(16),n=e[1].toString(16),r=e[2].toString(16);return 1===t.length&&(t=`0${t}`),1===n.length&&(n=`0${n}`),1===r.length&&(r=`0${r}`),`#${t}${n}${r}`}(e.getImageData(t,n,1,1).data)}f.width=512,f.height=512;const C={primaryColor:"#e58719",secondaryColor:"#808080",dimensionLen:32,selectedTool:"pencil",initialLoad(){this.dimensionLen=A.loadDimensionLen(),this.primaryColor=A.loadPrimaryColor(),this.secondaryColor=A.loadSecondaryColor(),T.fillStyle="#808080",T.fillRect(0,0,512,512)},drawClearFrameInCanvas(){T.fillStyle="#808080",T.fillRect(0,0,512,512)},colorPixel(e,t,n,r=1){const i=512/C.dimensionLen;let{rightX:o,bottomY:a}=N(e,t,f.width,i);r>2&&(o+=i,a+=i),T.fillStyle=n,T.fillRect(o-r*i,a-r*i,r*i,r*i)},convertCanvasToJson(){const e=512/this.dimensionLen,t=[];for(let n=0,r=e/2;n<this.dimensionLen;n+=1,r+=e){const n=[];for(let t=0,i=e/2;t<this.dimensionLen;t+=1,i+=e)n.push(O(T,i,r));t.push(n)}return t},drawJsonOnCanvas(e,t){const n=512/this.dimensionLen;for(let r=0,i=n/2;r<this.dimensionLen;r+=1,i+=n)for(let o=0,a=n/2;o<this.dimensionLen;o+=1,a+=n)this.colorPixel(a,i,e[t][r][o])},drawFrameOnCanvasJson(e=k.curFrameIndex){this.drawJsonOnCanvas(k.curSessionFramesJson,e)},executeForAllFramesJson(e){const t=k.curSessionFramesJson.length;for(let n=k.curFrameIndex;n<t;n+=1)e(n);for(let t=0;t<k.curFrameIndex;t+=1)e(t)}};var L=C;let P=null;const D={addCssClassCurrentToFrame(e){b.children[e].classList.add("current-frame")},removeCssClassCurrentFromFrame(e){b.children[e].classList.remove("current-frame")},drawFrameInFrameList(e){k.curSessionFramesImage[e]=f.toDataURL("image/png"),k.curSessionFramesJson[e]=L.convertCanvasToJson(),b.children[e].style=`background-image: url("${k.curSessionFramesImage[e]}")`},drawCurFrameInFrameList(){this.drawFrameInFrameList(k.curFrameIndex)},drawFramesSerialNumbersInFrameList(){for(let e=0;e<b.children.length;e+=1)b.children[e].querySelector(".frames__item-num").innerText=e+1},initFrameList(){for(let e=0;e<k.curSessionFramesImage.length;e+=1)b.insertAdjacentHTML("beforeend",'<li class="frames__item" draggable="true"><div class="frames__item-num">1</div><div class="frames__btn-del">-</div><div class="frames__btn-add">+</div><div class="frames__btn-copy">D</div></li>'),b.lastChild.style=`background-image: url("${k.curSessionFramesImage[e]}")`;this.drawFramesSerialNumbersInFrameList(),this.addCssClassCurrentToFrame(0)},addFrameToFrameList(e){b.children[e].insertAdjacentHTML("afterend",'<li class="frames__item" draggable="true"><div class="frames__item-num">1</div><div class="frames__btn-del">-</div><div class="frames__btn-add">+</div><div class="frames__btn-copy">D</div></li>')},removeFrameFromFrameList(e){b.children[e].remove()},getChildIndexInFrameList(e){for(let t=0;t<b.children.length;t+=1)if(b.children[t]===e)return t;return-1}};setInterval(()=>{D.drawCurFrameInFrameList()},1e3),b.addEventListener("dragstart",e=>{P=D.getChildIndexInFrameList(e.target)}),b.addEventListener("dragenter",e=>{e.target.classList.add("dragover")}),b.addEventListener("dragover",e=>(e.preventDefault(),e.dataTransfer.dropEffect="move",!1)),b.addEventListener("dragleave",e=>{e.target.classList.remove("dragover")}),b.addEventListener("drop",e=>{e.stopImmediatePropagation();const t=D.getChildIndexInFrameList(e.target);if(P!==t){const e=b.children;P<t?b.insertBefore(e[P],e[t].nextSibling):b.insertBefore(e[P],e[t]),k.curFrameIndex=D.getChildIndexInFrameList(b.querySelector(".current-frame"));const n=k.curSessionFramesImage.splice(P,1)[0],r=k.curSessionFramesJson.splice(P,1)[0];k.curSessionFramesImage.splice(t,0,n),k.curSessionFramesJson.splice(t,0,r),D.drawFramesSerialNumbersInFrameList()}return!1}),b.addEventListener("dragend",()=>{for(let e=0;e<b.children.length;e+=1)b.children[e].classList.remove("dragover")});var R=D;const x={curPreviewFrameIndex:-1,previewRefreshPeriod:1e3,isPreviewRunning:!1,previewDrawInterval:null,drawNextFrameInPreview(){this.curPreviewFrameIndex+=1,k.curSessionFramesImage.length<=this.curPreviewFrameIndex&&(this.curPreviewFrameIndex=0),y.style=`background-image: url("${k.curSessionFramesImage[this.curPreviewFrameIndex]}")`}};w.addEventListener("input",()=>{I.innerText=w.value}),w.addEventListener("change",()=>{const e=parseInt(w.value,10);0===e?(x.isPreviewRunning=!1,x.previewRefreshPeriod=1e3):(x.isPreviewRunning=!0,x.previewRefreshPeriod=1e3/e),clearInterval(x.previewDrawInterval),x.previewDrawInterval=setInterval(()=>{x.isPreviewRunning&&x.drawNextFrameInPreview()},x.previewRefreshPeriod)}),y.addEventListener("click",()=>{y.requestFullscreen()}),y.onfullscreenchange=function(){y.classList.toggle("fullscreen")};var F=x;!async function(){L.initialLoad(),await k.initialLoad(L),L.drawFrameOnCanvasJson(),R.initFrameList(),F.drawNextFrameInPreview()}(),window.addEventListener("beforeunload",()=>{R.drawCurFrameInFrameList(),A.saveAll(L.dimensionLen,L.primaryColor,L.secondaryColor,k)}),_.addEventListener("click",()=>{const e=new GIFEncoder;e.setRepeat(0),e.setDelay(F.previewRefreshPeriod),e.start(),L.executeForAllFramesJson(t=>{L.drawFrameOnCanvasJson(t),e.addFrame(T)},512),L.drawFrameOnCanvasJson(),e.finish(),e.download("download.gif")});let M,j,U,V=!1,B=!1;const q={pencilUnit:1,eraserUnit:2,drawUnit:1,pencilFunc(e,t,n,r){!function(e,t,n,r,i){const o=Math.abs(n-e),a=Math.abs(r-t),s=e<n?1:-1,u=t<r?1:-1;let c=e,h=t,l=o-a;for(i(n,r);c!==n||h!==r;){i(c,h);const e=2*l;e>-a&&(l-=a,c+=s),e<o&&(l+=o,h+=u)}}(j,U,e,t,(e,t)=>{L.colorPixel(e,t,n,r)})},fillBucketFunc(e,t){const n=512/L.dimensionLen,{rightX:r,bottomY:i}=N(e,t,f.width,n),o=O(T,r-n/2,i-n/2);!function(e,t,n,r,i){const o=[];for(o.push({x:e,y:t});0!==o.length;){const{x:e,y:t}=o.pop();r(e,t),i(e+n,t)&&o.push({x:e+n,y:t}),i(e-n,t)&&o.push({x:e-n,y:t}),i(e,t+n)&&o.push({x:e,y:t+n}),i(e,t-n)&&o.push({x:e,y:t-n})}}(r-n/2,i-n/2,n,(e,t)=>{L.colorPixel(e,t,L.primaryColor)},(e,t)=>e>0&&e<512&&t>0&&t<512&&o!==L.primaryColor&&o===O(T,e,t))},eyeDropperFunc(e,t){document.querySelector(".window__item_selected").classList.remove(l),document.querySelector('.window__item[tool="pencil"]').classList.add(l),L.selectedTool="pencil",m.value=O(T,e,t),L.primaryColor=m.value}};f.addEventListener("mousedown",e=>{switch(V=!0,j=e.clientX-f.offsetLeft,U=e.clientY-f.offsetTop,B=2===e.button,M=B?L.secondaryColor:L.primaryColor,L.selectedTool){case"pencil":q.pencilFunc(j,U,M,q.drawUnit);break;case"fill-drip":q.fillBucketFunc(j,U,j,U);break;case"eye-dropper":q.eyeDropperFunc(j,U);break;case"eraser":q.pencilFunc(j,U,"#808080",q.drawUnit)}}),f.addEventListener("mousemove",e=>{if(V){switch(L.selectedTool){case"pencil":q.pencilFunc(e.clientX-f.offsetLeft,e.clientY-f.offsetTop,M,q.drawUnit);break;case"eraser":q.pencilFunc(e.clientX-f.offsetLeft,e.clientY-f.offsetTop,"#808080",q.drawUnit)}j=e.clientX-f.offsetLeft,U=e.clientY-f.offsetTop}}),document.addEventListener("mouseup",()=>{V=!1,j=void 0,U=void 0});var H=q;d.forEach(e=>{e.addEventListener("click",()=>{e.classList.contains(l)||(e.parentElement.querySelector(".window__item_selected").classList.remove(l),e.classList.add(l),L.selectedTool=e.getAttribute("tool"))})}),S.addEventListener("input",()=>{E.innerText=S.value}),S.addEventListener("change",()=>{H.drawUnit=S.value});let J,W=!1;function K(e,t){J=function(e,t){const n=document.createElement("div");n.classList.add("tooltip"),n.innerHTML=t,document.body.append(n);const r=e.getBoundingClientRect();let i=r.left+e.offsetWidth;i<0&&(i=0);let o=r.top+(e.offsetHeight-n.offsetHeight)/2;return o<0&&(o=0),n.style.left=`${i}px`,n.style.top=`${o}px`,n}(e,t)}function G(){J&&J.remove()}p.addEventListener("click",async e=>{const{target:t}=e,n=t.parentElement;if(!n.classList.contains(l)&&!W){W=!0,n.parentElement.querySelector(".window__item_selected").classList.remove(l),n.classList.add(l);const e=L.dimensionLen;let t;switch(n.getAttribute("dimension")){case"DIMENSION_SMALL":t=32;break;case"DIMENSION_MEDIUM":t=64;break;case"DIMENSION_LARGE":t=128;break;default:t=32}L.dimensionLen=t,L.executeForAllFramesJson(n=>{let r=k.curSessionFramesJson[n];if(t>e){for(let n=0;n<e;n+=1)r[n]=r[n].concat(Array(t-e).fill("#808080"));r=r.concat(Array(t-e).fill(Array(t).fill("#808080"))),k.curSessionFramesJson[n]=r}else{r.splice(t,e-t);for(let n=0;n<t;n+=1)r[n].splice(t,e-t)}L.drawFrameOnCanvasJson(n),R.drawFrameInFrameList(n)}),L.drawFrameOnCanvasJson(),W=!1}}),m.addEventListener("change",()=>{L.primaryColor=m.value}),g.addEventListener("change",()=>{L.secondaryColor=g.value}),document.addEventListener("keydown",e=>{e.key===r[0]||e.key===r[1]?document.querySelector('.window__item[tool="pencil"]').dispatchEvent(new Event("click")):e.key===a[0]||e.key===a[1]?document.querySelector('.window__item[tool="eye-dropper"]').dispatchEvent(new Event("click")):e.key===i[0]||e.key===i[1]?document.querySelector('.window__item[tool="fill-drip"]').dispatchEvent(new Event("click")):e.key===o[0]||e.key===o[1]?document.querySelector('.window__item[tool="eraser"]').dispatchEvent(new Event("click")):e.key===s[0]||e.key===s[1]?document.querySelector("#export-btn").dispatchEvent(new Event("click")):e.key===u[0]?document.querySelector(".frames .current-frame .frames__btn-add").click():e.key===c[0]?document.querySelector(".frames .current-frame .frames__btn-del").click():e.key!==h[0]&&e.key!==h[1]||document.querySelector(".frames .current-frame .frames__btn-copy").click()}),v.forEach(e=>{e.addEventListener("mouseover",()=>{let t="";switch(e.getAttribute("tool")){case"pencil":t=`( ${r[0]} )`;break;case"fill-drip":t=`( ${i[0]} )`;break;case"eraser":t=`( ${o[0]} )`;break;case"eye-dropper":t=`( ${a[0]} )`;break;case"gif-exporter":t=`( ${s[0]} )`;break;default:t="unknown tool"}K(e,t)}),e.addEventListener("mouseout",()=>{G()})}),b.addEventListener("mouseover",e=>{const{target:t}=e;if(t.parentElement.classList.contains("frames__item")&&!t.classList.contains("frames__item-num")){let e="";t.classList.contains("frames__btn-del")?e=`( ${c[0]} )`:t.classList.contains("frames__btn-add")?e=`( ${u[0]} )`:t.classList.contains("frames__btn-copy")&&(e=`( ${h[0]} )`),K(t,e)}}),b.addEventListener("mouseout",()=>{G()});var X=G;const z={openFrame(e){const t=R.getChildIndexInFrameList(e);t!==k.curFrameIndex&&(k.curFrameIndex=t,L.drawFrameOnCanvasJson())},deleteFrame(e){if(b.children.length>1&&k.curSessionFramesImage.length>1&&k.curSessionFramesJson.length>1){const t=R.getChildIndexInFrameList(e.parentElement);k.curSessionFramesImage.splice(t,1),k.curSessionFramesJson.splice(t,1),R.removeFrameFromFrameList(t),k.curFrameIndex===t?t===k.curSessionFramesImage.length&&t===k.curSessionFramesJson.length?(L.drawFrameOnCanvasJson(t-1),k.curFrameIndex-=1):L.drawFrameOnCanvasJson(t):k.curFrameIndex>t&&(k.curFrameIndex-=1),R.drawFramesSerialNumbersInFrameList(),X()}},addFrame(e){const t=R.getChildIndexInFrameList(e.parentElement);R.drawCurFrameInFrameList(),L.drawClearFrameInCanvas(),k.curSessionFramesImage.splice(t+1,0,f.toDataURL("image/png")),k.curSessionFramesJson.splice(t+1,0,L.convertCanvasToJson()),R.addFrameToFrameList(t),k.curFrameIndex=t+1,R.drawCurFrameInFrameList(),R.drawFramesSerialNumbersInFrameList()},duplicateFrame(e){const t=R.getChildIndexInFrameList(e.parentElement);R.addFrameToFrameList(t),k.curSessionFramesImage.splice(t+1,0,k.curSessionFramesImage[t]),k.curSessionFramesJson.splice(t+1,0,k.curSessionFramesJson[t]),k.curFrameIndex=t+1,R.drawFramesSerialNumbersInFrameList(),L.drawFrameOnCanvasJson(t),R.drawCurFrameInFrameList()}};b.addEventListener("click",e=>{const{target:t}=e;R.removeCssClassCurrentFromFrame(k.curFrameIndex),t.classList.contains("frames__item")?z.openFrame(t):t.classList.contains("frames__btn-del")?z.deleteFrame(t):t.classList.contains("frames__btn-add")?z.addFrame(t):t.classList.contains("frames__btn-copy")&&z.duplicateFrame(t),R.addCssClassCurrentToFrame(k.curFrameIndex)}),n(8)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,