/*! For license information please see landing.js.LICENSE */
!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="../",n(n.s=14)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r,o=n(2),a=n(3),s=n(5),u=n(6),c=((i={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",i["bad-app-name"]="Illegal App name: '{$appName}",i["duplicate-app"]="Firebase App named '{$appName}' already exists",i["app-deleted"]="Firebase App named '{$appName}' already deleted",i["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",i),h=new a.ErrorFactory("app","Firebase",c),l="@firebase/app",f=((r={})[l]="fire-core",r["@firebase/analytics"]="fire-analytics",r["@firebase/auth"]="fire-auth",r["@firebase/database"]="fire-rtdb",r["@firebase/functions"]="fire-fn",r["@firebase/installations"]="fire-iid",r["@firebase/messaging"]="fire-fcm",r["@firebase/performance"]="fire-perf",r["@firebase/remote-config"]="fire-rc",r["@firebase/storage"]="fire-gcs",r["@firebase/firestore"]="fire-fst",r["fire-js"]="fire-js",r["firebase-wrapper"]="fire-js-all",r),p=new u.Logger("@firebase/app"),d=function(){function t(t,e,n){var i,r,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(t),this.container=new s.ComponentContainer(e.name),this._addComponent(new s.Component("app",(function(){return u}),"PUBLIC"));try{for(var c=o.__values(this.firebase_.INTERNAL.components.values()),h=c.next();!h.done;h=c.next()){var l=h.value;this._addComponent(l)}}catch(t){i={error:t}}finally{try{h&&!h.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e="[DEFAULT]"),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){p.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw h.create("app-deleted",{appName:this.name_})},t}();d.prototype.name&&d.prototype.options||d.prototype.delete||console.log("dc");var v=function t(){var e=function(t){var e={},n=new Map,i={__esModule:!0,initializeApp:function(n,r){void 0===r&&(r={}),"object"==typeof r&&null!==r||(r={name:r});var o=r;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw h.create("bad-app-name",{appName:String(s)});if(a.contains(e,s))throw h.create("duplicate-app",{appName:s});var u=new t(n,o,i);return e[s]=u,u},app:r,registerVersion:function(t,e,n){var i,r=null!==(i=f[t])&&void 0!==i?i:t;n&&(r+="-"+n);var o=r.match(/\s|\//),a=e.match(/\s|\//);if(o||a){var c=['Unable to register library "'+r+'" with version "'+e+'":'];return o&&c.push('library name "'+r+'" contains illegal characters (whitespace or "/")'),o&&a&&c.push("and"),a&&c.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void p.warn(c.join(" "))}u(new s.Component(r+"-version",(function(){return{library:r,version:e}}),"VERSION"))},apps:null,SDK_VERSION:"7.7.0",INTERNAL:{registerComponent:u,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function r(t){if(t=t||"[DEFAULT]",!a.contains(e,t))throw h.create("no-app",{appName:t});return e[t]}function u(s){var u,c,l=s.name;if(n.has(l))return p.debug("There were multiple attempts to register component "+l+"."),"PUBLIC"===s.type?i[l]:null;if(n.set(l,s),"PUBLIC"===s.type){var f=function(t){if(void 0===t&&(t=r()),"function"!=typeof t[l])throw h.create("invalid-app-argument",{appName:l});return t[l]()};void 0!==s.serviceProps&&a.deepExtend(f,s.serviceProps),i[l]=f,t.prototype[l]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this._getService.bind(this,l);return n.apply(this,s.multipleInstances?t:[])}}try{for(var d=o.__values(Object.keys(e)),v=d.next();!v.done;v=d.next()){var m=v.value;e[m]._addComponent(s)}}catch(t){u={error:t}}finally{try{v&&!v.done&&(c=d.return)&&c.call(d)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?i[l]:null}return i.default=i,Object.defineProperty(i,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),r.App=t,i}(d);return e.INTERNAL=o.__assign(o.__assign({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){a.deepExtend(e,t)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),e}(),m=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e;return"VERSION"===(null===(e=t.getComponent())||void 0===e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if(a.isBrowser()&&void 0!==self.firebase){p.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var g=self.firebase.SDK_VERSION;g&&g.indexOf("LITE")>=0&&p.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var b=v.initializeApp;v.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return a.isNode()&&p.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),b.apply(void 0,t)};var y=v;!function(t,e){t.INTERNAL.registerComponent(new s.Component("platform-logger",(function(t){return new m(t)}),"PRIVATE")),t.registerVersion(l,"0.5.2",void 0),t.registerVersion("fire-js","")}(y),e.default=y,e.firebase=y},function(t,e,n){"use strict";var i,r=(i=n(0))&&"object"==typeof i&&"default"in i?i.default:i;r.registerVersion("firebase","7.7.0","app"),t.exports=r},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",(function(){return r})),n.d(e,"__assign",(function(){return o})),n.d(e,"__rest",(function(){return a})),n.d(e,"__decorate",(function(){return s})),n.d(e,"__param",(function(){return u})),n.d(e,"__metadata",(function(){return c})),n.d(e,"__awaiter",(function(){return h})),n.d(e,"__generator",(function(){return l})),n.d(e,"__exportStar",(function(){return f})),n.d(e,"__values",(function(){return p})),n.d(e,"__read",(function(){return d})),n.d(e,"__spread",(function(){return v})),n.d(e,"__spreadArrays",(function(){return m})),n.d(e,"__await",(function(){return g})),n.d(e,"__asyncGenerator",(function(){return b})),n.d(e,"__asyncDelegator",(function(){return y})),n.d(e,"__asyncValues",(function(){return w})),n.d(e,"__makeTemplateObject",(function(){return I})),n.d(e,"__importStar",(function(){return E})),n.d(e,"__importDefault",(function(){return T}));var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function r(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function a(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]])}return n}function s(t,e,n,i){var r,o=arguments.length,a=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(o<3?r(a):o>3?r(e,n,a):r(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,i){e(n,i,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(a,s)}u((i=i.apply(t,e||[])).next())}))}function l(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function m(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,r++)i[r]=o[a];return i}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function b(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(t,e||[]),o=[];return i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i;function a(t){r[t]&&(i[t]=function(e){return new Promise((function(n,i){o.push([t,e,n,i])>1||s(t,e)}))})}function s(t,e){try{(n=r[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,c):h(o[0][2],n)}catch(t){h(o[0][3],t)}var n}function u(t){s("next",t)}function c(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function y(t){var e,n;return e={},i("next"),i("throw",(function(t){throw t})),i("return"),e[Symbol.iterator]=function(){return this},e;function i(i,r){e[i]=t[i]?function(e){return(n=!n)?{value:g(t[i](e)),done:"return"===i}:r?r(e):e}:r}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(n){e[n]=t[n]&&function(e){return new Promise((function(i,r){!function(t,e,n,i){Promise.resolve(i).then((function(e){t({value:e,done:n})}),e)}(i,r,(e=t[n](e)).done,e.value)}))}}}function I(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function E(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function T(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+r.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++i)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[],r=0;r<t.length;r+=3){var o=t[r],a=r+1<t.length,s=a?t[r+1]:0,u=r+2<t.length,c=u?t[r+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),i.push(n[h],n[l],n[f],n[p])}return i.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,i=0;n<t.length;){var r=t[n++];if(r<128)e[i++]=String.fromCharCode(r);else if(r>191&&r<224){var o=t[n++];e[i++]=String.fromCharCode((31&r)<<6|63&o)}else if(r>239&&r<365){var a=((7&r)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[i++]=String.fromCharCode(55296+(a>>10)),e[i++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[i++]=String.fromCharCode((15&r)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[],r=0;r<t.length;){var o=n[t.charAt(r++)],a=r<t.length?n[t.charAt(r)]:0,s=++r<t.length?n[t.charAt(r)]:64,u=++r<t.length?n[t.charAt(r)]:64;if(++r,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(i.push(c),64!==s){var h=a<<4&240|s>>2;if(i.push(h),64!==u){var l=s<<6&192|u;i.push(l)}}}return i},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}var l=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,i){n?e.reject(n):e.resolve(i),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,i))}},t}();function f(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}var p=function(t){function e(n,i){var r=t.call(this,i)||this;return r.code=n,r.name="FirebaseError",Object.setPrototypeOf(r,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(r,d.prototype.create),r}return i.__extends(e,t),e}(Error),d=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var i=e[0]||{},r=this.service+"/"+t,o=this.errors[t],a=o?v(o,i):"Error",s=this.serviceName+": "+a+" ("+r+").",u=new p(r,s),c=0,h=Object.keys(i);c<h.length;c++){var l=h[c];"_"!==l.slice(-1)&&(l in u&&console.warn('Overwriting FirebaseError base field "'+l+'" can cause unexpected behavior.'),u[l]=i[l])}return u},t}();function v(t,e){return t.replace(m,(function(t,n){var i=e[n];return null!=i?i.toString():"<"+n+"?>"}))}var m=/\{\$([^}]+)}/g;function g(t){return JSON.parse(t)}var b=function(t){var e={},n={},i={},r="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),r=o[2],i=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:i,signature:r}},y=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var i=0;i<16;i++)n[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(i=0;i<16;i++)n[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(i=16;i<80;i++){var r=n[i-3]^n[i-8]^n[i-14]^n[i-16];n[i]=4294967295&(r<<1|r>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(i=0;i<80;i++)i<40?i<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):i<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782),r=(s<<5|s>>>27)+o+l+a+n[i]&4294967295,l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=r;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,i=0,r=this.buf_,o=this.inbuf_;i<e;){if(0===o)for(;i<=n;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(r[o]=t.charCodeAt(i),++i,++o===this.blockSize){this.compress_(r),o=0;break}}else for(;i<e;)if(r[o]=t[i],++i,++o===this.blockSize){this.compress_(r),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var i=0;for(n=0;n<5;n++)for(var r=24;r>=0;r-=8)t[i]=this.chain_[n]>>r&255,++i;return t},t}(),w=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var i,r=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(i=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,i=["next","error","complete"];n<i.length;n++){var r=i[n];if(r in t&&"function"==typeof t[r])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(i.next=I),void 0===i.error&&(i.error=I),void 0===i.complete&&(i.complete=I);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}})),this.observers.push(i),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function I(){}function E(t,e,n){var i="";switch(e){case 1:i=n?"first":"First";break;case 2:i=n?"second":"Second";break;case 3:i=n?"third":"Third";break;case 4:i=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return t+" failed: "+(i+" argument ")}e.CONSTANTS=r,e.Deferred=l,e.ErrorFactory=d,e.FirebaseError=p,e.Sha1=y,e.assert=o,e.assertionError=a,e.async=function(t,e){return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];Promise.resolve(!0).then((function(){t.apply(void 0,n)})).catch((function(t){e&&e(t)}))}},e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.createSubscribe=function(t,e){var n=new w(t,e);return n.subscribe.bind(n)},e.decode=b,e.deepCopy=function(t){return h(void 0,t)},e.deepExtend=h,e.errorPrefix=E,e.getUA=f,e.isAdmin=function(t){var e=b(t).claims;return"object"==typeof e&&!0===e.admin},e.isBrowser=function(){return"object"==typeof self&&self.self===self},e.isBrowserExtension=function(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id},e.isElectron=function(){return f().indexOf("Electron/")>=0},e.isEmpty=function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},e.isIE=function(){var t=f();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0},e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(t.process)}catch(t){return!1}},e.isNodeSdk=function(){return!0===r.NODE_CLIENT||!0===r.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.isUWP=function(){return f().indexOf("MSAppHost/")>=0},e.isValidFormat=function(t){var e=b(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e=b(t).claims,n=Math.floor((new Date).getTime()/1e3),i=0,r=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?i=e.nbf:e.hasOwnProperty("iat")&&(i=e.iat),r=e.hasOwnProperty("exp")?e.exp:i+86400),!!n&&!!i&&!!r&&n>=i&&n<=r},e.issuedAtTime=function(t){var e=b(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.jsonEval=g,e.map=function(t,e,n){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(i[r]=e.call(n,t[r],r,t));return i},e.querystring=function(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},i=0,r=Object.entries(t);i<r.length;i++){var o=r[i];n(o[0],o[1])}return e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}})),e},e.safeGet=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var i=t.charCodeAt(n);i<128?e++:i<2048?e+=2:i>=55296&&i<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);if(r>=55296&&r<=56319){var a=r-55296;i++,o(i<t.length,"Surrogate pair missing trail surrogate."),r=65536+(a<<10)+(t.charCodeAt(i)-56320)}r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):r<65536?(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},e.stringify=function(t){return JSON.stringify(t)},e.validateArgCount=function(t,e,n,i){var r;if(i<e?r="at least "+e:i>n&&(r=0===n?"none":"no more than "+n),r)throw new Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+r+".")},e.validateCallback=function(t,e,n,i){if((!i||n)&&"function"!=typeof n)throw new Error(E(t,e,i)+"must be a valid function.")},e.validateContextObject=function(t,e,n,i){if((!i||n)&&("object"!=typeof n||null===n))throw new Error(E(t,e,i)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,i){if((!i||n)&&"string"!=typeof n)throw new Error(E(t,e,i)+"must be a valid firebase namespace.")}}).call(this,n(4))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(3),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t="[DEFAULT]");var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new r.Deferred;this.instancesDeferred.set(e,n);try{var i=this.getOrInitializeService(e);i&&n.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=i.__assign({identifier:"[DEFAULT]",optional:!1},t),n=e.identifier,r=e.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(r)return null;throw Error("Service "+this.name+" is not available")}return a}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService("[DEFAULT]")}catch(t){}try{for(var r=i.__values(this.instancesDeferred.entries()),o=r.next();!o.done;o=r.next()){var a=i.__read(o.value,2),s=a[0],u=a[1],c=this.normalizeInstanceIdentifier(s);try{var h=this.getOrInitializeService(c);u.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t="[DEFAULT]"),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return i.__awaiter(this,void 0,void 0,(function(){var t;return i.__generator(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return"[DEFAULT]"===t?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:"[DEFAULT]":t},t}(),s=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();e.Component=o,e.ComponentContainer=s,e.Provider=a},function(t,e,n){"use strict";function i(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,r++)i[r]=o[a];return i}n.r(e),n.d(e,"LogLevel",(function(){return r})),n.d(e,"Logger",(function(){return u})),n.d(e,"setLogLevel",(function(){return c}));var r,o=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var a=r.INFO,s=function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(e<t.logLevel)){var a=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,i(["["+a+"]  "+t.name+":"],n));break;case r.INFO:console.info.apply(console,i(["["+a+"]  "+t.name+":"],n));break;case r.WARN:console.warn.apply(console,i(["["+a+"]  "+t.name+":"],n));break;case r.ERROR:console.error.apply(console,i(["["+a+"]  "+t.name+":"],n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},u=function(){function t(t){this.name=t,this._logLevel=a,this._logHandler=s,o.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,i([this,r.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,i([this,r.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,i([this,r.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,i([this,r.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,i([this,r.ERROR],t))},t}();function c(t){o.forEach((function(e){e.logLevel=t}))}},function(t,e,n){"use strict";(function(t){var e=n(0),i=n.n(e);(function(){var e,n="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},r="undefined"!=typeof window&&window===this?this:void 0!==t&&null!=t?t:this;function o(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function a(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:o(t)}}!function(t,e){if(e){var i=r;t=t.split(".");for(var o=0;o<t.length-1;o++){var a=t[o];a in i||(i[a]={}),i=i[a]}(e=e(o=i[t=t[t.length-1]]))!=o&&null!=e&&n(i,t,{configurable:!0,writable:!0,value:e})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var o=r.setTimeout;n.prototype.c=function(t){o(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(i){n||(n=!0,t.call(e,i))}}var e=this,n=!1;return{resolve:t(this.m),reject:t(this.g)}},e.prototype.m=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.o(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.u(t):this.h(t)}},e.prototype.u=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.v(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)s.b(this.a[t]);this.a=null}};var s=new n;return e.prototype.o=function(t){var e=this.f();t.La(e.resolve,e.reject)},e.prototype.v=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function i(t,e){return"function"==typeof t?function(e){try{r(t(e))}catch(t){o(t)}}:e}var r,o,a=new e((function(t,e){r=t,o=e}));return this.La(i(t,r),i(n,o)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.La=function(t,e){function n(){switch(i.b){case 1:t(i.c);break;case 2:e(i.c);break;default:throw Error("Unexpected state: "+i.b)}}var i=this;null==this.a?s.b(n):this.a.push(n)},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=a(t),o=r.next();!o.done;o=r.next())i(o.value).La(e,n)}))},e.all=function(t){var n=a(t),r=n.next();return r.done?i([]):new e((function(t,e){function o(e){return function(n){a[e]=n,0==--s&&t(a)}}var a=[],s=0;do{a.push(void 0),s++,i(r.value).La(o(a.length-1),e),r=n.next()}while(!r.done)}))},e}));var s=s||{},u=this||self;function c(t){return"string"==typeof t}function h(t){return"boolean"==typeof t}var l=/^[\w+/_-]+[=]{0,2}$/,f=null;function p(){}function d(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function v(t){return null===t}function m(t){return"array"==d(t)}function g(t){var e=d(t);return"array"==e||"object"==e&&"number"==typeof t.length}function b(t){return"function"==d(t)}function y(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var w="closure_uid_"+(1e9*Math.random()>>>0),I=0;function E(t,e,n){return t.call.apply(t.bind,arguments)}function T(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function S(t,e,n){return(S=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?E:T).apply(null,arguments)}function A(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var _=Date.now||function(){return+new Date};function k(t,e){function n(){}n.prototype=e.prototype,t.qb=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.gd=function(t,n,i){for(var r=Array(arguments.length-2),o=2;o<arguments.length;o++)r[o-2]=arguments[o];return e.prototype[n].apply(t,r)}}function N(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function O(t){if(Error.captureStackTrace)Error.captureStackTrace(this,O);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function P(t,e){for(var n="",i=(t=t.split("%s")).length-1,r=0;r<i;r++)n+=t[r]+(r<e.length?e[r]:"%s");O.call(this,n+t[i])}function C(t,e){throw new P("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function D(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function R(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function L(){this.b=this.a=null}k(O,Error),O.prototype.name="CustomError",k(P,O),P.prototype.name="AssertionError",D.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var x=new D((function(){return new M}),(function(t){t.reset()}));function j(){var t=Kt,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function M(){this.next=this.b=this.a=null}function U(t,e){t:{try{var n=t&&t.ownerDocument,i=n&&(n.defaultView||n.parentWindow);if((i=i||u).Element&&i.Location){var r=i;break t}}catch(t){}r=null}if(r&&void 0!==r[e]&&(!t||!(t instanceof r[e])&&(t instanceof r.Location||t instanceof r.Element))){if(y(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;C("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}L.prototype.add=function(t,e){var n=x.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},M.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},M.prototype.reset=function(){this.next=this.b=this.a=null};var V=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if(c(t))return c(e)&&1==e.length?t.indexOf(e,0):-1;for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},F=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r=c(t)?t.split(""):t,o=0;o<i;o++)o in r&&e.call(n,r[o],o,t)},B=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=Array(n),r=c(t)?t.split(""):t,o=0;o<n;o++)o in r&&(i[o]=e.call(void 0,r[o],o,t));return i},H=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=c(t)?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t))return!0;return!1};function K(t,e){return 0<=V(t,e)}function W(t,e){var n;return(n=0<=(e=V(t,e)))&&Array.prototype.splice.call(t,e,1),n}function q(t,e){!function(t,e){for(var n=c(t)?t.split(""):t,i=t.length-1;0<=i;--i)i in n&&e.call(void 0,n[i],i,t)}(t,(function(n,i){e.call(void 0,n,i,t)&&Array.prototype.splice.call(t,i,1).length}))}function G(t){return Array.prototype.concat.apply([],arguments)}function z(t){var e=t.length;if(0<e){for(var n=Array(e),i=0;i<e;i++)n[i]=t[i];return n}return[]}function X(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function J(t){for(var e in t)return!1;return!0}function Y(t){var e,n={};for(e in t)n[e]=t[e];return n}var $="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Z(t,e){for(var n,i,r=1;r<arguments.length;r++){for(n in i=arguments[r])t[n]=i[n];for(var o=0;o<$.length;o++)n=$[o],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function Q(t,e){this.a=t===nt&&e||"",this.b=et}function tt(t){return t instanceof Q&&t.constructor===Q&&t.b===et?t.a:(C("expected object of type Const, got '"+t+"'"),"type_error:Const")}Q.prototype.qa=!0,Q.prototype.pa=function(){return this.a},Q.prototype.toString=function(){return"Const{"+this.a+"}"};var et={},nt={},it=new Q(nt,"");function rt(){this.a="",this.b=ct}function ot(t){return t instanceof rt&&t.constructor===rt&&t.b===ct?t.a:(C("expected object of type TrustedResourceUrl, got '"+t+"' of type "+d(t)),"type_error:TrustedResourceUrl")}function at(t,e){var n=tt(t);if(!ut.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return ht(t=n.replace(st,(function(t,i){if(!Object.prototype.hasOwnProperty.call(e,i))throw Error('Found marker, "'+i+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[i])instanceof Q?tt(t):encodeURIComponent(String(t))})))}rt.prototype.qa=!0,rt.prototype.pa=function(){return this.a.toString()},rt.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var st=/%{(\w+)}/g,ut=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,ct={};function ht(t){var e=new rt;return e.a=t,e}var lt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},ft=/&/g,pt=/</g,dt=/>/g,vt=/"/g,mt=/'/g,gt=/\x00/g,bt=/[\x00&<>"']/;function yt(t,e){return-1!=t.indexOf(e)}function wt(t,e){return t<e?-1:t>e?1:0}function It(){this.a="",this.b=_t}function Et(t){return t instanceof It&&t.constructor===It&&t.b===_t?t.a:(C("expected object of type SafeUrl, got '"+t+"' of type "+d(t)),"type_error:SafeUrl")}It.prototype.qa=!0,It.prototype.pa=function(){return this.a.toString()},It.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Tt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function St(t){return t instanceof It?t:(t="object"==typeof t&&t.qa?t.pa():String(t),Tt.test(t)||(t="about:invalid#zClosurez"),kt(t))}var At,_t={};function kt(t){var e=new It;return e.a=t,e}kt("about:blank");t:{var Nt=u.navigator;if(Nt){var Ot=Nt.userAgent;if(Ot){At=Ot;break t}}At=""}function Pt(t){return yt(At,t)}function Ct(){this.a="",this.b=Rt}function Dt(t){return t instanceof Ct&&t.constructor===Ct&&t.b===Rt?t.a:(C("expected object of type SafeHtml, got '"+t+"' of type "+d(t)),"type_error:SafeHtml")}Ct.prototype.qa=!0,Ct.prototype.pa=function(){return this.a.toString()},Ct.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Rt={};function Lt(t){var e=new Ct;return e.a=t,e}Lt("<!DOCTYPE html>");var xt,jt,Mt=Lt("");function Ut(t,e){for(var n=t.split("%s"),i="",r=Array.prototype.slice.call(arguments,1);r.length&&1<n.length;)i+=n.shift()+r.shift();return i+n.join("%s")}function Vt(t){return bt.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(ft,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(pt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(dt,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(vt,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(mt,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(gt,"&#0;"))),t}function Ft(t){u.setTimeout((function(){throw t}),0)}function Bt(t,e){jt||function(){if(u.Promise&&u.Promise.resolve){var t=u.Promise.resolve(void 0);jt=function(){t.then(Wt)}}else jt=function(){var t=Wt;!b(u.setImmediate)||u.Window&&u.Window.prototype&&!Pt("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(xt||(xt=function(){var t=u.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!Pt("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",function(t){var e=ht(tt(it));U(t,"HTMLIFrameElement"),t.src=ot(e).toString()}(t),document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(Dt(Mt)),t.close();var n="callImmediate"+Math.random(),i="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=S((function(t){"*"!=i&&t.origin!=i||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,i)}}}),void 0!==t&&!Pt("Trident")&&!Pt("MSIE")){var e=new t,n={},i=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).yb;n.yb=null,t()}},function(t){i.next={yb:t},i=i.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){u.setTimeout(t,0)}}()),xt(t)):u.setImmediate(t)}}(),Ht||(jt(),Ht=!0),Kt.add(t,e)}Lt("<br>");var Ht=!1,Kt=new L;function Wt(){for(var t;t=j();){try{t.a.call(t.b)}catch(t){Ft(t)}R(x,t)}Ht=!1}function qt(t,e){if(this.a=Gt,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=p)try{var n=this;t.call(e,(function(t){re(n,zt,t)}),(function(t){if(!(t instanceof le))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}re(n,Xt,t)}))}catch(t){re(this,Xt,t)}}var Gt=0,zt=2,Xt=3;function Jt(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Jt.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Yt=new D((function(){return new Jt}),(function(t){t.reset()}));function $t(t,e,n){var i=Yt.get();return i.g=t,i.b=e,i.f=n,i}function Zt(t){if(t instanceof qt)return t;var e=new qt(p);return re(e,zt,t),e}function Qt(t){return new qt((function(e,n){n(t)}))}function te(t,e,n){oe(t,e,n,null)||Bt(A(e,t))}function ee(t){return new qt((function(e){var n=t.length,i=[];if(n)for(var r=function(t,r,o){n--,i[t]=r?{Gb:!0,value:o}:{Gb:!1,reason:o},0==n&&e(i)},o=0;o<t.length;o++)te(t[o],A(r,o,!0),A(r,o,!1));else e(i)}))}function ne(t,e){t.b||t.a!=zt&&t.a!=Xt||ae(t),t.f?t.f.next=e:t.b=e,t.f=e}function ie(t,e,n,i){var r=$t(null,null,null);return r.a=new qt((function(t,o){r.g=e?function(n){try{var r=e.call(i,n);t(r)}catch(t){o(t)}}:t,r.b=n?function(e){try{var r=n.call(i,e);void 0===r&&e instanceof le?o(e):t(r)}catch(t){o(t)}}:o})),r.a.c=t,ne(t,r),r.a}function re(t,e,n){t.a==Gt&&(t===n&&(e=Xt,n=new TypeError("Promise cannot resolve to itself")),t.a=1,oe(n,t.Oc,t.Pc,t)||(t.i=n,t.a=e,t.c=null,ae(t),e!=Xt||n instanceof le||function(t,e){t.g=!0,Bt((function(){t.g&&he.call(null,e)}))}(t,n)))}function oe(t,e,n,i){if(t instanceof qt)return ne(t,$t(e||p,n||null,i)),!0;if(N(t))return t.then(e,n,i),!0;if(y(t))try{var r=t.then;if(b(r))return function(t,e,n,i,r){function o(t){a||(a=!0,i.call(r,t))}var a=!1;try{e.call(t,(function(t){a||(a=!0,n.call(r,t))}),o)}catch(t){o(t)}}(t,r,e,n,i),!0}catch(t){return n.call(i,t),!0}return!1}function ae(t){t.h||(t.h=!0,Bt(t.Zb,t))}function se(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function ue(t,e,n,i){if(n==Xt&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,ce(e,n,i);else try{e.c?e.g.call(e.f):ce(e,n,i)}catch(t){he.call(null,t)}R(Yt,e)}function ce(t,e,n){e==zt?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}qt.prototype.then=function(t,e,n){return ie(this,b(t)?t:null,b(e)?e:null,n)},qt.prototype.$goog_Thenable=!0,(e=qt.prototype).ka=function(t,e){return(t=$t(t,t,e)).c=!0,ne(this,t),this},e.s=function(t,e){return ie(this,null,t,e)},e.cancel=function(t){this.a==Gt&&Bt((function(){!function t(e,n){if(e.a==Gt)if(e.c){var i=e.c;if(i.b){for(var r=0,o=null,a=null,s=i.b;s&&(s.c||(r++,s.a==e&&(o=s),!(o&&1<r)));s=s.next)o||(a=s);o&&(i.a==Gt&&1==r?t(i,n):(a?((r=a).next==i.f&&(i.f=r),r.next=r.next.next):se(i),ue(i,o,Xt,n)))}e.c=null}else re(e,Xt,n)}(this,new le(t))}),this)},e.Oc=function(t){this.a=Gt,re(this,zt,t)},e.Pc=function(t){this.a=Gt,re(this,Xt,t)},e.Zb=function(){for(var t;t=se(this);)ue(this,t,this.a,this.i);this.h=!1};var he=Ft;function le(t){O.call(this,t)}function fe(){0!=pe&&(de[this[w]||(this[w]=++I)]=this),this.va=this.va,this.la=this.la}k(le,O),le.prototype.name="cancel";var pe=0,de={};function ve(t){if(!t.va&&(t.va=!0,t.za(),0!=pe)){var e=t[w]||(t[w]=++I);if(0!=pe&&t.la&&0<t.la.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete de[e]}}function me(t){return me[" "](t),t}fe.prototype.va=!1,fe.prototype.za=function(){if(this.la)for(;this.la.length;)this.la.shift()()},me[" "]=p;var ge,be,ye=Pt("Opera"),we=Pt("Trident")||Pt("MSIE"),Ie=Pt("Edge"),Ee=Ie||we,Te=Pt("Gecko")&&!(yt(At.toLowerCase(),"webkit")&&!Pt("Edge"))&&!(Pt("Trident")||Pt("MSIE"))&&!Pt("Edge"),Se=yt(At.toLowerCase(),"webkit")&&!Pt("Edge");function Ae(){var t=u.document;return t?t.documentMode:void 0}t:{var _e="",ke=(be=At,Te?/rv:([^\);]+)(\)|;)/.exec(be):Ie?/Edge\/([\d\.]+)/.exec(be):we?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(be):Se?/WebKit\/(\S+)/.exec(be):ye?/(?:Version)[ \/]?(\S+)/.exec(be):void 0);if(ke&&(_e=ke?ke[1]:""),we){var Ne=Ae();if(null!=Ne&&Ne>parseFloat(_e)){ge=String(Ne);break t}}ge=_e}var Oe,Pe={};function Ce(t){return function(t,e){var n=Pe;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=lt(String(ge)).split("."),i=lt(String(t)).split("."),r=Math.max(n.length,i.length),o=0;0==e&&o<r;o++){var a=n[o]||"",s=i[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=wt(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||wt(0==a[2].length,0==s[2].length)||wt(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}Oe=u.document&&we?Ae():void 0;var De=Object.freeze||function(t){return t},Re=!we||9<=Number(Oe),Le=we&&!Ce("9"),xe=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{u.addEventListener("test",p,e),u.removeEventListener("test",p,e)}catch(t){}return t}();function je(t,e){this.type=t,this.b=this.target=e,this.Mb=!0}function Me(t,e){if(je.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Te){t:{try{me(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType=c(t.pointerType)?t.pointerType:Ue[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}je.prototype.preventDefault=function(){this.Mb=!1},k(Me,je);var Ue=De({2:"touch",3:"pen",4:"mouse"});Me.prototype.preventDefault=function(){Me.qb.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Le)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Me.prototype.f=function(){return this.a};var Ve="closure_listenable_"+(1e6*Math.random()|0),Fe=0;function Be(t,e,n,i,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.Pa=r,this.key=++Fe,this.ta=this.Ka=!1}function He(t){t.ta=!0,t.listener=null,t.proxy=null,t.src=null,t.Pa=null}function Ke(t){this.src=t,this.a={},this.b=0}function We(t,e){var n=e.type;n in t.a&&W(t.a[n],e)&&(He(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function qe(t,e,n,i){for(var r=0;r<t.length;++r){var o=t[r];if(!o.ta&&o.listener==e&&o.capture==!!n&&o.Pa==i)return r}return-1}Ke.prototype.add=function(t,e,n,i,r){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=qe(t,e,i,r);return-1<a?(e=t[a],n||(e.Ka=!1)):((e=new Be(e,this.src,o,!!i,r)).Ka=n,t.push(e)),e};var Ge="closure_lm_"+(1e6*Math.random()|0),ze={};function Xe(t,e,n,i,r){if(i&&i.once)Ye(t,e,n,i,r);else if(m(e))for(var o=0;o<e.length;o++)Xe(t,e[o],n,i,r);else n=an(n),t&&t[Ve]?un(t,e,n,y(i)?!!i.capture:!!i,r):Je(t,e,n,!1,i,r)}function Je(t,e,n,i,r,o){if(!e)throw Error("Invalid event type");var a=y(r)?!!r.capture:!!r,s=rn(t);if(s||(t[Ge]=s=new Ke(t)),!(n=s.add(e,n,i,a,o)).proxy)if(i=function(){var t=nn,e=Re?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)xe||(r=a),void 0===r&&(r=!1),t.addEventListener(e.toString(),i,r);else if(t.attachEvent)t.attachEvent(Qe(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}}function Ye(t,e,n,i,r){if(m(e))for(var o=0;o<e.length;o++)Ye(t,e[o],n,i,r);else n=an(n),t&&t[Ve]?cn(t,e,n,y(i)?!!i.capture:!!i,r):Je(t,e,n,!0,i,r)}function $e(t,e,n,i,r){if(m(e))for(var o=0;o<e.length;o++)$e(t,e[o],n,i,r);else i=y(i)?!!i.capture:!!i,n=an(n),t&&t[Ve]?(t=t.u,(e=String(e).toString())in t.a&&-1<(n=qe(o=t.a[e],n,i,r))&&(He(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=rn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=qe(e,n,i,r)),(n=-1<t?e[t]:null)&&Ze(n))}function Ze(t){if("number"!=typeof t&&t&&!t.ta){var e=t.src;if(e&&e[Ve])We(e.u,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(Qe(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=rn(e))?(We(n,t),0==n.b&&(n.src=null,e[Ge]=null)):He(t)}}}function Qe(t){return t in ze?ze[t]:ze[t]="on"+t}function tn(t,e,n,i){var r=!0;if((t=rn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.ta&&(o=en(o,i),r=r&&!1!==o)}return r}function en(t,e){var n=t.listener,i=t.Pa||t.src;return t.Ka&&Ze(t),n.call(i,e)}function nn(t,e){if(t.ta)return!0;if(!Re){if(!e)t:{e=["window","event"];for(var n=u,i=0;i<e.length;i++)if(null==(n=n[e[i]])){e=null;break t}e=n}if(e=new Me(i=e,this),n=!0,!(0>i.keyCode||null!=i.returnValue)){t:{var r=!1;if(0==i.keyCode)try{i.keyCode=-1;break t}catch(t){r=!0}(r||null==i.returnValue)&&(i.returnValue=!0)}for(i=[],r=e.b;r;r=r.parentNode)i.push(r);for(t=t.type,r=i.length-1;0<=r;r--){e.b=i[r];var o=tn(i[r],t,!0,e);n=n&&o}for(r=0;r<i.length;r++)e.b=i[r],o=tn(i[r],t,!1,e),n=n&&o}return n}return en(t,new Me(e,this))}function rn(t){return(t=t[Ge])instanceof Ke?t:null}var on="__closure_events_fn_"+(1e9*Math.random()>>>0);function an(t){return b(t)?t:(t[on]||(t[on]=function(e){return t.handleEvent(e)}),t[on])}function sn(){fe.call(this),this.u=new Ke(this),this.Sb=this,this.Xa=null}function un(t,e,n,i,r){t.u.add(String(e),n,!1,i,r)}function cn(t,e,n,i,r){t.u.add(String(e),n,!0,i,r)}function hn(t,e,n,i){if(!(e=t.u.a[String(e)]))return!0;e=e.concat();for(var r=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.ta&&a.capture==n){var s=a.listener,u=a.Pa||a.src;a.Ka&&We(t.u,a),r=!1!==s.call(u,i)&&r}}return r&&0!=i.Mb}function ln(t,e,n){if(b(t))n&&(t=S(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=S(t.handleEvent,t)}return 2147483647<Number(e)?-1:u.setTimeout(t,e||0)}function fn(t){var e=null;return new qt((function(n,i){-1==(e=ln((function(){n(void 0)}),t))&&i(Error("Failed to schedule timer."))})).s((function(t){throw u.clearTimeout(e),t}))}function pn(t){if(t.U&&"function"==typeof t.U)return t.U();if(c(t))return t.split("");if(g(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}function dn(t){if(t.X&&"function"==typeof t.X)return t.X();if(!t.U||"function"!=typeof t.U){if(g(t)||c(t)){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var i in e=[],n=0,t)e[n++]=i;return e}}function vn(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof vn)for(n=t.X(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function mn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var i=t.a[e];gn(t.b,i)&&(t.a[n++]=i),e++}t.a.length=n}if(t.c!=t.a.length){var r={};for(n=e=0;e<t.a.length;)gn(r,i=t.a[e])||(t.a[n++]=i,r[i]=1),e++;t.a.length=n}}function gn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}k(sn,fe),sn.prototype[Ve]=!0,sn.prototype.addEventListener=function(t,e,n,i){Xe(this,t,e,n,i)},sn.prototype.removeEventListener=function(t,e,n,i){$e(this,t,e,n,i)},sn.prototype.dispatchEvent=function(t){var e,n=this.Xa;if(n)for(e=[];n;n=n.Xa)e.push(n);n=this.Sb;var i=t.type||t;if(c(t))t=new je(t,n);else if(t instanceof je)t.target=t.target||n;else{var r=t;Z(t=new je(i,n),r)}if(r=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.b=e[o];r=hn(a,i,!0,t)&&r}if(r=hn(a=t.b=n,i,!0,t)&&r,r=hn(a,i,!1,t)&&r,e)for(o=0;o<e.length;o++)r=hn(a=t.b=e[o],i,!1,t)&&r;return r},sn.prototype.za=function(){if(sn.qb.za.call(this),this.u){var t,e=this.u;for(t in e.a){for(var n=e.a[t],i=0;i<n.length;i++)He(n[i]);delete e.a[t],e.b--}}this.Xa=null},(e=vn.prototype).U=function(){mn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},e.X=function(){return mn(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(t,e){return gn(this.b,t)?this.b[t]:e},e.set=function(t,e){gn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},e.forEach=function(t,e){for(var n=this.X(),i=0;i<n.length;i++){var r=n[i],o=this.get(r);t.call(e,o,r,this)}};var bn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function yn(t,e){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,t instanceof yn?(this.h=void 0!==e?e:t.h,wn(this,t.f),this.i=t.i,this.b=t.b,In(this,t.l),this.c=t.c,En(this,Bn(t.a)),this.g=t.g):t&&(n=String(t).match(bn))?(this.h=!!e,wn(this,n[1]||"",!0),this.i=kn(n[2]||""),this.b=kn(n[3]||"",!0),In(this,n[4]),this.c=kn(n[5]||"",!0),En(this,n[6]||"",!0),this.g=kn(n[7]||"")):(this.h=!!e,this.a=new xn(null,this.h))}function wn(t,e,n){t.f=n?kn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function In(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.l=e}else t.l=null}function En(t,e,n){e instanceof xn?(t.a=e,function(t,e){e&&!t.f&&(jn(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Un(this,e),Fn(this,n,t))}),t)),t.f=e}(t.a,t.h)):(n||(e=Nn(e,Rn)),t.a=new xn(e,t.h))}function Tn(t,e,n){t.a.set(e,n)}function Sn(t,e){return t.a.get(e)}function An(t){return t instanceof yn?new yn(t):new yn(t,void 0)}function _n(t,e){var n=new yn(null,void 0);return wn(n,"https"),t&&(n.b=t),e&&(n.c=e),n}function kn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Nn(t,e,n){return c(t)?(t=encodeURI(t).replace(e,On),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function On(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}yn.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Nn(e,Pn,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.i)&&t.push(Nn(e,Pn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&t.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(Nn(n,"/"==n.charAt(0)?Dn:Cn,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.g)&&t.push("#",Nn(n,Ln)),t.join("")},yn.prototype.resolve=function(t){var e=new yn(this),n=!!t.f;n?wn(e,t.f):n=!!t.i,n?e.i=t.i:n=!!t.b,n?e.b=t.b:n=null!=t.l;var i=t.c;if(n)In(e,t.l);else if(n=!!t.c){if("/"!=i.charAt(0))if(this.b&&!this.c)i="/"+i;else{var r=e.c.lastIndexOf("/");-1!=r&&(i=e.c.substr(0,r+1)+i)}if(".."==(r=i)||"."==r)i="";else if(yt(r,"./")||yt(r,"/.")){i=0==r.lastIndexOf("/",0),r=r.split("/");for(var o=[],a=0;a<r.length;){var s=r[a++];"."==s?i&&a==r.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),i&&a==r.length&&o.push("")):(o.push(s),i=!0)}i=o.join("/")}else i=r}return n?e.c=i:n=""!==t.a.toString(),n?En(e,Bn(t.a)):n=!!t.g,n&&(e.g=t.g),e};var Pn=/[#\/\?@]/g,Cn=/[#\?:]/g,Dn=/[#\?]/g,Rn=/[#\?@]/g,Ln=/#/g;function xn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function jn(t){t.a||(t.a=new vn,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),r=null;if(0<=i){var o=t[n].substring(0,i);r=t[n].substring(i+1)}else o=t[n];e(o,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Mn(t){var e=dn(t);if(void 0===e)throw Error("Keys are undefined");var n=new xn(null,void 0);t=pn(t);for(var i=0;i<e.length;i++){var r=e[i],o=t[i];m(o)?Fn(n,r,o):n.add(r,o)}return n}function Un(t,e){jn(t),e=Hn(t,e),gn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,gn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&mn(t)))}function Vn(t,e){return jn(t),e=Hn(t,e),gn(t.a.b,e)}function Fn(t,e,n){Un(t,e),0<n.length&&(t.c=null,t.a.set(Hn(t,e),z(n)),t.b+=n.length)}function Bn(t){var e=new xn;return e.c=t.c,t.a&&(e.a=new vn(t.a),e.b=t.b),e}function Hn(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}(e=xn.prototype).add=function(t,e){jn(this),this.c=null,t=Hn(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(t,e){jn(this),this.a.forEach((function(n,i){F(n,(function(n){t.call(e,n,i,this)}),this)}),this)},e.X=function(){jn(this);for(var t=this.a.U(),e=this.a.X(),n=[],i=0;i<e.length;i++)for(var r=t[i],o=0;o<r.length;o++)n.push(e[i]);return n},e.U=function(t){jn(this);var e=[];if(c(t))Vn(this,t)&&(e=G(e,this.a.get(Hn(this,t))));else{t=this.a.U();for(var n=0;n<t.length;n++)e=G(e,t[n])}return e},e.set=function(t,e){return jn(this),this.c=null,Vn(this,t=Hn(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},e.get=function(t,e){return t&&0<(t=this.U(t)).length?String(t[0]):e},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.X(),n=0;n<e.length;n++){var i=e[n],r=encodeURIComponent(String(i));i=this.U(i);for(var o=0;o<i.length;o++){var a=r;""!==i[o]&&(a+="="+encodeURIComponent(String(i[o]))),t.push(a)}}return this.c=t.join("&")};var Kn=!we||9<=Number(Oe);function Wn(t){var e=document;return c(t)?e.getElementById(t):t}function qn(t,e){X(e,(function(e,n){e&&"object"==typeof e&&e.qa&&(e=e.pa()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:Gn.hasOwnProperty(n)?t.setAttribute(Gn[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var Gn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function zn(t,e,n){function i(n){n&&e.appendChild(c(n)?t.createTextNode(n):n)}for(var r=2;r<n.length;r++){var o=n[r];!g(o)||y(o)&&0<o.nodeType?i(o):F(Xn(o)?z(o):o,i)}}function Xn(t){if(t&&"number"==typeof t.length){if(y(t))return"function"==typeof t.item||"string"==typeof t.item;if(b(t))return"function"==typeof t.item}return!1}function Jn(t){var e=[];return function t(e,n,i){if(null==n)i.push("null");else{if("object"==typeof n){if(m(n)){var r=n;n=r.length,i.push("[");for(var o="",a=0;a<n;a++)i.push(o),t(e,r[a],i),o=",";return void i.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(r in i.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,r)&&"function"!=typeof(a=n[r])&&(i.push(o),Qn(r,i),i.push(":"),t(e,a,i),o=",");return void i.push("}")}n=n.valueOf()}switch(typeof n){case"string":Qn(n,i);break;case"number":i.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":i.push(String(n));break;case"function":i.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new Yn,t,e),e.join("")}function Yn(){}var $n={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Zn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Qn(t,e){e.push('"',t.replace(Zn,(function(t){var e=$n[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),$n[t]=e),e})),'"')}function ti(){var t=bi();return we&&!!Oe&&11==Oe||/Edge\/\d+/.test(t)}function ei(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function ni(t,e){e=e||u.window;var n="about:blank";t&&(n=Et(St(t)).toString()),e.location.href=n}function ii(t){return!!((t=(t||bi()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function ri(t){t=t||u.window;try{t.close()}catch(t){}}function oi(t,e,n){var i=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var r=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<r?r:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=bi().toLowerCase(),i&&(e.target=i,yt(n,"crios/")&&(e.target="_blank")),vi(bi())==di&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),i=window,e=n instanceof It?n:St(void 0!==n.href?n.href:String(n)),n=t.target||n.target,r=[],t)switch(a){case"width":case"height":case"top":case"left":r.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:r.push(a+"="+(t[a]?1:0))}var a=r.join(",");if((Pt("iPhone")&&!Pt("iPod")&&!Pt("iPad")||Pt("iPad")||Pt("iPod"))&&i.navigator&&i.navigator.standalone&&n&&"_self"!=n?(U(a=i.document.createElement("A"),"HTMLAnchorElement"),e instanceof It||e instanceof It||(e="object"==typeof e&&e.qa?e.pa():String(e),Tt.test(e)||(e="about:invalid#zClosurez"),e=kt(e)),a.href=Et(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,i,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=i.open("",n,a),t=Et(e).toString(),a&&(Ee&&yt(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,t=Lt('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Vt(t)+'">'),a.document.write(Dt(t)),a.document.close())):(a=i.open(Et(e).toString(),n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var ai=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,si=/^[^@]+@[^@]+$/;function ui(){var t=null;return new qt((function(e){"complete"==u.document.readyState?e():(t=function(){e()},Ye(window,"load",t))})).s((function(e){throw $e(window,"load",t),e}))}function ci(t){return t=t||bi(),!("file:"!==Ti()&&"ionic:"!==Ti()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function hi(){var t=u.window;try{return!(!t||t==t.top)}catch(t){return!1}}function li(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function fi(){return i.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":i.a.INTERNAL.hasOwnProperty("node")?"Node":li()?"Worker":"Browser"}function pi(){var t=fi();return"ReactNative"===t||"Node"===t}var di="Firefox";function vi(t){var e=t.toLowerCase();return yt(e,"opera/")||yt(e,"opr/")||yt(e,"opios/")?"Opera":yt(e,"iemobile")?"IEMobile":yt(e,"msie")||yt(e,"trident/")?"IE":yt(e,"edge/")?"Edge":yt(e,"firefox/")?di:yt(e,"silk/")?"Silk":yt(e,"blackberry")?"Blackberry":yt(e,"webos")?"Webos":!yt(e,"safari/")||yt(e,"chrome/")||yt(e,"crios/")||yt(e,"android")?!yt(e,"chrome/")&&!yt(e,"crios/")||yt(e,"edge/")?yt(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":"Chrome":"Safari"}var mi={Wc:"FirebaseCore-web",Yc:"FirebaseUI-web"};function gi(t,e){e=e||[];var n,i=[],r={};for(n in mi)r[mi[n]]=!0;for(n=0;n<e.length;n++)void 0!==r[e[n]]&&(delete r[e[n]],i.push(e[n]));return i.sort(),(e=i).length||(e=["FirebaseCore-web"]),"Browser"===(i=fi())?i=vi(r=bi()):"Worker"===i&&(i=vi(r=bi())+"-"+i),i+"/JsCore/"+t+"/"+e.join(",")}function bi(){return u.navigator&&u.navigator.userAgent||""}function yi(t,e){t=t.split("."),e=e||u;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function wi(){try{var t=u.localStorage,e=Ni();if(t)return t.setItem(e,"1"),t.removeItem(e),!ti()||!!u.indexedDB}catch(t){return li()&&!!u.indexedDB}return!1}function Ii(){return(Ei()||"chrome-extension:"===Ti()||ci())&&!pi()&&wi()&&!li()}function Ei(){return"http:"===Ti()||"https:"===Ti()}function Ti(){return u.location&&u.location.protocol||null}function Si(t){return!ii(t=t||bi())&&vi(t)!=di}function Ai(t){return void 0===t?null:Jn(t)}function _i(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function ki(t){if(null!==t)return JSON.parse(t)}function Ni(t){return t||Math.floor(1e9*Math.random()).toString()}function Oi(t){return"Safari"!=vi(t=t||bi())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Pi(){var t=u.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Ci(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=bi(),e=fi(),this.b=ii(t)||"ReactNative"===e}function Di(){var t=u.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Ri(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Li(){return!(!yi("fireauth.oauthhelper",u)&&!yi("fireauth.iframe",u))}Ci.prototype.get=function(){var t=u.navigator;return!t||"boolean"!=typeof t.onLine||!Ei()&&"chrome-extension:"!==Ti()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var xi,ji={};function Mi(t){ji[t]||(ji[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))}try{var Ui={};Object.defineProperty(Ui,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Ui,"abcd",{configurable:!0,enumerable:!0,value:2}),xi=2==Ui.abcd}catch(be){xi=!1}function Vi(t,e,n){xi?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Fi(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Vi(t,n,e[n])}function Bi(t){var e={};return Fi(e,t),e}function Hi(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Vi(e,n,Hi(t[n]));return e}function Ki(t){var e={},n=t[qi],i=t[Gi];if(!(t=t[zi])||t!=Wi&&!n)throw Error("Invalid provider user info!");e[Ji]=i||null,e[Xi]=n||null,Vi(this,$i,t),Vi(this,Yi,Hi(e))}var Wi="EMAIL_SIGNIN",qi="email",Gi="newEmail",zi="requestType",Xi="email",Ji="fromEmail",Yi="data",$i="operation";function Zi(t,e){this.code=tr+t,this.message=e||er[t]||""}function Qi(t){var e=t&&t.code;return e?new Zi(e.substring(tr.length),t.message):null}k(Zi,Error),Zi.prototype.A=function(){return{code:this.code,message:this.message}},Zi.prototype.toJSON=function(){return this.A()};var tr="auth/",er={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function nr(t){var e=Sn(t=An(t),ir)||null,n=Sn(t,rr)||null,i=Sn(t,sr)||null;if(i=i&&cr[i]||null,!e||!n||!i)throw new Zi("argument-error",ir+", "+rr+"and "+sr+" are required in a valid action code URL.");Fi(this,{apiKey:e,operation:i,code:n,continueUrl:Sn(t,or)||null,languageCode:Sn(t,ar)||null,tenantId:Sn(t,ur)||null})}var ir="apiKey",rr="oobCode",or="continueUrl",ar="languageCode",sr="mode",ur="tenantId",cr={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",signIn:Wi,verifyEmail:"VERIFY_EMAIL"};function hr(t){try{return new nr(t)}catch(t){return null}}function lr(t){var e=t[mr];if(void 0===e)throw new Zi("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new Zi("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[fr];if(n&&"object"==typeof n){e=n[yr];var i=n[gr];if(n=n[br],"string"==typeof e&&e.length){if(this.a=e,void 0!==i&&"boolean"!=typeof i)throw new Zi("argument-error",gr+" property must be a boolean when specified.");if(this.g=!!i,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Zi("argument-error",br+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new Zi("argument-error",yr+" property must be a non empty string when specified.");if(void 0!==i||void 0!==n)throw new Zi("missing-android-pkg-name")}}else if(void 0!==n)throw new Zi("argument-error",fr+" property must be a non null object when specified.");if(this.f=null,(e=t[vr])&&"object"==typeof e){if("string"==typeof(e=e[wr])&&e.length)this.f=e;else if(void 0!==e)throw new Zi("argument-error",wr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new Zi("argument-error",vr+" property must be a non null object when specified.");if(void 0!==(e=t[dr])&&"boolean"!=typeof e)throw new Zi("argument-error",dr+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[pr])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new Zi("argument-error",pr+" property must be a non empty string when specified.");this.i=t||null}var fr="android",pr="dynamicLinkDomain",dr="handleCodeInApp",vr="iOS",mr="url",gr="installApp",br="minimumVersion",yr="packageName",wr="bundleId";function Ir(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Er=null,Tr=null;function Sr(t){this.f=t.sub,_(),this.a=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.c=t.firebase&&t.firebase.tenant||null,this.b=!!t.is_anonymous||"anonymous"==this.a}function Ar(t){return(t=_r(t))&&t.sub&&t.iss&&t.aud&&t.exp?new Sr(t):null}function _r(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;i<t.length;){var n=t.charAt(i++),r=Tr[n];if(null!=r)return r;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Er){Er={},Tr={};for(var t=0;65>t;t++)Er[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),Tr[Er[t]]=t,62<=t&&(Tr["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t)]=t)}}();for(var i=0;;){var r=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===r)break;e(r<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Sr.prototype.R=function(){return this.c},Sr.prototype.g=function(){return this.b};var kr,Nr={bd:{cb:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://securetoken.googleapis.com/v1/token",id:"p"},dd:{cb:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},ed:{cb:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ib:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Or(t){for(var e in Nr)if(Nr[e].id===t)return{firebaseEndpoint:(t=Nr[e]).cb,secureTokenEndpoint:t.ib};return null}kr=Or("__EID__")?"__EID__":void 0;var Pr="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Cr=["client_id","response_type","scope","redirect_uri","state"],Dr={Xc:{Ea:"locale",sa:700,ra:600,Fa:"facebook.com",Qa:Cr},Zc:{Ea:null,sa:500,ra:750,Fa:"github.com",Qa:Cr},$c:{Ea:"hl",sa:515,ra:680,Fa:"google.com",Qa:Cr},fd:{Ea:"lang",sa:485,ra:705,Fa:"twitter.com",Qa:Pr},Vc:{Ea:"locale",sa:600,ra:600,Fa:"apple.com",Qa:[]}};function Rr(t){for(var e in Dr)if(Dr[e].Fa==t)return Dr[e];return null}function Lr(t){var e={};e["facebook.com"]=Vr,e["google.com"]=Br,e["github.com"]=Fr,e["twitter.com"]=Hr;var n=t&&t[jr];try{if(n)return e[n]?new e[n](t):new Ur(t);if(void 0!==t[xr])return new Mr(t)}catch(t){}return null}var xr="idToken",jr="providerId";function Mr(t){var e=t[jr];if(!e&&t[xr]){var n=Ar(t[xr]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Vi(this,"providerId",e),Vi(this,"isNewUser",n)}function Ur(t){Mr.call(this,t),Vi(this,"profile",Hi((t=ki(t.rawUserInfo||"{}"))||{}))}function Vr(t){if(Ur.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Fr(t){if(Ur.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Vi(this,"username",this.profile&&this.profile.login||null)}function Br(t){if(Ur.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function Hr(t){if(Ur.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Vi(this,"username",t.screenName||null)}function Kr(t){var e=An(t),n=Sn(e,"link"),i=Sn(An(n),"link");return e=Sn(e,"deep_link_id"),Sn(An(e),"link")||e||i||n||t}function Wr(){}function qr(t,e){return t.then((function(t){if(t[Da]){var n=Ar(t[Da]);if(!n||e!=n.f)throw new Zi("user-mismatch");return t}throw new Zi("user-mismatch")})).s((function(t){throw t&&t.code&&t.code==tr+"user-not-found"?new Zi("user-mismatch"):t}))}function Gr(t,e){if(!e)throw new Zi("internal-error","failed to construct a credential");this.a=e,Vi(this,"providerId",t),Vi(this,"signInMethod",t)}function zr(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function Xr(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new Gr(t.providerId,t.pendingToken)}catch(t){}return null}function Jr(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Vi(this,"idToken",e.idToken),e.accessToken&&Vi(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Vi(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new Zi("internal-error","failed to construct a credential");Vi(this,"accessToken",e.oauthToken),Vi(this,"secret",e.oauthTokenSecret)}Vi(this,"providerId",t),Vi(this,"signInMethod",n)}function Yr(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Mn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function $r(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new Jr(t.providerId,e,t.signInMethod)}catch(t){}}return null}function Zr(t,e){this.Fc=e||[],Fi(this,{providerId:t,isOAuthProvider:!0}),this.zb={},this.eb=(Rr(t)||{}).Ea||null,this.bb=null}function Qr(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new Zi("argument-error",'SAML provider IDs must be prefixed with "saml."');Zr.call(this,t,[])}function to(t){Zr.call(this,t,Cr),this.a=[]}function eo(){to.call(this,"facebook.com")}function no(t){if(!t)throw new Zi("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return y(t)&&(e=t.accessToken),(new eo).credential({accessToken:e})}function io(){to.call(this,"github.com")}function ro(t){if(!t)throw new Zi("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return y(t)&&(e=t.accessToken),(new io).credential({accessToken:e})}function oo(){to.call(this,"google.com"),this.ya("profile")}function ao(t,e){var n=t;return y(t)&&(n=t.idToken,e=t.accessToken),(new oo).credential({idToken:n,accessToken:e})}function so(){Zr.call(this,"twitter.com",Pr)}function uo(t,e){var n=t;if(y(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new Zi("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Jr("twitter.com",n,"twitter.com")}function co(t,e,n){this.a=t,this.c=e,Vi(this,"providerId","password"),Vi(this,"signInMethod",n===lo.EMAIL_LINK_SIGN_IN_METHOD?lo.EMAIL_LINK_SIGN_IN_METHOD:lo.EMAIL_PASSWORD_SIGN_IN_METHOD)}function ho(t){return t&&t.email&&t.password?new co(t.email,t.password,t.signInMethod):null}function lo(){Fi(this,{providerId:"password",isOAuthProvider:!1})}function fo(t,e){if(!(e=po(e)))throw new Zi("argument-error","Invalid email link!");return new co(t,e.code,lo.EMAIL_LINK_SIGN_IN_METHOD)}function po(t){return(t=hr(t=Kr(t)))&&t.operation===Wi?t:null}function vo(t){if(!(t.Va&&t.Ua||t.Ha&&t.ba))throw new Zi("internal-error");this.a=t,Vi(this,"providerId","phone"),Vi(this,"signInMethod","phone")}function mo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return F(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new vo(e)}return null}function go(t){return t.a.Ha&&t.a.ba?{temporaryProof:t.a.Ha,phoneNumber:t.a.ba}:{sessionInfo:t.a.Va,code:t.a.Ua}}function bo(t){try{this.a=t||i.a.auth()}catch(t){throw new Zi("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Fi(this,{providerId:"phone",isOAuthProvider:!1})}function yo(t,e){if(!t)throw new Zi("missing-verification-id");if(!e)throw new Zi("missing-verification-code");return new vo({Va:t,Ua:e})}function wo(t){if(t.temporaryProof&&t.phoneNumber)return new vo({Ha:t.temporaryProof,ba:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,i=t&&t.oauthTokenSecret,r=t&&t.nonce,o=t&&t.oauthIdToken,a=t&&t.pendingToken;try{switch(e){case"google.com":return ao(o,n);case"facebook.com":return no(n);case"github.com":return ro(n);case"twitter.com":return uo(n,i);default:return n||i||o||a?a?0==e.indexOf("saml.")?new Gr(e,a):new Jr(e,{pendingToken:a,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new to(e).credential({idToken:o,accessToken:n,rawNonce:r}):null}}catch(t){return null}}function Io(t){if(!t.isOAuthProvider)throw new Zi("invalid-oauth-provider")}function Eo(t,e,n,i,r,o,a){if(this.c=t,this.b=e||null,this.g=n||null,this.f=i||null,this.i=o||null,this.h=a||null,this.a=r||null,!this.g&&!this.a)throw new Zi("invalid-auth-event");if(this.g&&this.a)throw new Zi("invalid-auth-event");if(this.g&&!this.f)throw new Zi("invalid-auth-event")}function To(t){return(t=t||{}).type?new Eo(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&Qi(t.error),t.postBody,t.tenantId):null}function So(){this.b=null,this.a=[]}k(Ur,Mr),k(Vr,Ur),k(Fr,Ur),k(Br,Ur),k(Hr,Ur),Gr.prototype.na=function(t){return Ya(t,zr(this))},Gr.prototype.b=function(t,e){var n=zr(this);return n.idToken=e,$a(t,n)},Gr.prototype.f=function(t,e){return qr(Za(t,zr(this)),e)},Gr.prototype.A=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},Jr.prototype.na=function(t){return Ya(t,Yr(this))},Jr.prototype.b=function(t,e){var n=Yr(this);return n.idToken=e,$a(t,n)},Jr.prototype.f=function(t,e){return qr(Za(t,Yr(this)),e)},Jr.prototype.A=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},Zr.prototype.Ga=function(t){return this.zb=Y(t),this},k(Qr,Zr),k(to,Zr),to.prototype.ya=function(t){return K(this.a,t)||this.a.push(t),this},to.prototype.Hb=function(){return z(this.a)},to.prototype.credential=function(t,e){var n;if(!(n=y(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new Zi("argument-error","credential failed: must provide the ID token and/or the access token.");return new Jr(this.providerId,n,this.providerId)},k(eo,to),Vi(eo,"PROVIDER_ID","facebook.com"),Vi(eo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),k(io,to),Vi(io,"PROVIDER_ID","github.com"),Vi(io,"GITHUB_SIGN_IN_METHOD","github.com"),k(oo,to),Vi(oo,"PROVIDER_ID","google.com"),Vi(oo,"GOOGLE_SIGN_IN_METHOD","google.com"),k(so,Zr),Vi(so,"PROVIDER_ID","twitter.com"),Vi(so,"TWITTER_SIGN_IN_METHOD","twitter.com"),co.prototype.na=function(t){return this.signInMethod==lo.EMAIL_LINK_SIGN_IN_METHOD?ks(t,as,{email:this.a,oobCode:this.c}):ks(t,Ts,{email:this.a,password:this.c})},co.prototype.b=function(t,e){return this.signInMethod==lo.EMAIL_LINK_SIGN_IN_METHOD?ks(t,ss,{idToken:e,email:this.a,oobCode:this.c}):ks(t,gs,{idToken:e,email:this.a,password:this.c})},co.prototype.f=function(t,e){return qr(this.na(t),e)},co.prototype.A=function(){return{email:this.a,password:this.c,signInMethod:this.signInMethod}},Fi(lo,{PROVIDER_ID:"password"}),Fi(lo,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Fi(lo,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),vo.prototype.na=function(t){return t.Wa(go(this))},vo.prototype.b=function(t,e){var n=go(this);return n.idToken=e,ks(t,As,n)},vo.prototype.f=function(t,e){var n=go(this);return n.operation="REAUTH",qr(t=ks(t,_s,n),e)},vo.prototype.A=function(){var t={providerId:"phone"};return this.a.Va&&(t.verificationId=this.a.Va),this.a.Ua&&(t.verificationCode=this.a.Ua),this.a.Ha&&(t.temporaryProof=this.a.Ha),this.a.ba&&(t.phoneNumber=this.a.ba),t},bo.prototype.Wa=function(t,e){var n=this.a.b;return Zt(e.verify()).then((function(i){if(!c(i))throw new Zi("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":return function(t,e){return ks(t,vs,e)}(n,{phoneNumber:t,recaptchaToken:i}).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new Zi("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Fi(bo,{PROVIDER_ID:"phone"}),Fi(bo,{PHONE_SIGN_IN_METHOD:"phone"}),Eo.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Eo.prototype.R=function(){return this.h},Eo.prototype.A=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.A()}};var Ao,_o=null;function ko(t){var e="unauthorized-domain",n=void 0,i=An(t);t=i.b,"chrome-extension"==(i=i.f)?n=Ut("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==i||"https"==i?n=Ut("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",Zi.call(this,e,n)}function No(t,e,n){Zi.call(this,t,n),(t=e||{}).Ab&&Vi(this,"email",t.Ab),t.ba&&Vi(this,"phoneNumber",t.ba),t.credential&&Vi(this,"credential",t.credential),t.Qb&&Vi(this,"tenantId",t.Qb)}function Oo(t){if(t.code){var e=t.code||"";0==e.indexOf(tr)&&(e=e.substring(tr.length));var n={credential:wo(t),Qb:t.tenantId};if(t.email)n.Ab=t.email;else if(t.phoneNumber)n.ba=t.phoneNumber;else if(!n.credential)return new Zi(e,t.message||void 0);return new No(e,n,t.message)}return null}function Po(){}function Co(t){return t.c||(t.c=t.b())}function Do(){}function Ro(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var i=e[n];try{return new ActiveXObject(i),t.f=i}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function Lo(){}function xo(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=S(this.fc,this),this.a.onerror=S(this.Ib,this),this.a.onprogress=S(this.gc,this),this.a.ontimeout=S(this.kc,this)}function jo(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function Mo(t,e,n){this.reset(t,e,n,void 0,void 0)}function Uo(t){this.f=t,this.b=this.c=this.a=null}function Vo(t,e){this.name=t,this.value=e}k(ko,Zi),k(No,Zi),No.prototype.A=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.A();return e&&Z(t,e),t},No.prototype.toJSON=function(){return this.A()},Po.prototype.c=null,k(Do,Po),Do.prototype.a=function(){var t=Ro(this);return t?new ActiveXObject(t):new XMLHttpRequest},Do.prototype.b=function(){var t={};return Ro(this)&&(t[0]=!0,t[1]=!0),t},Ao=new Do,k(Lo,Po),Lo.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new xo;throw Error("Unsupported browser")},Lo.prototype.b=function(){return{}},(e=xo.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},e.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},e.fc=function(){this.status=200,this.response=this.responseText=this.a.responseText,jo(this,4)},e.Ib=function(){this.status=500,this.response=this.responseText="",jo(this,4)},e.kc=function(){this.Ib()},e.gc=function(){this.status=200,jo(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Mo.prototype.a=null,Mo.prototype.reset=function(t,e,n,i,r){i||_(),delete this.a},Vo.prototype.toString=function(){return this.name};var Fo=new Vo("SEVERE",1e3),Bo=new Vo("WARNING",900),Ho=new Vo("CONFIG",700),Ko=new Vo("FINE",500);Uo.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(C("Root logger has no level set."),null)}(this).value)for(b(e)&&(e=e()),t=new Mo(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var Wo={},qo=null;function Go(t){var e;if(qo||(qo=new Uo(""),Wo[""]=qo,qo.c=Ho),!(e=Wo[t])){e=new Uo(t);var n=t.lastIndexOf("."),i=t.substr(n+1);(n=Go(t.substr(0,n))).b||(n.b={}),n.b[i]=e,e.a=n,Wo[t]=e}return e}function zo(t,e){t&&t.log(Ko,e,void 0)}function Xo(t){this.f=t}function Jo(t){sn.call(this),this.o=t,this.readyState=Yo,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=Go("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}k(Xo,Po),Xo.prototype.a=function(){return new Jo(this.f)},Xo.prototype.b=function(t){return function(){return t}}({}),k(Jo,sn);var Yo=0;function $o(t){t.c.read().then(t.ec.bind(t)).catch(t.Oa.bind(t))}function Zo(t,e){e&&t.f&&(t.status=t.f.status,t.statusText=t.f.statusText),t.readyState=4,t.f=null,t.c=null,t.l=null,Qo(t)}function Qo(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function ta(t){sn.call(this),this.headers=new vn,this.B=t||null,this.c=!1,this.w=this.a=null,this.h=this.O=this.l="",this.f=this.J=this.i=this.I=!1,this.g=0,this.o=null,this.m=ea,this.v=this.P=!1}(e=Jo.prototype).open=function(t,e){if(this.readyState!=Yo)throw this.abort(),Error("Error reopening a connection");this.m=t,this.g=e,this.readyState=1,Qo(this)},e.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.i,method:this.m,credentials:void 0,cache:void 0};t&&(e.body=t),this.o.fetch(new Request(this.g,e)).then(this.jc.bind(this),this.Oa.bind(this))},e.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Zo(this,!1)),this.readyState=Yo},e.jc=function(t){this.a&&(this.f=t,this.b||(this.b=t.headers,this.readyState=2,Qo(this)),this.a&&(this.readyState=3,Qo(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.hc.bind(this),this.Oa.bind(this)):void 0!==u.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.l=new TextDecoder,$o(this)):t.text().then(this.ic.bind(this),this.Oa.bind(this)))))},e.ec=function(t){if(this.a){var e=this.l.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?Zo(this,!0):Qo(this),3==this.readyState&&$o(this)}},e.ic=function(t){this.a&&(this.response=this.responseText=t,Zo(this,!0))},e.hc=function(t){this.a&&(this.response=t,Zo(this,!0))},e.Oa=function(t){var e=this.h;e&&e.log(Bo,"Failed to fetch url "+this.g,t instanceof Error?t:Error(t)),this.a&&Zo(this,!0)},e.setRequestHeader=function(t,e){this.i.append(t,e)},e.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.h)&&t.log(Bo,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var t=this.h;return t&&t.log(Bo,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},k(ta,sn);var ea="";ta.prototype.b=Go("goog.net.XhrIo");var na=/^https?$/i,ia=["POST","PUT"];function ra(t){return"content-type"==t.toLowerCase()}function oa(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,aa(t),ua(t)}function aa(t){t.I||(t.I=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function sa(t){if(t.c&&void 0!==s)if(t.w[1]&&4==ha(t)&&2==la(t))zo(t.b,fa(t,"Local request error detected and ignored"));else if(t.i&&4==ha(t))ln(t.Lb,0,t);else if(t.dispatchEvent("readystatechange"),4==ha(t)){zo(t.b,fa(t,"Request complete")),t.c=!1;try{var e,n=la(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break t;default:i=!1}if(!(e=i)){var r;if(r=0===n){var o=String(t.l).match(bn)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}r=!na.test(o?o.toLowerCase():"")}e=r}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<ha(t)?t.a.statusText:""}catch(e){zo(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+la(t)+"]",aa(t)}}finally{ua(t)}}}function ua(t,e){if(t.a){ca(t);var n=t.a,i=t.w[0]?p:null;t.a=null,t.w=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=i}catch(e){(t=t.b)&&t.log(Fo,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function ca(t){t.a&&t.v&&(t.a.ontimeout=null),t.o&&(u.clearTimeout(t.o),t.o=null)}function ha(t){return t.a?t.a.readyState:0}function la(t){try{return 2<ha(t)?t.a.status:-1}catch(t){return-1}}function fa(t,e){return e+" ["+t.O+" "+t.l+" "+la(t)+"]"}function pa(t){var e=Sa;this.g=[],this.v=e,this.o=t||null,this.f=this.a=!1,this.c=void 0,this.u=this.w=this.i=!1,this.h=0,this.b=null,this.l=0}function da(t,e,n){t.a=!0,t.c=n,t.f=!e,ba(t)}function va(t){if(t.a){if(!t.u)throw new ya(t);t.u=!1}}function ma(t,e,n,i){t.g.push([e,n,i]),t.a&&ba(t)}function ga(t){return H(t.g,(function(t){return b(t[1])}))}function ba(t){if(t.h&&t.a&&ga(t)){var e=t.h,n=Ea[e];n&&(u.clearTimeout(n.a),delete Ea[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var i=n=!1;t.g.length&&!t.i;){var r=t.g.shift(),o=r[0],a=r[1];if(r=r[2],o=t.f?a:o)try{var s=o.call(r||t.o,e);void 0!==s&&(t.f=t.f&&(s==e||s instanceof Error),t.c=e=s),(N(e)||"function"==typeof u.Promise&&e instanceof u.Promise)&&(i=!0,t.i=!0)}catch(i){e=i,t.f=!0,ga(t)||(n=!0)}}t.c=e,i&&(s=S(t.m,t,!0),i=S(t.m,t,!1),e instanceof pa?(ma(e,s,i),e.w=!0):e.then(s,i)),n&&(e=new Ia(e),Ea[e.a]=e,t.h=e.a)}function ya(){O.call(this)}function wa(){O.call(this)}function Ia(t){this.a=u.setTimeout(S(this.c,this),0),this.b=t}(e=ta.prototype).Ia=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",zo(this.b,fa(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(zo(this.b,fa(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ua(this))},e.za=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ua(this,!0)),ta.qb.za.call(this)},e.Lb=function(){this.va||(this.J||this.i||this.f?sa(this):this.yc())},e.yc=function(){sa(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ea:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(Fo,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return zo(this.b,"Can not get response: "+t.message),null}},pa.prototype.cancel=function(t){if(this.a)this.c instanceof pa&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.v?this.v.call(this.o,this):this.u=!0,this.a||(t=new wa(this),va(this),da(this,!1,t))}},pa.prototype.m=function(t,e){this.i=!1,da(this,t,e)},pa.prototype.then=function(t,e,n){var i,r,o=new qt((function(t,e){i=t,r=e}));return ma(this,i,(function(t){t instanceof wa?o.cancel():r(t)})),o.then(t,e,n)},pa.prototype.$goog_Thenable=!0,k(ya,O),ya.prototype.message="Deferred has already fired",ya.prototype.name="AlreadyCalledError",k(wa,O),wa.prototype.message="Deferred was canceled",wa.prototype.name="CanceledError",Ia.prototype.c=function(){throw delete Ea[this.a],this.b};var Ea={};function Ta(t){var e={},n=e.document||document,i=ot(t).toString(),r=document.createElement("SCRIPT"),o={Nb:r,Ia:void 0},a=new pa(o),s=null,c=null!=e.timeout?e.timeout:5e3;return 0<c&&(s=window.setTimeout((function(){Aa(r,!0);var t=new Na(ka,"Timeout reached for loading script "+i);va(a),da(a,!1,t)}),c),o.Ia=s),r.onload=r.onreadystatechange=function(){r.readyState&&"loaded"!=r.readyState&&"complete"!=r.readyState||(Aa(r,e.hd||!1,s),va(a),da(a,!0,null))},r.onerror=function(){Aa(r,!0,s);var t=new Na(_a,"Error while loading script "+i);va(a),da(a,!1,t)},Z(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),qn(r,o),function(t,e){U(t,"HTMLScriptElement"),t.src=ot(e),null===f&&(f=(e=(e=u.document).querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&l.test(e)?e:""),(e=f)&&t.setAttribute("nonce",e)}(r,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(r),a}function Sa(){if(this&&this.Nb){var t=this.Nb;t&&"SCRIPT"==t.tagName&&Aa(t,!0,this.Ia)}}function Aa(t,e,n){null!=n&&u.clearTimeout(n),t.onload=p,t.onerror=p,t.onreadystatechange=p,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var _a=0,ka=1;function Na(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),O.call(this,n),this.code=t}function Oa(t){this.f=t}function Pa(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.u=t.secureTokenTimeout||Ra,this.g=Y(t.secureTokenHeaders||La),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.firebaseTimeout||xa,this.a=Y(t.firebaseHeaders||ja),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==fi(),!(n=u.XMLHttpRequest||n&&i.a.INTERNAL.node&&i.a.INTERNAL.node.XMLHttpRequest)&&!li())throw new Zi("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,li()?this.f=new Xo(self):pi()?this.f=new Oa(n):this.f=new Lo,this.b=null}k(Na,O),k(Oa,Po),Oa.prototype.a=function(){return new this.f},Oa.prototype.b=function(){return{}};var Ca,Da="idToken",Ra=new Ci(3e4,6e4),La={"Content-Type":"application/x-www-form-urlencoded"},xa=new Ci(3e4,6e4),ja={"Content-Type":"application/json"};function Ma(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function Ua(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function Va(t,e,n,i,r,o,a){(function(){var t=bi();return!((t="Chrome"!=vi(t)?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||we&&Oe&&!(9<Oe))})()||li()?t=S(t.o,t):(Ca||(Ca=new qt((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(u[Ba]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){ma(t,null,e,void 0)}(Ta(at(Fa,{onload:Ba})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=S(t.m,t)),t(e,n,i,r,o,a)}Pa.prototype.R=function(){return this.b},Pa.prototype.o=function(t,e,n,i,r,o){if(li()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new Zi("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new ta(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}un(a,"complete",(function(){s&&clearTimeout(s);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return zo(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),cn(a,"ready",(function(){s&&clearTimeout(s),ve(this)})),cn(a,"timeout",(function(){s&&clearTimeout(s),ve(this),e&&e(null)})),function(t,e,n,i,r){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.O=n,t.I=!1,t.c=!0,t.a=t.B?t.B.a():Ao.a(),t.w=t.B?Co(t.B):Co(Ao),t.a.onreadystatechange=S(t.Lb,t);try{zo(t.b,fa(t,"Opening Xhr")),t.J=!0,t.a.open(n,String(e),!0),t.J=!1}catch(e){return zo(t.b,fa(t,"Error opening Xhr: "+e.message)),void oa(t,e)}e=i||"";var o=new vn(t.headers);r&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(g(t)||c(t))F(t,e,void 0);else for(var n=dn(t),i=pn(t),r=i.length,o=0;o<r;o++)e.call(void 0,i[o],n&&n[o],t)}(r,(function(t,e){o.set(e,t)})),r=function(t){t:{for(var e=ra,n=t.length,i=c(t)?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t)){e=r;break t}e=-1}return 0>e?null:c(t)?t.charAt(e):t[e]}(o.X()),i=u.FormData&&e instanceof u.FormData,!K(ia,n)||r||i||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.P&&(t.a.withCredentials=t.P);try{ca(t),0<t.g&&(t.v=function(t){return we&&Ce(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),zo(t.b,fa(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.v)),t.v?(t.a.timeout=t.g,t.a.ontimeout=S(t.Ia,t)):t.o=ln(t.Ia,t.g,t)),zo(t.b,fa(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){zo(t.b,fa(t,"Send error: "+e.message)),oa(t,e)}}(a,t,n,i,r)};var Fa=new Q(nt,"https://apis.google.com/js/client.js?onload=%{onload}"),Ba="__fcb"+Math.floor(1e6*Math.random()).toString();function Ha(t){if(!c(t=t.email)||!si.test(t))throw new Zi("invalid-email")}function Ka(t){"email"in t&&Ha(t)}function Wa(t){if(!t[Da])throw new Zi("internal-error")}function qa(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new Zi("internal-error")}else{if(!t.sessionInfo)throw new Zi("missing-verification-id");if(!t.code)throw new Zi("missing-verification-code")}}Pa.prototype.m=function(t,e,n,i,r){var o=this;Ca.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:i,headers:r,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})})).s((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},Pa.prototype.ob=function(){return ks(this,bs,{})},Pa.prototype.rb=function(t,e){return ks(this,ms,{idToken:t,email:e})},Pa.prototype.sb=function(t,e){return ks(this,gs,{idToken:t,password:e})};var Ga={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function za(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new Zi("internal-error")}function Xa(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&Vn(t=new xn(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function Ja(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Oo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Oo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Oo(t)):t.errorMessage&&(e=Ns(t.errorMessage)),e)throw e;if(!t[Da])throw new Zi("internal-error")}function Ya(t,e){return e.returnIdpCredential=!0,ks(t,ys,e)}function $a(t,e){return e.returnIdpCredential=!0,ks(t,Is,e)}function Za(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,ks(t,ws,e)}function Qa(t){if(!t.oobCode)throw new Zi("invalid-action-code")}(e=Pa.prototype).tb=function(t,e){var n={idToken:t},i=[];return X(Ga,(function(t,r){var o=e[r];null===o?i.push(t):r in e&&(n[r]=o)})),i.length&&(n.deleteAttribute=i),ks(this,ms,n)},e.kb=function(t,e){return Z(t={requestType:"PASSWORD_RESET",email:t},e),ks(this,ls,t)},e.lb=function(t,e){return Z(t={requestType:"EMAIL_SIGNIN",email:t},e),ks(this,cs,t)},e.jb=function(t,e){return Z(t={requestType:"VERIFY_EMAIL",idToken:t},e),ks(this,hs,t)},e.Wa=function(t){return ks(this,Ss,t)},e.ab=function(t,e){return ks(this,ds,{oobCode:t,newPassword:e})},e.Ma=function(t){return ks(this,es,{oobCode:t})},e.Ya=function(t){return ks(this,ts,{oobCode:t})};var ts={endpoint:"setAccountInfo",D:Qa,fa:"email",F:!0},es={endpoint:"resetPassword",D:Qa,K:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e)throw new Zi("internal-error")},F:!0},ns={endpoint:"signupNewUser",D:function(t){if(Ha(t),!t.password)throw new Zi("weak-password")},K:Wa,T:!0,F:!0},is={endpoint:"createAuthUri",F:!0},rs={endpoint:"deleteAccount",V:["idToken"]},os={endpoint:"setAccountInfo",V:["idToken","deleteProvider"],D:function(t){if(!m(t.deleteProvider))throw new Zi("internal-error")}},as={endpoint:"emailLinkSignin",V:["email","oobCode"],D:Ha,K:Wa,T:!0,F:!0},ss={endpoint:"emailLinkSignin",V:["idToken","email","oobCode"],D:Ha,K:Wa,T:!0},us={endpoint:"getAccountInfo"},cs={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new Zi("internal-error");Ha(t)},fa:"email",F:!0},hs={endpoint:"getOobConfirmationCode",V:["idToken","requestType"],D:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new Zi("internal-error")},fa:"email",F:!0},ls={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(t){if("PASSWORD_RESET"!=t.requestType)throw new Zi("internal-error");Ha(t)},fa:"email",F:!0},fs={wb:!0,endpoint:"getProjectConfig",Kb:"GET"},ps={wb:!0,endpoint:"getRecaptchaParam",Kb:"GET",K:function(t){if(!t.recaptchaSiteKey)throw new Zi("internal-error")}},ds={endpoint:"resetPassword",D:Qa,fa:"email",F:!0},vs={endpoint:"sendVerificationCode",V:["phoneNumber","recaptchaToken"],fa:"sessionInfo",F:!0},ms={endpoint:"setAccountInfo",V:["idToken"],D:Ka,T:!0},gs={endpoint:"setAccountInfo",V:["idToken"],D:function(t){if(Ka(t),!t.password)throw new Zi("weak-password")},K:Wa,T:!0},bs={endpoint:"signupNewUser",K:Wa,T:!0,F:!0},ys={endpoint:"verifyAssertion",D:za,Ra:Xa,K:Ja,T:!0,F:!0},ws={endpoint:"verifyAssertion",D:za,Ra:Xa,K:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new Zi("user-not-found");if(t.errorMessage)throw Ns(t.errorMessage);if(!t[Da])throw new Zi("internal-error")},T:!0,F:!0},Is={endpoint:"verifyAssertion",D:function(t){if(za(t),!t.idToken)throw new Zi("internal-error")},Ra:Xa,K:Ja,T:!0},Es={endpoint:"verifyCustomToken",D:function(t){if(!t.token)throw new Zi("invalid-custom-token")},K:Wa,T:!0,F:!0},Ts={endpoint:"verifyPassword",D:function(t){if(Ha(t),!t.password)throw new Zi("wrong-password")},K:Wa,T:!0,F:!0},Ss={endpoint:"verifyPhoneNumber",D:qa,K:Wa,F:!0},As={endpoint:"verifyPhoneNumber",D:function(t){if(!t.idToken)throw new Zi("internal-error");qa(t)},K:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Oo(t);Wa(t)}},_s={Yb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",D:qa,K:Wa,F:!0};function ks(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var i=t[e[n]];if(null==i||""===i)return!1}return!0}(n,e.V))return Qt(new Zi("internal-error"));var i,r=e.Kb||"POST";return Zt(n).then(e.D).then((function(){return e.T&&(n.returnSecureToken=!0),e.F&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,i,r,o){var a=An(t.h+e);Tn(a,"key",t.c),o&&Tn(a,"cb",_().toString());var s="GET"==n;if(s)for(var u in i)i.hasOwnProperty(u)&&Tn(a,u,i[u]);return new qt((function(e,o){Va(t,a.toString(),(function(t){t?t.error?o(Os(t,r||{})):e(t):o(new Zi("network-request-failed"))}),n,s?void 0:Jn(_i(i)),t.a,t.i.get())}))}(t,e.endpoint,r,n,e.Yb,e.wb||!1)})).then((function(t){return i=t,e.Ra?e.Ra(n,i):i})).then(e.K).then((function(){if(!e.fa)return i;if(!(e.fa in i))throw new Zi("internal-error");return i[e.fa]}))}function Ns(t){return Os({error:{errors:[{message:t}],code:400,message:t}})}function Os(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",i={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=i[n]?new Zi(i[n]):null)return n;for(var r in n=t.error&&t.error.message||"",Z(i={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,i)if(0===n.indexOf(r))return new Zi(i[r],e);return!e&&t&&(e=Ai(t)),new Zi("internal-error",e)}function Ps(t){this.b=t,this.a=null,this.gb=function(t){return(Ls||(Ls=new qt((function(t,e){function n(){Pi(),yi("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Pi(),e(Error("Network Error"))},timeout:Ds.get()})}if(yi("gapi.iframes.Iframe"))t();else if(yi("gapi.load"))n();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[i]=function(){yi("gapi.load")?n():e(Error("Network Error"))},Zt(Ta(i=at(Cs,{onload:i}))).s((function(){e(Error("Network Error"))}))}})).s((function(t){throw Ls=null,t})))).then((function(){return new qt((function(e,n){yi("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:yi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(i){function r(){clearTimeout(o),e()}t.a=i,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),Rs.get());i.ping(r).then(r,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var Cs=new Q(nt,"https://apis.google.com/js/api.js?onload=%{onload}"),Ds=new Ci(3e4,6e4),Rs=new Ci(5e3,15e3),Ls=null;function xs(t,e,n){this.i=t,this.g=e,this.h=n,this.f=null,this.a=_n(this.i,"/__/auth/iframe"),Tn(this.a,"apiKey",this.g),Tn(this.a,"appName",this.h),this.b=null,this.c=[]}function js(t,e,n,i,r){this.o=t,this.m=e,this.c=n,this.u=i,this.i=this.g=this.l=null,this.a=r,this.h=this.f=null}function Ms(t){try{return i.a.app(t).auth().Ca()}catch(t){return[]}}function Us(t,e,n,i,r){this.u=t,this.f=e,this.b=n,this.c=i||null,this.h=r||null,this.m=this.o=this.v=null,this.g=[],this.l=this.a=null}function Vs(t){var e=ei();return function(t){return ks(t,fs,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=An(e),i=n.f;n=n.b;for(var r=0;r<t.length;r++){var o=t[r],a=n,s=i;if(0==o.indexOf("chrome-extension://")?a=An(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:ai.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new ko(ei())}))}function Fs(t){return t.l?t.l:(t.l=ui().then((function(){if(!t.o){var e=t.c,n=t.h,i=Ms(t.b),r=new xs(t.u,t.f,t.b);r.f=e,r.b=n,r.c=z(i||[]),t.o=r.toString()}t.i=new Ps(t.o),function(t){if(!t.i)throw Error("IfcHandler must be initialized!");!function(t,e){t.gb.then((function(){t.a.register("authEvent",e,yi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.i,(function(e){var n={};if(e&&e.authEvent){var i=!1;for(e=To(e.authEvent),n=0;n<t.g.length;n++)i=t.g[n](e)||i;return(n={}).status=i?"ACK":"ERROR",Zt(n)}return n.status="ERROR",Zt(n)}))}(t)})),t.l)}function Bs(t){return t.m||(t.v=t.c?gi(t.c,Ms(t.b)):null,t.m=new Pa(t.f,Or(t.h),t.v)),t.m}function Hs(t,e,n,i,r,o,a,s,u,c,h){return(t=new js(t,e,n,i,r)).l=o,t.g=a,t.i=s,t.b=Y(u||null),t.f=c,t.nb(h).toString()}function Ks(t){if(this.a=t||i.a.INTERNAL.reactNative&&i.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Zi("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Ws(t){this.b=t,this.a={},this.f=S(this.c,this)}xs.prototype.toString=function(){return this.f?Tn(this.a,"v",this.f):Un(this.a.a,"v"),this.b?Tn(this.a,"eid",this.b):Un(this.a.a,"eid"),this.c.length?Tn(this.a,"fw",this.c.join(",")):Un(this.a.a,"fw"),this.a.toString()},js.prototype.nb=function(t){return this.h=t,this},js.prototype.toString=function(){var t=_n(this.o,"/__/auth/handler");if(Tn(t,"apiKey",this.m),Tn(t,"appName",this.c),Tn(t,"authType",this.u),this.a.isOAuthProvider){var e=this.a;try{var n=i.a.app(this.c).auth().ha()}catch(t){n=null}for(var r in e.bb=n,Tn(t,"providerId",this.a.providerId),n=_i((e=this.a).zb))n[r]=n[r].toString();r=e.Fc,n=Y(n);for(var o=0;o<r.length;o++){var a=r[o];a in n&&delete n[a]}e.eb&&e.bb&&!n[e.eb]&&(n[e.eb]=e.bb),J(n)||Tn(t,"customParameters",Ai(n))}if("function"==typeof this.a.Hb&&(e=this.a.Hb()).length&&Tn(t,"scopes",e.join(",")),this.l?Tn(t,"redirectUrl",this.l):Un(t.a,"redirectUrl"),this.g?Tn(t,"eventId",this.g):Un(t.a,"eventId"),this.i?Tn(t,"v",this.i):Un(t.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Sn(t,s)&&Tn(t,s,this.b[s]);return this.h?Tn(t,"tid",this.h):Un(t.a,"tid"),this.f?Tn(t,"eid",this.f):Un(t.a,"eid"),(s=Ms(this.c)).length&&Tn(t,"fw",s.join(",")),t.toString()},(e=Us.prototype).Fb=function(t,e,n){var i=new Zi("popup-closed-by-user"),r=new Zi("web-storage-unsupported"),o=this,a=!1;return this.ia().then((function(){(function(t){var e={type:"webStorageSupport"};return Fs(t).then((function(){return function(t,e){return t.gb.then((function(){return new qt((function(n){t.a.send(e.type,e,n,yi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.i,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&ri(t),e(r),a=!0)}))})).s((function(){})).then((function(){if(!a)return function(t){return new qt((function(e){return function n(){fn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!a)return fn(n).then((function(){e(i)}))}))},e.Ob=function(){var t=bi();return!Si(t)&&!Oi(t)},e.Jb=function(){return!1},e.Db=function(t,e,n,i,r,o,a,s){if(!t)return Qt(new Zi("popup-blocked"));if(a&&!Si())return this.ia().s((function(e){ri(t),r(e)})),i(),Zt();this.a||(this.a=Vs(Bs(this)));var u=this;return this.a.then((function(){var e=u.ia().s((function(e){throw ri(t),r(e),e}));return i(),e})).then((function(){Io(n),a||ni(Hs(u.u,u.f,u.b,e,n,null,o,u.c,void 0,u.h,s),t)})).s((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},e.Eb=function(t,e,n,i){this.a||(this.a=Vs(Bs(this)));var r=this;return this.a.then((function(){Io(e),ni(Hs(r.u,r.f,r.b,t,e,ei(),n,r.c,void 0,r.h,i))})).s((function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t}))},e.ia=function(){var t=this;return Fs(this).then((function(){return t.i.gb})).s((function(){throw t.a=null,new Zi("network-request-failed")}))},e.Rb=function(){return!0},e.Aa=function(t){this.g.push(t)},e.Na=function(t){q(this.g,(function(e){return e==t}))},(e=Ks.prototype).get=function(t){return Zt(this.a.getItem(t)).then((function(t){return t&&ki(t)}))},e.set=function(t,e){return Zt(this.a.setItem(t,Ai(e)))},e.S=function(t){return Zt(this.a.removeItem(t))},e.$=function(){},e.ea=function(){};var qs,Gs=[];function zs(t,e,n){J(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Xs(t){this.a=t}function Js(t){this.c=t,this.b=!1,this.a=[]}function Ys(t,e,n,i){var r,o,a,s,u=n||{},c=null;if(t.b)return Qt(Error("connection_unavailable"));var h=i?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new qt((function(n,i){l?(r=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout((function(){i(Error("unsupported_event"))}),h),c={messageChannel:l,onMessage:o=function(t){t.data.eventId===r&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout((function(){i(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):i(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),i(Error("invalid_response"))))}},t.a.push(c),l.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:r,data:u},[l.port2])):i(Error("connection_unavailable"))})).then((function(e){return $s(t,c),e})).s((function(e){throw $s(t,c),e}))}function $s(t,e){if(e){var n=e.messageChannel,i=e.onMessage;n&&(n.port1.removeEventListener("message",i),n.port1.close()),q(t.a,(function(t){return t==e}))}}function Zs(){if(!tu())throw new Zi("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.o=!1,this.h=null;var t=this;li()&&self?(this.l=function(){var t=li()?self:null;if(F(Gs,(function(n){n.b==t&&(e=n)})),!e){var e=new Ws(t);Gs.push(e)}return e}(),zs(this.l,"keyChanged",(function(e,n){return ou(t).then((function(e){return 0<e.length&&F(t.a,(function(t){t(e)})),{keyProcessed:K(e,n.key)}}))})),zs(this.l,"ping",(function(){return Zt(["keyChanged"])}))):function(){var t=u.navigator;return t&&t.serviceWorker?Zt().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).s((function(){return null})):Zt(null)}().then((function(e){(t.h=e)&&(t.g=new Js(new Xs(e)),Ys(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&K(e[0].value,"keyChanged")&&(t.o=!0)})).s((function(){})))}))}function Qs(t){return t.m||(t.m=function t(e){return new qt((function(n,i){var r=e.u.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}i(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){i(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?n(r):function(t){return new qt((function(e,n){var i=t.u.deleteDatabase("firebaseLocalStorageDb");i.onsuccess=function(){e()},i.onerror=function(t){n(Error(t.target.error))}}))}(e).then((function(){return t(e)})).then((function(t){n(t)})).s((function(t){i(t)}))}}))}(t)),t.m}function tu(){try{return!!u.indexedDB}catch(t){return!1}}function eu(t){return t.objectStore("firebaseLocalStorage")}function nu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function iu(t){return new qt((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function ru(t,e){return t.g&&t.h&&function(){var t=u.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Ys(t.g,"keyChanged",{key:e},t.o).then((function(){})).s((function(){})):Zt()}function ou(t){return Qs(t).then((function(t){var e=eu(nu(t,!1));return e.getAll?iu(e.getAll()):new qt((function(t,n){var i=[],r=e.openCursor();r.onsuccess=function(e){(e=e.target.result)?(i.push(e.value),e.continue()):t(i)},r.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},i=[];if(0==t.b){for(i=0;i<e.length;i++)n[e[i].fbase_key]=e[i].value;i=function t(e,n){var i,r=[];for(i in e)i in n?typeof e[i]!=typeof n[i]?r.push(i):"object"==typeof e[i]&&null!=e[i]&&null!=n[i]?0<t(e[i],n[i]).length&&r.push(i):e[i]!==n[i]&&r.push(i):r.push(i);for(i in n)i in e||r.push(i);return r}(t.c,n),t.c=n}return i}))}function au(t){t.i&&t.i.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function su(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Zt().then((function(){if(tu()){var t=Ni(),i="__sak"+t;return qs||(qs=new Zs),(n=qs).set(i,t).then((function(){return n.get(i)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.S(i)})).then((function(){return n})).s((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.$((function(t){F(e.a,(function(e){e(t)}))})),t}))}function uu(){this.a={},this.type="inMemory"}function cu(){if(!function(){var t="Node"==fi();if(!(t=hu()||t&&i.a.INTERNAL.node&&i.a.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==fi())throw new Zi("internal-error","The LocalStorage compatibility library was not found.");throw new Zi("web-storage-unsupported")}this.a=hu()||i.a.INTERNAL.node.localStorage,this.type="localStorage"}function hu(){try{var t=u.localStorage,e=Ni();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function lu(){this.type="nullStorage"}function fu(){if(!function(){var t="Node"==fi();if(!(t=pu()||t&&i.a.INTERNAL.node&&i.a.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==fi())throw new Zi("internal-error","The SessionStorage compatibility library was not found.");throw new Zi("web-storage-unsupported")}this.a=pu()||i.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function pu(){try{var t=u.sessionStorage,e=Ni();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function du(){var t={};t.Browser=gu,t.Node=bu,t.ReactNative=yu,t.Worker=wu,this.a=t[fi()]}Ws.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,i=this.a[e];if(i&&0<i.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var r=[];F(i,(function(e){r.push(Zt().then((function(){return e(t.origin,t.data.data)})))})),ee(r).then((function(i){var r=[];F(i,(function(t){r.push({fulfilled:t.Gb,value:t.value,reason:t.reason?t.reason.message:void 0})})),F(r,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:r})}))}},Xs.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Js.prototype.close=function(){for(;0<this.a.length;)$s(this,this.a[0]);this.b=!0},(e=Zs.prototype).set=function(t,e){var n,i=!1,r=this;return Qs(this).then((function(e){return iu((e=eu(nu(n=e,!0))).get(t))})).then((function(o){var a=eu(nu(n,!0));return o?(o.value=e,iu(a.put(o))):(r.b++,i=!0,(o={}).fbase_key=t,o.value=e,iu(a.add(o)))})).then((function(){return r.c[t]=e,ru(r,t)})).ka((function(){i&&r.b--}))},e.get=function(t){return Qs(this).then((function(e){return iu(eu(nu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},e.S=function(t){var e=!1,n=this;return Qs(this).then((function(i){return e=!0,n.b++,iu(eu(nu(i,!0)).delete(t))})).then((function(){return delete n.c[t],ru(n,t)})).ka((function(){e&&n.b--}))},e.$=function(t){0==this.a.length&&function(t){au(t),function e(){t.f=setTimeout((function(){t.i=ou(t).then((function(e){0<e.length&&F(t.a,(function(t){t(e)}))})).then((function(){e()})).s((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},e.ea=function(t){q(this.a,(function(e){return e==t})),0==this.a.length&&au(this)},(e=su.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},e.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},e.S=function(t){return this.b.then((function(e){return e.S(t)}))},e.$=function(t){this.a.push(t)},e.ea=function(t){q(this.a,(function(e){return e==t}))},(e=uu.prototype).get=function(t){return Zt(this.a[t])},e.set=function(t,e){return this.a[t]=e,Zt()},e.S=function(t){return delete this.a[t],Zt()},e.$=function(){},e.ea=function(){},(e=cu.prototype).get=function(t){var e=this;return Zt().then((function(){return ki(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return Zt().then((function(){var i=Ai(e);null===i?n.S(t):n.a.setItem(t,i)}))},e.S=function(t){var e=this;return Zt().then((function(){e.a.removeItem(t)}))},e.$=function(t){u.window&&Xe(u.window,"storage",t)},e.ea=function(t){u.window&&$e(u.window,"storage",t)},(e=lu.prototype).get=function(){return Zt(null)},e.set=function(){return Zt()},e.S=function(){return Zt()},e.$=function(){},e.ea=function(){},(e=fu.prototype).get=function(t){var e=this;return Zt().then((function(){return ki(e.a.getItem(t))}))},e.set=function(t,e){var n=this;return Zt().then((function(){var i=Ai(e);null===i?n.S(t):n.a.setItem(t,i)}))},e.S=function(t){var e=this;return Zt().then((function(){e.a.removeItem(t)}))},e.$=function(){},e.ea=function(){};var vu,mu,gu={C:cu,Ta:fu},bu={C:cu,Ta:fu},yu={C:Ks,Ta:lu},wu={C:cu,Ta:lu},Iu={ad:"local",NONE:"none",cd:"session"};function Eu(){var t=!(Oi(bi())||!hi()),e=Si(),n=wi();this.m=t,this.h=e,this.l=n,this.a={},vu||(vu=new du),t=vu;try{this.g=!ti()&&Li()||!u.indexedDB?new t.a.C:new su(li()?new uu:new t.a.C)}catch(t){this.g=new uu,this.h=!0}try{this.i=new t.a.Ta}catch(t){this.i=new uu}this.u=new uu,this.f=S(this.Pb,this),this.b={}}function Tu(){return mu||(mu=new Eu),mu}function Su(t,e){switch(e){case"session":return t.i;case"none":return t.u;default:return t.g}}function Au(t,e){return"firebase:"+t.name+(e?":"+e:"")}function _u(t,e,n){return n=Au(e,n),"local"==e.C&&(t.b[n]=null),Su(t,e.C).S(n)}function ku(t){t.c&&(clearInterval(t.c),t.c=null)}function Nu(t){this.a=t,this.b=Tu()}(e=Eu.prototype).get=function(t,e){return Su(this,t.C).get(Au(t,e))},e.set=function(t,e,n){var i=Au(t,n),r=this,o=Su(this,t.C);return o.set(i,e).then((function(){return o.get(i)})).then((function(e){"local"==t.C&&(r.b[i]=e)}))},e.addListener=function(t,e,n){t=Au(t,e),this.l&&(this.b[t]=u.localStorage.getItem(t)),J(this.a)&&(Su(this,"local").$(this.f),this.h||(ti()||!Li())&&u.indexedDB||!this.l||function(t){ku(t),t.c=setInterval((function(){for(var e in t.a){var n=u.localStorage.getItem(e),i=t.b[e];n!=i&&(t.b[e]=n,n=new Me({type:"storage",key:e,target:window,oldValue:i,newValue:n,a:!0}),t.Pb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},e.removeListener=function(t,e,n){t=Au(t,e),this.a[t]&&(q(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),J(this.a)&&(Su(this,"local").ea(this.f),ku(this))},e.Pb=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var n in this.a){var i=this.b[n];void 0===i&&(i=null);var r=u.localStorage.getItem(n);r!==i&&(this.b[n]=r,this.$a(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?Su(this,"local").ea(this.f):ku(this),this.m)if(n=u.localStorage.getItem(e),(i=t.a.newValue)!==n)null!==i?u.localStorage.setItem(e,i):u.localStorage.removeItem(e);else if(this.b[e]===i&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===u.localStorage.getItem(e)||(o.b[e]=u.localStorage.getItem(e),o.$a(e))},we&&Oe&&10==Oe&&u.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else F(t,S(this.$a,this))},e.$a=function(t){this.a[t]&&F(this.a[t],(function(t){t()}))};var Ou,Pu={name:"authEvent",C:"local"};function Cu(){this.a=Tu()}function Du(t,e){this.b=Ru,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0!==Ou||(Ou=u.Int32Array?new Int32Array(Fu):Fu),this.reset()}k(Du,(function(){this.b=-1}));for(var Ru=64,Lu=Ru-1,xu=[],ju=0;ju<Lu;ju++)xu[ju]=0;var Mu=G(128,xu);function Uu(t){for(var e=t.f,n=t.l,i=0,r=0;r<e.length;)n[i++]=e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3],r=4*i;for(e=16;64>e;e++){r=0|n[e-15],i=0|n[e-2];var o=(0|n[e-16])+((r>>>7|r<<25)^(r>>>18|r<<14)^r>>>3)|0,a=(0|n[e-7])+((i>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)|0;n[e]=o+a|0}i=0|t.a[0],r=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10))+(i&r^i&s^r&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|Ou[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=r,r=i,i=a+f|0}t.a[0]=t.a[0]+i|0,t.a[1]=t.a[1]+r|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function Vu(t,e,n){void 0===n&&(n=e.length);var i=0,r=t.c;if(c(e))for(;i<n;)t.f[r++]=e.charCodeAt(i++),r==t.b&&(Uu(t),r=0);else{if(!g(e))throw Error("message must be string or array");for(;i<n;){var o=e[i++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[r++]=o,r==t.b&&(Uu(t),r=0)}}t.c=r,t.g+=n}Du.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):z(this.h)};var Fu=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Bu(){Du.call(this,8,Hu)}k(Bu,Du);var Hu=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Ku(t,e,n,i,r){this.u=t,this.i=e,this.l=n,this.m=i||null,this.o=r||null,this.h=e+":"+n,this.v=new Cu,this.g=new Nu(this.h),this.f=null,this.b=[],this.a=this.c=null}function Wu(t){return new Zi("invalid-cordova-configuration",t)}function qu(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Gu(t){return t.f||(t.f=t.ia().then((function(){return new qt((function(e){t.Aa((function n(i){return e(i),t.Na(n),!1})),function(t){function e(e){i=!0,r&&r.cancel(),zu(t).then((function(i){var r=n;if(i&&e&&e.url){var o=null;-1!=(r=Kr(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=ki(Sn(o=An(r),"firebaseError")||null))?Qi(o):null)?new Eo(i.c,i.b,null,null,o,null,i.R()):new Eo(i.c,i.b,r,i.f,null,null,i.R())),r=o||n}qu(t,r)}))}var n=new Eo("unknown",null,null,null,new Zi("no-auth-event")),i=!1,r=fn(500).then((function(){return zu(t).then((function(){i||qu(t,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(yi("BuildInfo.packageName",u).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},_o||(_o=new So),function(t){var e=_o;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=yi("universalLinks.subscribe",u))&&t(null,e.b))}(e)}(t)}))}))),t.f}function zu(t){var e=null;return function(t){return t.b.get(Pu,t.a).then((function(t){return To(t)}))}(t.g).then((function(n){return e=n,_u((n=t.g).b,Pu,n.a)})).then((function(){return e}))}function Xu(t){this.a=t,this.b=Tu()}(e=Ku.prototype).ia=function(){return this.Da?this.Da:this.Da=(ci(void 0)?ui().then((function(){return new qt((function(t,e){var n=u.document,i=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(i),t()}),!1)}))})):Qt(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof yi("universalLinks.subscribe",u))throw Wu("cordova-universal-links-plugin-fix is not installed");if(void 0===yi("BuildInfo.packageName",u))throw Wu("cordova-plugin-buildinfo is not installed");if("function"!=typeof yi("cordova.plugins.browsertab.openUrl",u))throw Wu("cordova-plugin-browsertab is not installed");if("function"!=typeof yi("cordova.InAppBrowser.open",u))throw Wu("cordova-plugin-inappbrowser is not installed")}),(function(){throw new Zi("cordova-not-ready")}))},e.Fb=function(t,e){return e(new Zi("operation-not-supported-in-this-environment")),Zt()},e.Db=function(){return Qt(new Zi("operation-not-supported-in-this-environment"))},e.Rb=function(){return!1},e.Ob=function(){return!0},e.Jb=function(){return!0},e.Eb=function(t,e,n,i){if(this.c)return Qt(new Zi("redirect-operation-pending"));var r=this,o=u.document,a=null,s=null,c=null,h=null;return this.c=Zt().then((function(){return Io(e),Gu(r)})).then((function(){return function(t,e,n,i,r){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Eo(e,i,null,o,new Zi("no-auth-event"),null,r),s=yi("BuildInfo.packageName",u);if("string"!=typeof s)throw new Zi("invalid-cordova-configuration");var c=yi("BuildInfo.displayName",u),h={};if(bi().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=s;else{if(!bi().toLowerCase().match(/android/))return Qt(new Zi("operation-not-supported-in-this-environment"));h.apn=s}c&&(h.appDisplayName=c),o=function(t){var e=new Bu;Vu(e,t),t=[];var n=8*e.g;56>e.c?Vu(e,Mu,56-e.c):Vu(e,Mu,e.b-(e.c-56));for(var i=63;56<=i;i--)e.f[i]=255&n,n/=256;for(Uu(e),i=n=0;i<e.i;i++)for(var r=24;0<=r;r-=8)t[n++]=e.a[i]>>r&255;return function(t){return B(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),h.sessionId=o;var l=Hs(t.u,t.i,t.l,e,n,null,i,t.m,h,t.o,r);return t.ia().then((function(){var e=t.h;return t.v.a.set(Pu,a.A(),e)})).then((function(){var e=yi("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof e)throw new Zi("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=yi("cordova.plugins.browsertab.openUrl",u)))throw new Zi("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=yi("cordova.InAppBrowser.open",u)))throw new Zi("invalid-cordova-configuration");e=bi(),t.a=n(l,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(r,t,e,n,i)})).then((function(){return new qt((function(t,e){s=function(){var e=yi("cordova.plugins.browsertab.close",u);return t(),"function"==typeof e&&e(),r.a&&"function"==typeof r.a.close&&(r.a.close(),r.a=null),!1},r.Aa(s),c=function(){a||(a=fn(2e3).then((function(){e(new Zi("redirect-cancelled-by-user"))})))},h=function(){Di()&&c()},o.addEventListener("resume",c,!1),bi().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).s((function(t){return zu(r).then((function(){throw t}))}))})).ka((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),a&&a.cancel(),s&&r.Na(s),r.c=null}))},e.Aa=function(t){this.b.push(t),Gu(this).s((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Eo("unknown",null,null,null,new Zi("no-auth-event")),t(e))}))},e.Na=function(t){q(this.b,(function(e){return e==t}))};var Ju={name:"pendingRedirect",C:"session"};function Yu(t){return _u(t.b,Ju,t.a)}function $u(t,e,n){this.i={},this.v=0,this.B=t,this.u=e,this.m=n,this.h=[],this.f=!1,this.l=S(this.o,this),this.b=new lc,this.w=new mc,this.g=new Xu(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.w,this.c.linkViaPopup=this.w,this.c.reauthViaPopup=this.w,this.a=Zu(this.B,this.u,this.m,kr)}function Zu(t,e,n,r){var o=i.a.SDK_VERSION||null;return ci()?new Ku(t,e,n,o,r):new Us(t,e,n,o,r)}function Qu(t){t.f||(t.f=!0,t.a.Aa(t.l));var e=t.a;return t.a.ia().s((function(n){throw t.a==e&&t.reset(),n}))}function tc(t){t.a.Ob()&&Qu(t).s((function(e){var n=new Eo("unknown",null,null,null,new Zi("operation-not-supported-in-this-environment"));ac(e)&&t.o(n)})),t.a.Jb()||fc(t.b)}function ec(t,e){K(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(Ju,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Yu(t.g).then((function(){Qu(t).s((function(e){var n=new Eo("unknown",null,null,null,new Zi("operation-not-supported-in-this-environment"));ac(e)&&t.o(n)}))})):tc(t)})).s((function(){tc(t)}))}function nc(t,e){q(t.h,(function(t){return t==e}))}$u.prototype.reset=function(){this.f=!1,this.a.Na(this.l),this.a=Zu(this.B,this.u,this.m),this.i={}},$u.prototype.o=function(t){if(!t)throw new Zi("invalid-auth-event");if(6e5<=_()-this.v&&(this.i={},this.v=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var i=this.h[n];if(i.xb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,i),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.v=_())),e=!0;break}}return fc(this.b),e};var ic=new Ci(2e3,1e4),rc=new Ci(3e4,6e4);function oc(t,e,n,i,r,o,a){return t.a.Db(e,n,i,(function(){t.f||(t.f=!0,t.a.Aa(t.l))}),(function(){t.reset()}),r,o,a)}function ac(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function sc(t,e,n,i,r){var o;return function(t){return t.b.set(Ju,"pending",t.a)}(t.g).then((function(){return t.a.Eb(e,n,i,r).s((function(e){if(ac(e))throw new Zi("operation-not-supported-in-this-environment");return o=e,Yu(t.g).then((function(){throw o}))})).then((function(){return t.a.Rb()?new qt((function(){})):Yu(t.g).then((function(){return t.oa()})).then((function(){})).s((function(){}))}))}))}function uc(t,e,n,i,r){return t.a.Fb(i,(function(t){e.ja(n,null,t,r)}),ic.get())}$u.prototype.oa=function(){return this.b.oa()};var cc={};function hc(t,e,n){var i=e+":"+n;return cc[i]||(cc[i]=new $u(t,e,n)),cc[i]}function lc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function fc(t){t.g||(t.g=!0,vc(t,!1,null,null))}function pc(t){t.g&&!t.i&&vc(t,!1,null,null)}function dc(t,e){if(t.b=function(){return Zt(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function vc(t,e,n,i){e?i?function(t,e){if(t.b=function(){return Qt(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,i):dc(t,n):dc(t,{user:null}),t.f=[],t.c=[]}function mc(){}function gc(){this.vb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.vb},set:function(t){this.vb=t},enumerable:!1})}function bc(t,e){this.a=e,Vi(this,"verificationId",t)}function yc(t,e,n,i){return new bo(t).Wa(e,n).then((function(t){return new bc(t,i)}))}function wc(t){var e=_r(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new Zi("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Fi(this,{token:t,expirationTime:Ri(1e3*e.exp),authTime:Ri(1e3*e.auth_time),issuedAtTime:Ri(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,claims:e})}function Ic(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Ec(t){this.f=t,this.b=this.a=null,this.c=0}function Tc(t,e){var n=e[Da],i=e.refreshToken;e=Sc(e.expiresIn),t.b=n,t.c=e,t.a=i}function Sc(t){return _()+1e3*parseInt(t,10)}function Ac(t,e){this.a=t||null,this.b=e||null,Fi(this,{lastSignInTime:Ri(e||null),creationTime:Ri(t||null)})}function _c(t,e,n,i,r,o){Fi(this,{uid:t,displayName:i||null,photoURL:r||null,email:n||null,phoneNumber:o||null,providerId:e})}function kc(t,e){for(var n in je.call(this,t),e)this[n]=e[n]}function Nc(t,e,n){this.I=[],this.l=t.apiKey,this.m=t.appName,this.o=t.authDomain||null,t=i.a.SDK_VERSION?gi(i.a.SDK_VERSION):null,this.a=new Pa(this.l,Or(kr),t),this.b=new Ec(this.a),xc(this,e[Da]),Tc(this.b,e),Vi(this,"refreshToken",this.b.a),Uc(this,n||{}),sn.call(this),this.J=!1,this.o&&Ii()&&(this.i=hc(this.o,this.l,this.m)),this.O=[],this.h=null,this.w=function(t){return new Ic((function(){return t.G(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=t.b.c-_()-3e5;return 0<e?e:0}))}(this),this.W=S(this.Ja,this);var r=this;this.ga=null,this.xa=function(t){r.ua(t.g)},this.Z=null,this.P=[],this.wa=function(t){Pc(r,t.c)},this.Y=null}function Oc(t,e){t.Z&&$e(t.Z,"languageCodeChanged",t.xa),(t.Z=e)&&Xe(e,"languageCodeChanged",t.xa)}function Pc(t,e){t.P=e,Ua(t.a,i.a.SDK_VERSION?gi(i.a.SDK_VERSION,t.P):null)}function Cc(t,e){t.Y&&$e(t.Y,"frameworkChanged",t.wa),(t.Y=e)&&Xe(e,"frameworkChanged",t.wa)}function Dc(t){try{return i.a.app(t.m).auth()}catch(e){throw new Zi("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Rc(t){t.B||t.w.b||(t.w.start(),$e(t,"tokenChanged",t.W),Xe(t,"tokenChanged",t.W))}function Lc(t){$e(t,"tokenChanged",t.W),t.w.stop()}function xc(t,e){t.ma=e,Vi(t,"_lat",e)}function jc(t){for(var e=[],n=0;n<t.O.length;n++)e.push(t.O[n](t));return ee(e).then((function(){return t}))}function Mc(t){t.i&&!t.J&&(t.J=!0,ec(t.i,t))}function Uc(t,e){Fi(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new Ac(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Vc(){}function Fc(t){return Zt().then((function(){if(t.B)throw new Zi("app-deleted")}))}function Bc(t){return B(t.providerData,(function(t){return t.providerId}))}function Hc(t,e){e&&(Kc(t,e.providerId),t.providerData.push(e))}function Kc(t,e){q(t.providerData,(function(t){return t.providerId==e}))}function Wc(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Vi(t,e,n)}function qc(t,e){t!=e&&(Fi(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Vi(t,"metadata",function(t){return new Ac(t.a,t.b)}(e.metadata)):Vi(t,"metadata",new Ac),F(e.providerData,(function(e){Hc(t,e)})),function(t,e){t.b=e.b,t.a=e.a,t.c=e.c}(t.b,e.b),Vi(t,"refreshToken",t.b.a))}function Gc(t){return t.G().then((function(e){var n=t.isAnonymous;return function(t,e){return ks(t.a,us,{idToken:e}).then(S(t.zc,t))}(t,e).then((function(){return n||Wc(t,"isAnonymous",!1),e}))}))}function zc(t,e){e[Da]&&t.ma!=e[Da]&&(Tc(t.b,e),t.dispatchEvent(new kc("tokenChanged")),xc(t,e[Da]),Wc(t,"refreshToken",t.b.a))}function Xc(t,e){return Gc(t).then((function(){if(K(Bc(t),e))return jc(t).then((function(){throw new Zi("provider-already-linked")}))}))}function Jc(t,e,n){return Bi({user:t,credential:wo(e),additionalUserInfo:e=Lr(e),operationType:n})}function Yc(t,e){return zc(t,e),t.reload().then((function(){return t}))}function $c(t,e,n,r,o){if(!Ii())return Qt(new Zi("operation-not-supported-in-this-environment"));if(t.h&&!o)return Qt(t.h);var a=Rr(n.providerId),s=Ni(t.uid+":::"),u=null;(!Si()||hi())&&t.o&&n.isOAuthProvider&&(u=Hs(t.o,t.l,t.m,e,n,null,s,i.a.SDK_VERSION||null,null,null,t.tenantId));var c=oi(u,a&&a.sa,a&&a.ra);return r=r().then((function(){if(Qc(t),!o)return t.G().then((function(){}))})).then((function(){return oc(t.i,c,e,n,s,!!u,t.tenantId)})).then((function(){return new qt((function(n,i){t.ja(e,null,new Zi("cancelled-popup-request"),t.g||null),t.f=n,t.v=i,t.g=s,t.c=uc(t.i,t,e,c,s)}))})).then((function(t){return c&&ri(c),t?Bi(t):null})).s((function(t){throw c&&ri(c),t})),th(t,r,o)}function Zc(t,e,n,i,r){if(!Ii())return Qt(new Zi("operation-not-supported-in-this-environment"));if(t.h&&!r)return Qt(t.h);var o=null,a=Ni(t.uid+":::");return i=i().then((function(){if(Qc(t),!r)return t.G().then((function(){}))})).then((function(){return t.ca=a,jc(t)})).then((function(e){return t.da&&(e=(e=t.da).b.set(ih,t.A(),e.a)),e})).then((function(){return sc(t.i,e,n,a,t.tenantId)})).s((function(e){if(o=e,t.da)return rh(t.da);throw o})).then((function(){if(o)throw o})),th(t,i,r)}function Qc(t){if(!t.i||!t.J){if(t.i&&!t.J)throw new Zi("internal-error");throw new Zi("auth-domain-config-required")}}function th(t,e,n){var i=function(t,e,n){return t.h&&!n?(e.cancel(),Qt(t.h)):e.s((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.h||t.dispatchEvent(new kc("userInvalidated")),t.h=e),e}))}(t,e,n);return t.I.push(i),i.ka((function(){W(t.I,i)})),i}function eh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!(t.stsTokenManager&&t.stsTokenManager.accessToken&&t.stsTokenManager.expirationTime))return null;n[Da]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null,n.expiresIn=(t.stsTokenManager.expirationTime-_())/1e3;var i=new Nc(e,n,t);return t.providerData&&F(t.providerData,(function(t){t&&Hc(i,Bi(t))})),t.redirectEventId&&(i.ca=t.redirectEventId),i}function nh(t){this.a=t,this.b=Tu()}lc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},lc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,i=t.b,r=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!r&&!o),"unknown"!=n||r||o?t.a?(vc(this,!0,null,t.a),Zt()):e.Ba(n,i)?function(t,e,n){n=n.Ba(e.c,e.b);var i=e.g,r=e.f,o=e.i,a=e.R(),s=!!e.c.match(/Redirect$/);n(i,r,a,o).then((function(e){vc(t,s,e,null)})).s((function(e){vc(t,s,null,e)}))}(this,t,e):Qt(new Zi("invalid-auth-event")):(vc(this,!1,null,null),Zt())}else Qt(new Zi("invalid-auth-event"))},lc.prototype.oa=function(){var t=this;return new qt((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new Zi("timeout");t.a&&t.a.cancel(),t.a=fn(rc.get()).then((function(){t.b||(t.g=!0,vc(t,!0,null,e))}))}(t))}))},mc.prototype.h=function(t,e){if(t){var n=t.c,i=t.b;t.a?(e.ja(t.c,null,t.a,t.b),Zt()):e.Ba(n,i)?function(t,e){var n=t.b,i=t.c;e.Ba(i,n)(t.g,t.f,t.R(),t.i).then((function(t){e.ja(i,t,null,n)})).s((function(t){e.ja(i,null,t,n)}))}(t,e):Qt(new Zi("invalid-auth-event"))}else Qt(new Zi("invalid-auth-event"))},bc.prototype.confirm=function(t){return t=yo(this.verificationId,t),this.a(t)},Ic.prototype.start=function(){this.a=this.c,function t(e,n){e.stop(),e.b=fn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,n)).then((function(){return function(){var t=u.document,e=null;return Di()||!t?Zt():new qt((function(n){e=function(){Di()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).s((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return e.h()})).then((function(){t(e,!0)})).s((function(n){e.i(n)&&t(e,!1)}))}(this,!0)},Ic.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Ec.prototype.A=function(){return{apiKey:this.f.c,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Ec.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Qt(new Zi("user-token-expired")):t||!this.b||_()>this.c-3e4?this.a?function(t,e){return function(t,e){return new qt((function(n,i){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?Va(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?i(Os(t)):t.access_token&&t.refresh_token?n(t):i(new Zi("internal-error")):i(new Zi("network-request-failed"))}),"POST",Mn(e).toString(),t.g,t.u.get()):i(new Zi("internal-error"))}))}(t.f,e).then((function(e){return t.b=e.access_token,t.c=Sc(e.expires_in),t.a=e.refresh_token,{accessToken:t.b,expirationTime:t.c,refreshToken:t.a}})).s((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Zt(null):Zt({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Ac.prototype.A=function(){return{lastLoginAt:this.b,createdAt:this.a}},k(kc,je),k(Nc,sn),Nc.prototype.ua=function(t){this.ga=t,Ma(this.a,t)},Nc.prototype.ha=function(){return this.ga},Nc.prototype.Ca=function(){return z(this.P)},Nc.prototype.Ja=function(){this.w.b&&(this.w.stop(),this.w.start())},Vi(Nc.prototype,"providerId","firebase"),(e=Nc.prototype).reload=function(){var t=this;return th(this,Fc(this).then((function(){return Gc(t).then((function(){return jc(t)})).then(Vc)})))},e.dc=function(t){return this.G(t).then((function(t){return new wc(t)}))},e.G=function(t){var e=this;return th(this,Fc(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new Zi("internal-error");return t.accessToken!=e.ma&&(xc(e,t.accessToken),e.dispatchEvent(new kc("tokenChanged"))),Wc(e,"refreshToken",t.refreshToken),t.accessToken})))},e.zc=function(t){if(!(t=t.users)||!t.length)throw new Zi("internal-error");Uc(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?B(t,(function(t){return new _c(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Hc(this,e[n]);Wc(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length))},e.Ac=function(t){return Mi("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.hb(t)},e.hb=function(t){var e=this,n=null;return th(this,t.f(this.a,this.uid).then((function(t){return zc(e,t),n=Jc(e,t,"reauthenticate"),e.h=null,e.reload()})).then((function(){return n})),!0)},e.rc=function(t){return Mi("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.fb(t)},e.fb=function(t){var e=this,n=null;return th(this,Xc(this,t.providerId).then((function(){return e.G()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Jc(e,t,"link"),Yc(e,t)})).then((function(){return n})))},e.sc=function(t,e){var n=this;return th(this,Xc(this,"phone").then((function(){return yc(Dc(n),t,e,S(n.fb,n))})))},e.Bc=function(t,e){var n=this;return th(this,Zt().then((function(){return yc(Dc(n),t,e,S(n.hb,n))})),!0)},e.rb=function(t){var e=this;return th(this,this.G().then((function(n){return e.a.rb(n,t)})).then((function(t){return zc(e,t),e.reload()})))},e.Sc=function(t){var e=this;return th(this,this.G().then((function(n){return t.b(e.a,n)})).then((function(t){return zc(e,t),e.reload()})))},e.sb=function(t){var e=this;return th(this,this.G().then((function(n){return e.a.sb(n,t)})).then((function(t){return zc(e,t),e.reload()})))},e.tb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Fc(this);var e=this;return th(this,this.G().then((function(n){return e.a.tb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return zc(e,t),Wc(e,"displayName",t.displayName||null),Wc(e,"photoURL",t.photoUrl||null),F(e.providerData,(function(t){"password"===t.providerId&&(Vi(t,"displayName",e.displayName),Vi(t,"photoURL",e.photoURL))})),jc(e)})).then(Vc))},e.Qc=function(t){var e=this;return th(this,Gc(this).then((function(n){return K(Bc(e),t)?function(t,e,n){return ks(t,os,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return F(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),F(Bc(e),(function(t){n[t]||Kc(e,t)})),n[bo.PROVIDER_ID]||Vi(e,"phoneNumber",null),jc(e)})):jc(e).then((function(){throw new Zi("no-such-provider")}))})))},e.delete=function(){var t=this;return th(this,this.G().then((function(e){return ks(t.a,rs,{idToken:e})})).then((function(){t.dispatchEvent(new kc("userDeleted"))}))).then((function(){for(var e=0;e<t.I.length;e++)t.I[e].cancel("app-deleted");Oc(t,null),Cc(t,null),t.I=[],t.B=!0,Lc(t),Vi(t,"refreshToken",null),t.i&&nc(t.i,t)}))},e.xb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.ca||null)==e||"reauthViaRedirect"==t&&(this.ca||null)==e)},e.ja=function(t,e,n,i){"linkViaPopup"!=t&&"reauthViaPopup"!=t||i!=(this.g||null)||(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.Ba=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?S(this.Bb,this):"reauthViaPopup"==t&&e==(this.g||null)?S(this.Cb,this):"linkViaRedirect"==t&&(this.ca||null)==e?S(this.Bb,this):"reauthViaRedirect"==t&&(this.ca||null)==e?S(this.Cb,this):null},e.tc=function(t){var e=this;return $c(this,"linkViaPopup",t,(function(){return Xc(e,t.providerId).then((function(){return jc(e)}))}),!1)},e.Cc=function(t){return $c(this,"reauthViaPopup",t,(function(){return Zt()}),!0)},e.uc=function(t){var e=this;return Zc(this,"linkViaRedirect",t,(function(){return Xc(e,t.providerId)}),!1)},e.Dc=function(t){return Zc(this,"reauthViaRedirect",t,(function(){return Zt()}),!0)},e.Bb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return th(this,this.G().then((function(n){return $a(r.a,{requestUri:t,postBody:i,sessionId:e,idToken:n})})).then((function(t){return o=Jc(r,t,"link"),Yc(r,t)})).then((function(){return o})))},e.Cb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return th(this,Zt().then((function(){return qr(Za(r.a,{requestUri:t,sessionId:e,postBody:i,tenantId:n}),r.uid)})).then((function(t){return o=Jc(r,t,"reauthenticate"),zc(r,t),r.h=null,r.reload()})).then((function(){return o})),!0)},e.jb=function(t){var e=this,n=null;return th(this,this.G().then((function(e){return n=e,void 0===t||J(t)?{}:Ir(new lr(t))})).then((function(t){return e.a.jb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},e.toJSON=function(){return this.A()},e.A=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.A(),redirectEventId:this.ca||null};return this.metadata&&Z(t,this.metadata.A()),F(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),t};var ih={name:"redirectUser",C:"session"};function rh(t){return _u(t.b,ih,t.a)}function oh(t){this.a=t,this.b=Tu(),this.c=null,this.f=function(t){var e=uh("local"),n=uh("session"),i=uh("none");return function(t,e,n){var i=Au(e,n),r=Su(t,e.C);return t.get(e,n).then((function(o){var a=null;try{a=ki(u.localStorage.getItem(i))}catch(t){}if(a&&!o)return u.localStorage.removeItem(i),t.set(e,a,n);a&&o&&"localStorage"!=r.type&&u.localStorage.removeItem(i)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(r){return r?n:t.b.get(i,t.a).then((function(n){return n?i:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(sh,t.a).then((function(t){return t?uh(t):e}))}))}))})).then((function(e){return t.c=e,ah(t,e.C)})).s((function(){t.c||(t.c=e)}))}(this),this.b.addListener(uh("local"),this.a,S(this.g,this))}function ah(t,e){var n,i=[];for(n in Iu)Iu[n]!==e&&i.push(_u(t.b,uh(Iu[n]),t.a));return i.push(_u(t.b,sh,t.a)),function(t){return new qt((function(e,n){var i=t.length,r=[];if(i)for(var o=function(t,n){i--,r[t]=n,0==i&&e(r)},a=function(t){n(t)},s=0;s<t.length;s++)te(t[s],A(o,s),a);else e(r)}))}(i)}oh.prototype.g=function(){var t=this,e=uh("local");fh(this,(function(){return Zt().then((function(){return t.c&&"local"!=t.c.C?t.b.get(e,t.a):null})).then((function(n){if(n)return ah(t,"local").then((function(){t.c=e}))}))}))};var sh={name:"persistence",C:"session"};function uh(t){return{name:"authUser",C:t}}function ch(t,e){return fh(t,(function(){return t.b.set(t.c,e.A(),t.a)}))}function hh(t){return fh(t,(function(){return _u(t.b,t.c,t.a)}))}function lh(t,e){return fh(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),eh(t||{})}))}))}function fh(t,e){return t.f=t.f.then(e,e),t.f}function ph(t){if(this.l=!1,Vi(this,"settings",new gc),Vi(this,"app",t),!Ih(this).options||!Ih(this).options.apiKey)throw new Zi("invalid-api-key");t=i.a.SDK_VERSION?gi(i.a.SDK_VERSION):null,this.b=new Pa(Ih(this).options&&Ih(this).options.apiKey,Or(kr),t),this.O=[],this.m=[],this.J=[],this.Ub=i.a.INTERNAL.createSubscribe(S(this.oc,this)),this.W=void 0,this.Vb=i.a.INTERNAL.createSubscribe(S(this.pc,this)),yh(this,null),this.h=new oh(Ih(this).options.apiKey+":"+Ih(this).name),this.w=new nh(Ih(this).options.apiKey+":"+Ih(this).name),this.Y=Ah(this,function(t){var e=Ih(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(ih,t.a).then((function(t){return t&&e&&(t.authDomain=e),eh(t||{})}))}(t.w,Ih(t).options.authDomain).then((function(e){return(t.B=e)&&(e.da=t.w),rh(t.w)}));return Ah(t,e)}(t).then((function(){return lh(t.h,e)})).then((function(e){return e?(e.da=t.w,t.B&&(t.B.ca||null)==(e.ca||null)?e:e.reload().then((function(){return ch(t.h,e).then((function(){return e}))})).s((function(n){return"auth/network-request-failed"==n.code?e:hh(t.h)}))):null})).then((function(e){yh(t,e||null)}));return Ah(t,n)}(this)),this.i=Ah(this,function(t){return t.Y.then((function(){return gh(t)})).s((function(){})).then((function(){if(!t.l)return t.ma()})).s((function(){})).then((function(){if(!t.l){t.ga=!0;var e=t.h;e.b.addListener(uh("local"),e.a,t.ma)}}))}(this)),this.ga=!1,this.ma=S(this.Nc,this),this.ub=S(this.aa,this),this.wa=S(this.bc,this),this.xa=S(this.mc,this),this.Ja=S(this.nc,this),this.a=null,function(t){var e=Ih(t).options.authDomain,n=Ih(t).options.apiKey;e&&Ii()&&(t.Tb=t.Y.then((function(){if(!t.l){if(t.a=hc(e,n,Ih(t).name),ec(t.a,t),Eh(t)&&Mc(Eh(t)),t.B){Mc(t.B);var i=t.B;i.ua(t.ha()),Oc(i,t),Pc(i=t.B,t.I),Cc(i,t),t.B=null}return t.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=S(this.delete,this),this.INTERNAL.logFramework=S(this.vc,this),this.o=0,sn.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ha()},set:function(t){this.ua(t)},enumerable:!1}),t.Z=null,Object.defineProperty(t,"ti",{get:function(){return this.R()},set:function(t){this.nb(t)},enumerable:!1}),t.P=null}(this),this.I=[]}function dh(t){je.call(this,"languageCodeChanged"),this.g=t}function vh(t){je.call(this,"frameworkChanged"),this.c=t}function mh(t){return t.Tb||Qt(new Zi("auth-domain-config-required"))}function gh(t){if(!Ii())return Qt(new Zi("operation-not-supported-in-this-environment"));var e=mh(t).then((function(){return t.a.oa()})).then((function(t){return t?Bi(t):null}));return Ah(t,e)}function bh(t,e){var n={};return n.apiKey=Ih(t).options.apiKey,n.authDomain=Ih(t).options.authDomain,n.appName=Ih(t).name,t.Y.then((function(){return function(t,e,n,i){var r=new Nc(t,e);return n&&(r.da=n),i&&Pc(r,i),r.reload().then((function(){return r}))}(n,e,t.w,t.Ca())})).then((function(e){return Eh(t)&&e.uid==Eh(t).uid?(qc(Eh(t),e),t.aa(e)):(yh(t,e),Mc(e),t.aa(e))})).then((function(){Sh(t)}))}function yh(t,e){Eh(t)&&(function(t,e){q(t.O,(function(t){return t==e}))}(Eh(t),t.ub),$e(Eh(t),"tokenChanged",t.wa),$e(Eh(t),"userDeleted",t.xa),$e(Eh(t),"userInvalidated",t.Ja),Lc(Eh(t))),e&&(e.O.push(t.ub),Xe(e,"tokenChanged",t.wa),Xe(e,"userDeleted",t.xa),Xe(e,"userInvalidated",t.Ja),0<t.o&&Rc(e)),Vi(t,"currentUser",e),e&&(e.ua(t.ha()),Oc(e,t),Pc(e,t.I),Cc(e,t))}function wh(t,e){var n=null,i=null;return Ah(t,e.then((function(e){return n=wo(e),i=Lr(e),bh(t,e)})).then((function(){return Bi({user:Eh(t),credential:n,additionalUserInfo:i,operationType:"signIn"})})))}function Ih(t){return t.app}function Eh(t){return t.currentUser}function Th(t){return Eh(t)&&Eh(t)._lat||null}function Sh(t){if(t.ga){for(var e=0;e<t.m.length;e++)t.m[e]&&t.m[e](Th(t));if(t.W!==t.getUid()&&t.J.length)for(t.W=t.getUid(),e=0;e<t.J.length;e++)t.J[e]&&t.J[e](Th(t))}}function Ah(t,e){return t.O.push(e),e.ka((function(){W(t.O,e)})),e}function _h(){}function kh(){this.a={},this.b=1e12}oh.prototype.mb=function(t){var e=null,n=this;return function(t){var e=new Zi("invalid-persistence-type"),n=new Zi("unsupported-persistence-type");t:{for(i in Iu)if(Iu[i]==t){var i=!0;break t}i=!1}if(!i||"string"!=typeof t)throw e;switch(fi()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;default:if(!wi()&&"none"!==t)throw n}}(t),fh(this,(function(){return t!=n.c.C?n.b.get(n.c,n.a).then((function(i){return e=i,ah(n,t)})).then((function(){if(n.c=uh(t),e)return n.b.set(n.c,e,n.a)})):Zt()}))},k(ph,sn),k(dh,je),k(vh,je),(e=ph.prototype).mb=function(t){return Ah(this,t=this.h.mb(t))},e.ua=function(t){this.Z===t||this.l||(this.Z=t,Ma(this.b,this.Z),this.dispatchEvent(new dh(this.ha())))},e.ha=function(){return this.Z},e.Tc=function(){var t=u.navigator;this.ua(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},e.vc=function(t){this.I.push(t),Ua(this.b,i.a.SDK_VERSION?gi(i.a.SDK_VERSION,this.I):null),this.dispatchEvent(new vh(this.I))},e.Ca=function(){return z(this.I)},e.nb=function(t){this.P===t||this.l||(this.P=t,this.b.b=this.P)},e.R=function(){return this.P},e.toJSON=function(){return{apiKey:Ih(this).options.apiKey,authDomain:Ih(this).options.authDomain,appName:Ih(this).name,currentUser:Eh(this)&&Eh(this).A()}},e.xb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},e.ja=function(t,e,n,i){"signInViaPopup"==t&&this.g==i&&(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.Ba=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?S(this.ac,this):null},e.ac=function(t,e,n,i){var r=this;t={requestUri:t,postBody:i,sessionId:e,tenantId:n},this.c&&(this.c.cancel(),this.c=null);var o=null,a=null,s=Ya(r.b,t).then((function(t){return o=wo(t),a=Lr(t),t}));return Ah(this,t=r.Y.then((function(){return s})).then((function(t){return bh(r,t)})).then((function(){return Bi({user:Eh(r),credential:o,additionalUserInfo:a,operationType:"signIn"})})))},e.Lc=function(t){if(!Ii())return Qt(new Zi("operation-not-supported-in-this-environment"));var e=this,n=Rr(t.providerId),r=Ni(),o=null;(!Si()||hi())&&Ih(this).options.authDomain&&t.isOAuthProvider&&(o=Hs(Ih(this).options.authDomain,Ih(this).options.apiKey,Ih(this).name,"signInViaPopup",t,null,r,i.a.SDK_VERSION||null,null,null,this.R()));var a=oi(o,n&&n.sa,n&&n.ra);return Ah(this,n=mh(this).then((function(n){return oc(n,a,"signInViaPopup",t,r,!!o,e.R())})).then((function(){return new qt((function(t,n){e.ja("signInViaPopup",null,new Zi("cancelled-popup-request"),e.g),e.f=t,e.v=n,e.g=r,e.c=uc(e.a,e,"signInViaPopup",a,r)}))})).then((function(t){return a&&ri(a),t?Bi(t):null})).s((function(t){throw a&&ri(a),t})))},e.Mc=function(t){if(!Ii())return Qt(new Zi("operation-not-supported-in-this-environment"));var e=this;return Ah(this,mh(this).then((function(){return function(t){return fh(t,(function(){return t.b.set(sh,t.c.C,t.a)}))}(e.h)})).then((function(){return sc(e.a,"signInViaRedirect",t,void 0,e.R())})))},e.oa=function(){var t=this;return gh(this).then((function(e){return t.a&&pc(t.a.b),e})).s((function(e){throw t.a&&pc(t.a.b),e}))},e.Rc=function(t){if(!t)return Qt(new Zi("null-user"));if(this.P!=t.tenantId)return Qt(new Zi("tenant-id-mismatch"));var e=this,n={};n.apiKey=Ih(this).options.apiKey,n.authDomain=Ih(this).options.authDomain,n.appName=Ih(this).name;var i=function(t,e,n,i){e=e||{apiKey:t.l,authDomain:t.o,appName:t.m};var r=t.b,o={};return o[Da]=r.b,o.refreshToken=r.a,o.expiresIn=(r.c-_())/1e3,e=new Nc(e,o),n&&(e.da=n),i&&Pc(e,i),qc(e,t),e}(t,n,e.w,e.Ca());return Ah(this,this.i.then((function(){if(Ih(e).options.apiKey!=t.l)return i.reload()})).then((function(){return Eh(e)&&t.uid==Eh(e).uid?(qc(Eh(e),t),e.aa(t)):(yh(e,i),Mc(i),e.aa(i))})).then((function(){Sh(e)})))},e.pb=function(){var t=this;return Ah(this,this.i.then((function(){return t.a&&pc(t.a.b),Eh(t)?(yh(t,null),hh(t.h).then((function(){Sh(t)}))):Zt()})))},e.Nc=function(){var t=this;return lh(this.h,Ih(this).options.authDomain).then((function(e){if(!t.l){var n;if(n=Eh(t)&&e){n=Eh(t).uid;var i=e.uid;n=null!=n&&""!==n&&null!=i&&""!==i&&n==i}if(n)return qc(Eh(t),e),Eh(t).G();(Eh(t)||e)&&(yh(t,e),e&&(Mc(e),e.da=t.w),t.a&&ec(t.a,t),Sh(t))}}))},e.aa=function(t){return ch(this.h,t)},e.bc=function(){Sh(this),this.aa(Eh(this))},e.mc=function(){this.pb()},e.nc=function(){this.pb()},e.oc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(Eh(e))}))},e.pc=function(t){var e=this;!function(t,e){t.J.push(e),Ah(t,t.i.then((function(){!t.l&&K(t.J,e)&&t.W!==t.getUid()&&(t.W=t.getUid(),e(Th(t)))})))}(this,(function(){t.next(Eh(e))}))},e.xc=function(t,e,n){var i=this;return this.ga&&Promise.resolve().then((function(){b(t)?t(Eh(i)):b(t.next)&&t.next(Eh(i))})),this.Ub(t,e,n)},e.wc=function(t,e,n){var i=this;return this.ga&&Promise.resolve().then((function(){i.W=i.getUid(),b(t)?t(Eh(i)):b(t.next)&&t.next(Eh(i))})),this.Vb(t,e,n)},e.cc=function(t){var e=this;return Ah(this,this.i.then((function(){return Eh(e)?Eh(e).G(t).then((function(t){return{accessToken:t}})):null})))},e.Hc=function(t){var e=this;return this.i.then((function(){return wh(e,ks(e.b,Es,{token:t}))})).then((function(t){var n=t.user;return Wc(n,"isAnonymous",!1),e.aa(n),t}))},e.Ic=function(t,e){var n=this;return this.i.then((function(){return wh(n,ks(n.b,Ts,{email:t,password:e}))}))},e.Xb=function(t,e){var n=this;return this.i.then((function(){return wh(n,ks(n.b,ns,{email:t,password:e}))}))},e.Sa=function(t){var e=this;return this.i.then((function(){return wh(e,t.na(e.b))}))},e.Gc=function(t){return Mi("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Sa(t)},e.ob=function(){var t=this;return this.i.then((function(){var e=Eh(t);if(e&&e.isAnonymous){var n=Bi({providerId:null,isNewUser:!1});return Bi({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return wh(t,t.b.ob()).then((function(e){var n=e.user;return Wc(n,"isAnonymous",!0),t.aa(n),e}))}))},e.getUid=function(){return Eh(this)&&Eh(this).uid||null},e.Wb=function(t){this.addAuthTokenListener(t),this.o++,0<this.o&&Eh(this)&&Rc(Eh(this))},e.Ec=function(t){var e=this;F(this.m,(function(n){n==t&&e.o--})),0>this.o&&(this.o=0),0==this.o&&Eh(this)&&Lc(Eh(this)),this.removeAuthTokenListener(t)},e.addAuthTokenListener=function(t){var e=this;this.m.push(t),Ah(this,this.i.then((function(){e.l||K(e.m,t)&&t(Th(e))})))},e.removeAuthTokenListener=function(t){q(this.m,(function(e){return e==t}))},e.delete=function(){this.l=!0;for(var t=0;t<this.O.length;t++)this.O[t].cancel("app-deleted");return this.O=[],this.h&&(t=this.h).b.removeListener(uh("local"),t.a,this.ma),this.a&&(nc(this.a,this),pc(this.a.b)),Promise.resolve()},e.$b=function(t){return Ah(this,function(t,e){return ks(t,is,{identifier:e,continueUri:Ei()?ei():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.b,t))},e.qc=function(t){return!!po(t)},e.lb=function(t,e){var n=this;return Ah(this,Zt().then((function(){var t=new lr(e);if(!t.c)throw new Zi("argument-error",dr+" must be true when sending sign in link to email");return Ir(t)})).then((function(e){return n.b.lb(t,e)})).then((function(){})))},e.Uc=function(t){return this.Ma(t).then((function(t){return t.data.email}))},e.ab=function(t,e){return Ah(this,this.b.ab(t,e).then((function(){})))},e.Ma=function(t){return Ah(this,this.b.Ma(t).then((function(t){return new Ki(t)})))},e.Ya=function(t){return Ah(this,this.b.Ya(t).then((function(){})))},e.kb=function(t,e){var n=this;return Ah(this,Zt().then((function(){return void 0===e||J(e)?{}:Ir(new lr(e))})).then((function(e){return n.b.kb(t,e)})).then((function(){})))},e.Kc=function(t,e){return Ah(this,yc(this,t,e,S(this.Sa,this)))},e.Jc=function(t,e){var n=this;return Ah(this,Zt().then((function(){var i=e||ei(),r=fo(t,i);if(!(i=po(i)))throw new Zi("argument-error","Invalid email link!");if(i.tenantId!==n.R())throw new Zi("tenant-id-mismatch");return n.Sa(r)})))},_h.prototype.render=function(){},_h.prototype.reset=function(){},_h.prototype.getResponse=function(){},_h.prototype.execute=function(){};var Nh=null;function Oh(t,e){return(e=Ph(e))&&t.a[e]||null}function Ph(t){return(t=void 0===t?1e12:t)?t.toString():null}function Ch(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=Wn(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():Xe(this.f,"click",this.i)}function Dh(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function Rh(){}kh.prototype.render=function(t,e){return this.a[this.b.toString()]=new Ch(t,e),this.b++},kh.prototype.reset=function(t){var e=Oh(this,t);t=Ph(t),e&&t&&(e.delete(),delete this.a[t])},kh.prototype.getResponse=function(t){return(t=Oh(this,t))?t.getResponse():null},kh.prototype.execute=function(t){(t=Oh(this,t))&&t.execute()},Ch.prototype.getResponse=function(){return Dh(this),this.b},Ch.prototype.execute=function(){Dh(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},Ch.prototype.delete=function(){Dh(this),this.g=!0,clearTimeout(this.a),this.a=null,$e(this.f,"click",this.i)},Rh.prototype.g=function(){return Nh||(Nh=new kh),Zt(Nh)},Rh.prototype.c=function(){};var Lh=null;function xh(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var jh=new Q(nt,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Mh=new Ci(3e4,6e4);xh.prototype.g=function(t){var e=this;return new qt((function(n,i){var r=setTimeout((function(){i(new Zi("network-request-failed"))}),Mh.get());!u.grecaptcha||t!==e.f&&!e.b?(u[e.a]=function(){if(u.grecaptcha){e.f=t;var o=u.grecaptcha.render;u.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(r),n(u.grecaptcha)}else clearTimeout(r),i(new Zi("internal-error"));delete u[e.a]},Zt(Ta(at(jh,{onload:e.a,hl:t||""}))).s((function(){clearTimeout(r),i(new Zi("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(r),n(u.grecaptcha))}))},xh.prototype.c=function(){this.b--};var Uh=null;function Vh(t,e,n,i,r,o,a){if(Vi(this,"type","recaptcha"),this.c=this.f=null,this.B=!1,this.u=e,this.g=null,a?(Lh||(Lh=new Rh),a=Lh):(Uh||(Uh=new xh),a=Uh),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Hh])throw new Zi("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Kh],!u.document)throw new Zi("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Wn(e)||!this.i&&Wn(e).hasChildNodes())throw new Zi("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Pa(t,o||null,r||null),this.v=i||function(){return null};var s=this;this.l=[];var c=this.a[Fh];this.a[Fh]=function(t){if(Wh(s,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=yi(c,u);"function"==typeof e&&e(t)}};var h=this.a[Bh];this.a[Bh]=function(){if(Wh(s,null),"function"==typeof h)h();else if("string"==typeof h){var t=yi(h,u);"function"==typeof t&&t()}}}var Fh="callback",Bh="expired-callback",Hh="sitekey",Kh="size";function Wh(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function qh(t,e){return t.h.push(e),e.ka((function(){W(t.h,e)})),e}function Gh(t){if(t.B)throw new Zi("internal-error","RecaptchaVerifier instance has been destroyed.")}function zh(t,e,n){var r=!1;try{this.b=n||i.a.app()}catch(t){throw new Zi("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new Zi("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().Ca()}catch(t){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}a=i.a.SDK_VERSION?gi(i.a.SDK_VERSION,a):null,Vh.call(this,n,t,e,(function(){try{var t=o.b.auth().ha()}catch(e){t=null}return t}),a,Or(kr),r)}function Xh(t,e,n,i){t:{n=Array.prototype.slice.call(n);for(var r=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new Zi("internal-error","Argument validator encountered a required argument after an optional argument.");r++}if(o=e.length,n.length<r||o<n.length)i="Expected "+(r==o?1==r?"1 argument":r+" arguments":r+"-"+o+" arguments")+" but got "+n.length+".";else{for(r=0;r<n.length;r++)if(o=e[r].optional&&void 0===n[r],!e[r].N(n[r])&&!o){if(e=e[r],0>r||r>=Jh.length)throw new Zi("internal-error","Argument validator received an unsupported number of arguments.");n=Jh[r],i=(i?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.M+".";break t}i=null}}if(i)throw new Zi("argument-error",t+" failed: "+i)}(e=Vh.prototype).Da=function(){var t=this;return this.f?this.f:this.f=qh(this,Zt().then((function(){if(Ei()&&!li())return ui();throw new Zi("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.m.g(t.v())})).then((function(e){return t.g=e,ks(t.o,ps,{})})).then((function(e){t.a[Hh]=e.recaptchaSiteKey})).s((function(e){throw t.f=null,e})))},e.render=function(){Gh(this);var t=this;return qh(this,this.Da().then((function(){if(null===t.c){var e=t.u;if(!t.i){var n=Wn(e);e=function(t,e,n){var i=arguments,r=document,o=String(i[0]),a=i[1];if(!Kn&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Vt(a.name),'"'),a.type){o.push(' type="',Vt(a.type),'"');var s={};Z(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=r.createElement(o),a&&(c(a)?o.className=a:m(a)?o.className=a.join(" "):qn(o,a)),2<i.length&&zn(r,o,i),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},e.verify=function(){Gh(this);var t=this;return qh(this,this.render().then((function(e){return new qt((function(n){var i=t.g.getResponse(e);if(i)n(i);else{var r=function(e){e&&(function(t,e){q(t.l,(function(t){return t==e}))}(t,r),n(e))};t.l.push(r),t.i&&t.g.execute(t.c)}}))})))},e.reset=function(){Gh(this),null!==this.c&&this.g.reset(this.c)},e.clear=function(){Gh(this),this.B=!0,this.m.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=Wn(this.u);for(var e;e=t.firstChild;)t.removeChild(e)}},k(zh,Vh);var Jh="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Yh(t,e){return{name:t||"",M:"a valid string",optional:!!e,N:c}}function $h(t,e){return{name:t||"",M:"a boolean",optional:!!e,N:h}}function Zh(t,e){return{name:t||"",M:"a valid object",optional:!!e,N:y}}function Qh(t,e){return{name:t||"",M:"a function",optional:!!e,N:b}}function tl(t,e){return{name:t||"",M:"null",optional:!!e,N:v}}function el(t){return{name:t?t+"Credential":"credential",M:t?"a valid "+t+" credential":"a valid credential",optional:!1,N:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.na||!n)}}}function nl(){return{name:"applicationVerifier",M:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,N:function(t){return!!(t&&c(t.type)&&b(t.verify))}}}function il(t,e,n,i){return{name:n||"",M:t.M+" or "+e.M,optional:!!i,N:function(n){return t.N(n)||e.N(n)}}}function rl(t,e){for(var n in e){var i=e[n].name;t[i]=sl(i,t[n],e[n].j)}}function ol(t,e){for(var n in e){var i=e[n].name;i!==n&&Object.defineProperty(t,i,{get:A((function(t){return this[t]}),n),set:A((function(t,e,n,i){Xh(t,[n],[i],!0),this[e]=i}),i,n,e[n].Za),enumerable:!0})}}function al(t,e,n,i){t[e]=sl(e,n,i)}function sl(t,e,n){function i(){var t=Array.prototype.slice.call(arguments);return Xh(o,n,t),e.apply(this,t)}if(!n)return e;var r,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(r in e)i[r]=e[r];for(r in e.prototype)i.prototype[r]=e.prototype[r];return i}rl(ph.prototype,{Ya:{name:"applyActionCode",j:[Yh("code")]},Ma:{name:"checkActionCode",j:[Yh("code")]},ab:{name:"confirmPasswordReset",j:[Yh("code"),Yh("newPassword")]},Xb:{name:"createUserWithEmailAndPassword",j:[Yh("email"),Yh("password")]},$b:{name:"fetchSignInMethodsForEmail",j:[Yh("email")]},oa:{name:"getRedirectResult",j:[]},qc:{name:"isSignInWithEmailLink",j:[Yh("emailLink")]},wc:{name:"onAuthStateChanged",j:[il(Zh(),Qh(),"nextOrObserver"),Qh("opt_error",!0),Qh("opt_completed",!0)]},xc:{name:"onIdTokenChanged",j:[il(Zh(),Qh(),"nextOrObserver"),Qh("opt_error",!0),Qh("opt_completed",!0)]},kb:{name:"sendPasswordResetEmail",j:[Yh("email"),il(Zh("opt_actionCodeSettings",!0),tl(null,!0),"opt_actionCodeSettings",!0)]},lb:{name:"sendSignInLinkToEmail",j:[Yh("email"),Zh("actionCodeSettings")]},mb:{name:"setPersistence",j:[Yh("persistence")]},Gc:{name:"signInAndRetrieveDataWithCredential",j:[el()]},ob:{name:"signInAnonymously",j:[]},Sa:{name:"signInWithCredential",j:[el()]},Hc:{name:"signInWithCustomToken",j:[Yh("token")]},Ic:{name:"signInWithEmailAndPassword",j:[Yh("email"),Yh("password")]},Jc:{name:"signInWithEmailLink",j:[Yh("email"),Yh("emailLink",!0)]},Kc:{name:"signInWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},Lc:{name:"signInWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"signInWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Rc:{name:"updateCurrentUser",j:[il({name:"user",M:"an instance of Firebase User",optional:!1,N:function(t){return!!(t&&t instanceof Nc)}},tl(),"user")]},pb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Yh(null,!0)]},Tc:{name:"useDeviceLanguage",j:[]},Uc:{name:"verifyPasswordResetCode",j:[Yh("code")]}}),ol(ph.prototype,{lc:{name:"languageCode",Za:il(Yh(),tl(),"languageCode")},ti:{name:"tenantId",Za:il(Yh(),tl(),"tenantId")}}),ph.Persistence=Iu,ph.Persistence.LOCAL="local",ph.Persistence.SESSION="session",ph.Persistence.NONE="none",rl(Nc.prototype,{delete:{name:"delete",j:[]},dc:{name:"getIdTokenResult",j:[$h("opt_forceRefresh",!0)]},G:{name:"getIdToken",j:[$h("opt_forceRefresh",!0)]},rc:{name:"linkAndRetrieveDataWithCredential",j:[el()]},fb:{name:"linkWithCredential",j:[el()]},sc:{name:"linkWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},tc:{name:"linkWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},uc:{name:"linkWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ac:{name:"reauthenticateAndRetrieveDataWithCredential",j:[el()]},hb:{name:"reauthenticateWithCredential",j:[el()]},Bc:{name:"reauthenticateWithPhoneNumber",j:[Yh("phoneNumber"),nl()]},Cc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},jb:{name:"sendEmailVerification",j:[il(Zh("opt_actionCodeSettings",!0),tl(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Yh(null,!0)]},Qc:{name:"unlink",j:[Yh("provider")]},rb:{name:"updateEmail",j:[Yh("email")]},sb:{name:"updatePassword",j:[Yh("password")]},Sc:{name:"updatePhoneNumber",j:[el("phone")]},tb:{name:"updateProfile",j:[Zh("profile")]}}),rl(kh.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),rl(_h.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),rl(qt.prototype,{ka:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),ol(gc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",Za:$h("appVerificationDisabledForTesting")}}),rl(bc.prototype,{confirm:{name:"confirm",j:[Yh("verificationCode")]}}),al(Wr,"fromJSON",(function(t){t=c(t)?JSON.parse(t):t;for(var e,n=[$r,ho,mo,Xr],i=0;i<n.length;i++)if(e=n[i](t))return e;return null}),[il(Yh(),Zh(),"json")]),al(lo,"credential",(function(t,e){return new co(t,e)}),[Yh("email"),Yh("password")]),rl(co.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),rl(eo.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(eo,"credential",no,[il(Yh(),Zh(),"token")]),al(lo,"credentialWithLink",fo,[Yh("email"),Yh("emailLink")]),rl(io.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(io,"credential",ro,[il(Yh(),Zh(),"token")]),rl(oo.prototype,{ya:{name:"addScope",j:[Yh("scope")]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(oo,"credential",ao,[il(Yh(),il(Zh(),tl()),"idToken"),il(Yh(),tl(),"accessToken",!0)]),rl(so.prototype,{Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),al(so,"credential",uo,[il(Yh(),Zh(),"token"),Yh("secret",!0)]),rl(to.prototype,{ya:{name:"addScope",j:[Yh("scope")]},credential:{name:"credential",j:[il(Yh(),il(Zh(),tl()),"optionsOrIdToken"),il(Yh(),tl(),"accessToken",!0)]},Ga:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),rl(Jr.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),rl(Gr.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),al(bo,"credential",yo,[Yh("verificationId"),Yh("verificationCode")]),rl(bo.prototype,{Wa:{name:"verifyPhoneNumber",j:[Yh("phoneNumber"),nl()]}}),rl(vo.prototype,{A:{name:"toJSON",j:[Yh(null,!0)]}}),rl(Zi.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),rl(No.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),rl(ko.prototype,{toJSON:{name:"toJSON",j:[Yh(null,!0)]}}),rl(zh.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),al(nr,"parseLink",hr,[Yh("link")]),function(){if(void 0===i.a||!i.a.INTERNAL||!i.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Wi,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:ph,AuthCredential:Wr,Error:Zi};al(t,"EmailAuthProvider",lo,[]),al(t,"FacebookAuthProvider",eo,[]),al(t,"GithubAuthProvider",io,[]),al(t,"GoogleAuthProvider",oo,[]),al(t,"TwitterAuthProvider",so,[]),al(t,"OAuthProvider",to,[Yh("providerId")]),al(t,"SAMLAuthProvider",Qr,[Yh("providerId")]),al(t,"PhoneAuthProvider",bo,[{name:"auth",M:"an instance of Firebase Auth",optional:!0,N:function(t){return!!(t&&t instanceof ph)}}]),al(t,"RecaptchaVerifier",zh,[il(Yh(),{name:"",M:"an HTML element",optional:!1,N:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Zh("recaptchaParameters",!0),{name:"app",M:"an instance of Firebase App",optional:!0,N:function(t){return!!(t&&t instanceof i.a.app.App)}}]),al(t,"ActionCodeURL",nr,[]),i.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new ph(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),i.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:S((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:S(t.cc,t),addAuthTokenListener:S(t.Wb,t),removeAuthTokenListener:S(t.Ec,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),i.a.registerVersion("@firebase/auth","0.13.4"),i.a.INTERNAL.extendNamespace({User:Nc})}()}).apply(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(4))},function(t,e,n){"use strict";var i=n(1),r=n.n(i);n(7),r.a.initializeApp({apiKey:"AIzaSyA1Qn9STy07hxJZQ27Q_2-dhz4aLvrUdEo",authDomain:"simple-piskel-clone-2791b.firebaseapp.com",databaseURL:"https://simple-piskel-clone-2791b.firebaseio.com",projectId:"simple-piskel-clone-2791b",storageBucket:"simple-piskel-clone-2791b.appspot.com",messagingSenderId:"749159447621",appId:"1:749159447621:web:1cbe62b3929549ad55f72c"});let o=function(){const t=localStorage.getItem("user");return t&&"null"!==t?JSON.parse(t):null}();const a=document.querySelector(".sign-in-block a");null!==o?(a.insertAdjacentHTML("afterend",`<span>Hello, ${o.displayName}!</span>`),a.remove()):a.addEventListener("click",t=>{t.preventDefault();const e=new r.a.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/contacts.readonly"),r.a.auth().languageCode="en",r.a.auth().signInWithPopup(e).then(t=>{o=t,localStorage.setItem("user",JSON.stringify(o)),a.insertAdjacentHTML("afterend",`<span>Hello, ${o.displayName}!</span>`),a.remove()})})},,,,,,function(t,e,n){n(15),t.exports=n(16)},function(t,e,n){"use strict";n.r(e),n(8),document.querySelectorAll(".samples img").forEach(t=>{t.addEventListener("click",()=>{const e=t.getAttribute("filename")+".json";sessionStorage.setItem("exampleName",JSON.stringify(e)),window.open("./app.html","_self")})})},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,